{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","isHitTestVisible","isPointerBlocker","isFocusInvisible","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","left","top","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","_linkedMesh","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","font","fillStyle","globalAlpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","parent","_onPointerEnter","_onPointerOut","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","getChildByName","children","child","getChildByType","typeName","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","other","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_b","_c","_mapGridNode","_finalProcessing","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","slice","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","GUIImage","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","Image","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","_STRETCH_NONE","_STRETCH_FILL","_STRETCH_UNIFORM","_STRETCH_EXTEND","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","attach","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","material","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Color3","Red","Black","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","AdvancedDynamicTexture","Texture","TRILINEAR_SAMPLINGMODE","rootContainer","scaleX","scaleY","premulAlpha","_applyFacade","facadeTexture","emissiveTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","StandardMaterial","getScene","specularColor","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","alpha","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","onBlur","_scrollLeft","clearTimeout","_blinkTimeout","onFocus","navigator","userAgent","prompt","focusedControl","processKey","keyCode","substr","deletePosition","deadKey","insertPosition","processKeyboard","evt","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","_translatePoint","getProjectedPosition","getBoundingInfo","boundingSphere","center","getWorldMatrix","xValue","Number","_canvas","yValue","style_1","generateMipMaps","samplingMode","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_capturingControl","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","_texture","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","event","skipOnPointerObservable","hasAlpha","_resizeObserver","getEngine","onResizeObservable","_onResize","isReady","_layerToDispose","layer","isBackground","executeOnAllControls","func","container","_isFontSizeInPercentage","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","worldMatrix","renderScale","layerMask","isDisposed","isDirty","_render","update","clearRect","measure","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","backFaceCulling","diffuseColor","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","PushMaterial","__export","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","onValueChangedObservable","_pointerIsDown","equals","_RGBtoHSV","g","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_updateValueFromPointer","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","_removeCell","cell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","first","forEach","_minX","_minY","_maxX","_maxY","RadioButton","group","undefined","childRadio","stackPanel_1","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_createKey","propertySet","background","paddingRight","paddingTop","paddingBottom","addKeysRow","keys","propertySets","panel","isVertical","properties","applyShiftState","rowContainer","j","button_tblock","toUpperCase","toLowerCase","_connectedInputText","connect","input","_onFocusObserver","_onBlurObserver","_onKeyPressObserver","disconnect","CreateDefaultLayout","returnValue","Slider","_thumbWidth","_minimum","_maximum","_borderColor","_barOffset","_isThumbCircle","_isThumbClamped","_getThumbThickness","backgroundLength","thumbThickness","effectiveBarOffset","isThumbCircle","backgroundBoxLength","backgroundBoxThickness","effectiveThumbThickness","console","error","isThumbClamped","thumbPosition","rotation","options","isHorizontal","controlFirst","header","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","BABYLON","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","fontSize","_backPlate","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","a","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","_scene","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the horizontal alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the vertical alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control width \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control height \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in parent local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(): void {\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        this._clip(context);\r\n        context.clip();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerEnter(target);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index > -1) {\r\n            this.linkWithMesh(null);\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}  ","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added \r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        super._markMatrixAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(root, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            this._clipForChildren(context);\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}   ","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate \r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}   ","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default). \r\n     * The panel will automatically compute the number of rows based on number of child controls. \r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested. \r\n     * The panel will automatically compute the number of columns based on number of child controls. \r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) maxLineWidth = line.width;\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets panel width */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets panel height */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}  ","import { Control } from \"./control\";\r\nimport { Nullable, Tools } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nclass GUIImage extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = GUIImage.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = new Image();\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        }\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell width to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell height to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case GUIImage.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case GUIImage.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case GUIImage.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case GUIImage.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Static\r\n    private static _STRETCH_NONE = 0;\r\n    private static _STRETCH_FILL = 1;\r\n    private static _STRETCH_UNIFORM = 2;\r\n    private static _STRETCH_EXTEND = 3;\r\n\r\n    /** STRETCH_NONE */\r\n    public static get STRETCH_NONE(): number {\r\n        return GUIImage._STRETCH_NONE;\r\n    }\r\n\r\n    /** STRETCH_FILL */\r\n    public static get STRETCH_FILL(): number {\r\n        return GUIImage._STRETCH_FILL;\r\n    }\r\n\r\n    /** STRETCH_UNIFORM */\r\n    public static get STRETCH_UNIFORM(): number {\r\n        return GUIImage._STRETCH_UNIFORM;\r\n    }\r\n\r\n    /** STRETCH_EXTEND */\r\n    public static get STRETCH_EXTEND(): number {\r\n        return GUIImage._STRETCH_EXTEND;\r\n    }\r\n}\r\n\r\nexport { GUIImage as Image };\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n}    ","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}    ","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1) \r\n     * @param m10 defines value for (1, 0) \r\n     * @param m11 defines value for (1, 1) \r\n     * @param m20 defines value for (2, 0) \r\n     * @param m21 defines value for (2, 1) \r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix \r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform \r\n     * @param result defines the target vector2 \r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation \r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling \r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix \r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation \r\n     * @param angle defines the rotation angle \r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling \r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix \r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}   ","import { Control } from \"./control\";\r\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _text = \"\";\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    public promptMessage = \"Please enter text:\";\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\r\n            let value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKey(keyCode: number, key?: string) {\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._text && this._text.length > 0) {\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._text.substr(0, this._text.length - 1);\r\n                    } else {\r\n                        let deletePosition = this._text.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._text && this._text.length > 0) {\r\n                    let deletePosition = this._text.length - this._cursorOffset;\r\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\r\n                    this._cursorOffset--;\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._text.length;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._text.length) {\r\n                    this._cursorOffset = this._text.length;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                this.deadKey = true;\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key &&\r\n            ((keyCode === -1) ||                     // Direct access\r\n                (keyCode === 32) ||                     // Space\r\n                (keyCode > 47 && keyCode < 58) ||       // Numbers\r\n                (keyCode > 64 && keyCode < 91) ||       // Letters\r\n                (keyCode > 185 && keyCode < 193) ||     // Special characters\r\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\r\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    let insertPosition = this._text.length - this._cursorOffset;\r\n\r\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKeyboard(evt: KeyboardEvent): void {\r\n        this.processKey(evt.keyCode, evt.key);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Background\r\n            if (this._isFocused) {\r\n                if (this._focusedBackground) {\r\n                    context.fillStyle = this._focusedBackground;\r\n\r\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            } else if (this._background) {\r\n                context.fillStyle = this._background;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (!this._fontOffset) {\r\n                this._fontOffset = Control._GetFontOffset(context.font);\r\n            }\r\n\r\n            // Text\r\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\r\n            if (this.color) {\r\n                context.fillStyle = this.color;\r\n            }\r\n\r\n            let text = this._beforeRenderText(this._text);\r\n\r\n            if (!this._isFocused && !this._text && this._placeholderText) {\r\n                text = this._placeholderText;\r\n\r\n                if (this._placeholderColor) {\r\n                    context.fillStyle = this._placeholderColor;\r\n                }\r\n            }\r\n\r\n            this._textWidth = context.measureText(text).width;\r\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n            if (this._autoStretchWidth) {\r\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            }\r\n\r\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n            context.clip();\r\n\r\n            if (this._isFocused && this._textWidth > availableWidth) {\r\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n                if (!this._scrollLeft) {\r\n                    this._scrollLeft = textLeft;\r\n                }\r\n            } else {\r\n                this._scrollLeft = clipTextLeft;\r\n            }\r\n\r\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n            // Cursor\r\n            if (this._isFocused) {\r\n\r\n                // Need to move cursor\r\n                if (this._clickedCoordinate) {\r\n                    var rightPosition = this._scrollLeft + this._textWidth;\r\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                    var currentSize = 0;\r\n                    this._cursorOffset = 0;\r\n                    var previousDist = 0;\r\n                    do {\r\n                        if (this._cursorOffset) {\r\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                        }\r\n                        this._cursorOffset++;\r\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n\r\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                        this._cursorOffset--;\r\n                    }\r\n\r\n                    this._blinkIsEven = false;\r\n                    this._clickedCoordinate = null;\r\n                }\r\n\r\n                // Render cursor\r\n                if (!this._blinkIsEven) {\r\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\r\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                    if (cursorLeft < clipTextLeft) {\r\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\r\n                        cursorLeft = clipTextLeft;\r\n                        this._markAsDirty();\r\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\r\n                        cursorLeft = clipTextLeft + availableWidth;\r\n                        this._markAsDirty();\r\n                    }\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n\r\n                clearTimeout(this._blinkTimeout);\r\n                this._blinkTimeout = <any>setTimeout(() => {\r\n                    this._blinkIsEven = !this._blinkIsEven;\r\n                    this._markAsDirty();\r\n                }, 500);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            // Border\r\n            if (this._thickness) {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n                context.lineWidth = this._thickness;\r\n\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(text: string): string {\r\n        return text;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n}\r\n","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add(info => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n\r\n        this.executeOnAllControls((control) => {\r\n            if (control._isFontSizeInPercentage) {\r\n                control._resetFontCache();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n\r\n            pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                this.focusedControl = null;\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n        material.emissiveTexture = result;\r\n        material.opacityTexture = result;\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style \r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}    ","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 0.15)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect      \r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = new Array<String>();\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices        \r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./slider\";\r\nexport * from \"./rectangle\";\r\n\r\nexport * from \"./statics\";","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this.color;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}  ","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}   ","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end)\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add \r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map(item => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add \r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) return point;\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach(point => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) this._minX = point._point.x;\r\n            if (this._minY == null || point._point.y < this._minY) this._minY = point._point.y;\r\n            if (this._maxX == null || point._point.x > this._maxX) this._maxX = point._point.x;\r\n            if (this._maxY == null || point._point.y > this._maxY) this._maxY = point._point.y;\r\n        });\r\n\r\n        if (this._minX == null) this._minX = 0;\r\n        if (this._minY == null) this._minY = 0;\r\n        if (this._maxX == null) this._maxX = 0;\r\n        if (this._maxY == null) this._maxY = 0;\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}    \r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._background;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this.color;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}   \r\n","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _connectedInputText: Nullable<InputText>;\r\n    private _onFocusObserver: Nullable<Observer<InputText>>;\r\n    private _onBlurObserver: Nullable<Observer<InputText>>;\r\n    private _onKeyPressObserver: Nullable<Observer<string>>;\r\n\r\n    /** Gets the input text control attached with the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._connectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        this.isVisible = false;\r\n        this._connectedInputText = input;\r\n\r\n        // Events hooking\r\n        this._onFocusObserver = input.onFocusObservable.add(() => {\r\n            this.isVisible = true;\r\n        });\r\n\r\n        this._onBlurObserver = input.onBlurObservable.add(() => {\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n            if (!this._connectedInputText) {\r\n                return;\r\n            }\r\n            switch (key) {\r\n                case \"\\u21E7\":\r\n                    this.shiftState++;\r\n                    if (this.shiftState > 2) {\r\n                        this.shiftState = 0;\r\n                    }\r\n                    this.applyShiftState(this.shiftState);\r\n                    return;\r\n                case \"\\u2190\":\r\n                    this._connectedInputText.processKey(8);\r\n                    return;\r\n                case \"\\u21B5\":\r\n                    this._connectedInputText.processKey(13);\r\n                    return;\r\n            }\r\n            this._connectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n\r\n            if (this.shiftState === 1) {\r\n                this.shiftState = 0;\r\n                this.applyShiftState(this.shiftState);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from an input text control\r\n     */\r\n    public disconnect(): void {\r\n        if (!this._connectedInputText) {\r\n            return;\r\n        }\r\n\r\n        this._connectedInputText.onFocusObservable.remove(this._onFocusObserver);\r\n        this._connectedInputText.onBlurObservable.remove(this._onBlurObserver);\r\n        this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n\r\n        this._connectedInputText = null;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard();\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends Control {\r\n    private _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbCircle = false;\r\n    private _isThumbClamped = false;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getThumbThickness(type: string, backgroundLength: number): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Main bar\r\n            var effectiveBarOffset = 0;\r\n            var type = this.isThumbCircle ? \"circle\" : \"rectangle\";\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n            var width = this._currentMeasure.width;\r\n            var height = this._currentMeasure.height;\r\n\r\n            var backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n            var backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            var effectiveThumbThickness = this._getThumbThickness(type, backgroundBoxThickness);\r\n            backgroundBoxLength -= effectiveThumbThickness;\r\n\r\n            var radius = 0;\r\n\r\n\r\n            //throw error when height is less than width for vertical slider\r\n            if ((this._isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n                console.error(\"Height should be greater than width\");\r\n                return;\r\n            }\r\n            if (this._barOffset.isPixel) {\r\n                effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), backgroundBoxThickness);\r\n            }\r\n            else {\r\n                effectiveBarOffset = backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n            }\r\n\r\n            backgroundBoxThickness -= (effectiveBarOffset * 2);\r\n\r\n            if (this._isVertical) {\r\n                left += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    top += (effectiveThumbThickness / 2);\r\n                }\r\n\r\n                height = backgroundBoxLength;\r\n                width = backgroundBoxThickness;\r\n\r\n            }\r\n            else {\r\n                top += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    left += (effectiveThumbThickness / 2);\r\n                }\r\n                height = backgroundBoxThickness;\r\n                width = backgroundBoxLength;\r\n            }\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this._isVertical)\r\n                    top += (effectiveThumbThickness / 2);\r\n                else\r\n                    left += (effectiveThumbThickness / 2);\r\n\r\n                radius = backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (effectiveThumbThickness - effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            var thumbPosition = (this._isVertical) ? ((this._maximum - this._value) / (this._maximum - this._minimum)) * backgroundBoxLength : ((this._value - this._minimum) / (this._maximum - this._minimum)) * backgroundBoxLength;\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxLength, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top + backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, this._currentMeasure.height - thumbPosition);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this._isVertical) {\r\n                    context.arc(left + backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this._isVertical) {\r\n                    context.fillRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this._isVertical) {\r\n                    context.strokeRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n}","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(pickedPoint => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical \r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0)\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene \r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        })\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        }\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}