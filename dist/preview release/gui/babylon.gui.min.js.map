{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../tools/Gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","isHitTestVisible","isPointerBlocker","isFocusInvisible","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","left","top","IsAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","_linkedMesh","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","font","fillStyle","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","getChildByName","children","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","_changeCursor","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","other","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_capturingControl","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","premulAlpha","getScene","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","_isFontSizeInPercentage","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","keepFocus","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","isVertical","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","navigator","userAgent","prompt","_connectedVirtualKeyboard","otherHost","processKey","keyCode","substr","deletePosition","deadKey","insertPosition","evt","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_thumbWidth","_minimum","_maximum","_borderColor","_barOffset","_isThumbCircle","_isThumbClamped","onValueChangedObservable","_pointerIsDown","_getThumbThickness","backgroundLength","thumbThickness","effectiveBarOffset","isThumbCircle","backgroundBoxLength","backgroundBoxThickness","effectiveThumbThickness","console","error","isThumbClamped","thumbPosition","_updateValueFromPointer","rotation","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","BABYLON","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","_removeCell","cell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","first","forEach","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","minimum","maximum","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","separator","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,cACA,mBAAAC,eAAAC,IACAD,OAAA,8BAAAJ,GACA,iBAAAC,QACAA,QAAA,iBAAAD,EAAAG,QAAA,eAEAJ,EAAA,QAAAA,EAAA,YAAyCA,EAAA,YAAAC,EAAAD,EAAA,UARzC,CASCO,OAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAT,QAGA,IAAAC,EAAAM,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAX,YAUA,OANAY,EAAAH,GAAAI,KAAAZ,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAU,GAAA,EAGAV,EAAAD,QA0DA,OArDAQ,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAhB,EAAAiB,EAAAC,GACAV,EAAAW,EAAAnB,EAAAiB,IACAG,OAAAC,eAAArB,EAAAiB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAxB,GACA,oBAAAyB,eAAAC,aACAN,OAAAC,eAAArB,EAAAyB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAArB,EAAA,cAAiD2B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAlC,GACA,IAAAiB,EAAAjB,KAAA6B,WACA,WAA2B,OAAA7B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAO,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oBClFAxC,EAAAD,QAAAM,iFCEA,IAAAoC,EAAAlC,EAAA,GACAmC,EAAAnC,EAAA,GACAoC,EAAApC,EAAA,GAEAqC,EAAArC,EAAA,IAMAsC,EAAA,WA+sBI,SAAAA,EAEW7B,GAAA8B,KAAA9B,OAhtBH8B,KAAAC,OAAS,EACTD,KAAAE,WAAY,EACZF,KAAAG,QAAU,EAQXH,KAAAI,gBAAkBP,EAAAQ,QAAQC,QACzBN,KAAAO,YAAc,QACdP,KAAAQ,WAAa,GACbR,KAAAS,YAAc,GACdT,KAAAU,UAAY,IAAIf,EAAAgB,aAAa,GAAIhB,EAAAgB,aAAaC,gBAAgB,GAG/DZ,KAAAa,OAAS,IAAIlB,EAAAgB,aAAa,EAAGhB,EAAAgB,aAAaG,qBAAqB,GAE/Dd,KAAAe,QAAU,IAAIpB,EAAAgB,aAAa,EAAGhB,EAAAgB,aAAaG,qBAAqB,GAG/Dd,KAAAgB,OAAS,GACThB,KAAAiB,OAA0B,KAGxBjB,KAAAkB,qBAAuBnB,EAAQoB,4BAE/BnB,KAAAoB,mBAAqBrB,EAAQsB,0BAC/BrB,KAAAsB,UAAW,EAEZtB,KAAAuB,mBAAqB1B,EAAAQ,QAAQC,QAE1BN,KAAAwB,qBAAuB3B,EAAAQ,QAAQC,QACjCN,KAAAyB,aAAe,IAAI9B,EAAAgB,aAAa,GAChCX,KAAA0B,cAAgB,IAAI/B,EAAAgB,aAAa,GACjCX,KAAA2B,YAAc,IAAIhC,EAAAgB,aAAa,GAC/BX,KAAA4B,eAAiB,IAAIjC,EAAAgB,aAAa,GAEnCX,KAAA6B,MAAQ,IAAIlC,EAAAgB,aAAa,GAEzBX,KAAA8B,KAAO,IAAInC,EAAAgB,aAAa,GACvBX,KAAA+B,QAAU,EACV/B,KAAAgC,QAAU,EACVhC,KAAAiC,UAAY,EACZjC,KAAAkC,kBAAoB,GACpBlC,KAAAmC,kBAAoB,GACpBnC,KAAAoC,iBAAmBtC,EAAAuC,SAASC,WAE1BtC,KAAAuC,uBAAyBzC,EAAAuC,SAASC,WAElCtC,KAAAwC,qBAAuB5C,EAAA6C,QAAQC,OACjC1C,KAAA2C,kBAAmB,EACnB3C,KAAA4C,gBAAiB,EAGjB5C,KAAA6C,YAAa,EAGb7C,KAAA8C,UAAW,EACX9C,KAAA+C,cAAgBnD,EAAA6C,QAAQC,OACxB1C,KAAAgD,WAAa,EACbhD,KAAAiD,aAAe,EACfjD,KAAAkD,cAAe,EACflD,KAAAmD,mBACEnD,KAAAoD,YAAa,EACbpD,KAAAqD,eAAiB,UAKpBrD,KAAAsD,kBAAmB,EAEnBtD,KAAAuD,kBAAmB,EAEnBvD,KAAAwD,kBAAmB,EAGnBxD,KAAAyD,cAAgB,EAEhBzD,KAAA0D,cAAgB,EAEhB1D,KAAA2D,WAAa,EAEb3D,KAAA4D,YAAc,OAGd5D,KAAA6D,YAAc,GAGX7D,KAAA8D,aAAe,IAAInE,EAAAgB,aAAa,GAEhCX,KAAA+D,aAAe,IAAIpE,EAAAgB,aAAa,GAYnCX,KAAAgE,wBAA0B,IAAIpE,EAAAqE,WAK9BjE,KAAAkE,uBAAyB,IAAItE,EAAAqE,WAK7BjE,KAAAmE,wBAA0B,IAAIvE,EAAAqE,WAK9BjE,KAAAoE,sBAAwB,IAAIxE,EAAAqE,WAK5BjE,KAAAqE,yBAA2B,IAAIzE,EAAAqE,WAK/BjE,KAAAsE,yBAA2B,IAAI1E,EAAAqE,WAK/BjE,KAAAuE,kBAAoB,IAAI3E,EAAAqE,WAKxBjE,KAAAwE,sBAAwB,IAAI5E,EAAAqE,WA2zCvC,OAr2CI5F,OAAAC,eAAWyB,EAAAR,UAAA,gBAAX,WACI,OAAOS,KAAKyE,gDA4ChBpG,OAAAC,eAAWyB,EAAAR,UAAA,kBAAX,WACI,OAAOS,KAAK0E,iBAGhB,SAAsBC,GAClB3E,KAAK0E,YAAcC,mCAIvBtG,OAAAC,eAAWyB,EAAAR,UAAA,aAAX,WACI,OAAOS,KAAKC,YAGhB,SAAiBrB,GACToB,KAAKC,SAAWrB,IAGpBoB,KAAKE,WAAY,EACjBF,KAAKC,OAASrB,EACdoB,KAAK4E,iDAMTvG,OAAAC,eAAWyB,EAAAR,UAAA,cAAX,WACI,OAAOS,KAAK+B,aAGhB,SAAkBnD,GACVoB,KAAK+B,UAAYnD,IAIrBoB,KAAK+B,QAAUnD,EACfoB,KAAK4E,eACL5E,KAAK6E,uDAMTxG,OAAAC,eAAWyB,EAAAR,UAAA,cAAX,WACI,OAAOS,KAAKgC,aAGhB,SAAkBpD,GACVoB,KAAKgC,UAAYpD,IAIrBoB,KAAKgC,QAAUpD,EACfoB,KAAK4E,eACL5E,KAAK6E,uDAMTxG,OAAAC,eAAWyB,EAAAR,UAAA,gBAAX,WACI,OAAOS,KAAKiC,eAGhB,SAAoBrD,GACZoB,KAAKiC,YAAcrD,IAIvBoB,KAAKiC,UAAYrD,EACjBoB,KAAK4E,eACL5E,KAAK6E,uDAMTxG,OAAAC,eAAWyB,EAAAR,UAAA,wBAAX,WACI,OAAOS,KAAKmC,uBAGhB,SAA4BvD,GACpBoB,KAAKmC,oBAAsBvD,IAI/BoB,KAAKmC,kBAAoBvD,EACzBoB,KAAK4E,eACL5E,KAAK6E,uDAMTxG,OAAAC,eAAWyB,EAAAR,UAAA,wBAAX,WACI,OAAOS,KAAKkC,uBAGhB,SAA4BtD,GACpBoB,KAAKkC,oBAAsBtD,IAI/BoB,KAAKkC,kBAAoBtD,EACzBoB,KAAK4E,eACL5E,KAAK6E,uDAOTxG,OAAAC,eAAWyB,EAAAR,UAAA,2BAAX,WACI,OAAOS,KAAKkB,0BAGhB,SAA+BtC,GACvBoB,KAAKkB,uBAAyBtC,IAIlCoB,KAAKkB,qBAAuBtC,EAC5BoB,KAAK4E,iDAOTvG,OAAAC,eAAWyB,EAAAR,UAAA,yBAAX,WACI,OAAOS,KAAKoB,wBAGhB,SAA6BxC,GACrBoB,KAAKoB,qBAAuBxC,IAIhCoB,KAAKoB,mBAAqBxC,EAC1BoB,KAAK4E,iDAOTvG,OAAAC,eAAWyB,EAAAR,UAAA,aAAX,WACI,OAAOS,KAAKa,OAAOiE,SAAS9E,KAAK+E,YAWrC,SAAiBnG,GACToB,KAAKa,OAAOiE,SAAS9E,KAAK+E,SAAWnG,GAIrCoB,KAAKa,OAAOmE,WAAWpG,IACvBoB,KAAK4E,gDAVbvG,OAAAC,eAAWyB,EAAAR,UAAA,qBAAX,WACI,OAAOS,KAAKa,OAAOoE,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB0D,wCAiB7E7G,OAAAC,eAAWyB,EAAAR,UAAA,cAAX,WACI,OAAOS,KAAKe,QAAQ+D,SAAS9E,KAAK+E,YAWtC,SAAkBnG,GACVoB,KAAKe,QAAQ+D,SAAS9E,KAAK+E,SAAWnG,GAItCoB,KAAKe,QAAQiE,WAAWpG,IACxBoB,KAAK4E,gDAVbvG,OAAAC,eAAWyB,EAAAR,UAAA,sBAAX,WACI,OAAOS,KAAKe,QAAQkE,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB2D,yCAc9E9G,OAAAC,eAAWyB,EAAAR,UAAA,kBAAX,WACI,OAAOS,KAAKO,iBAGhB,SAAsB3B,GACdoB,KAAKO,cAAgB3B,IAIzBoB,KAAKO,YAAc3B,EACnBoB,KAAKoF,oDAIT/G,OAAAC,eAAWyB,EAAAR,UAAA,iBAAX,WACI,OAAOS,KAAKQ,gBAGhB,SAAqB5B,GACboB,KAAKQ,aAAe5B,IAIxBoB,KAAKQ,WAAa5B,EAClBoB,KAAKoF,oDAIT/G,OAAAC,eAAWyB,EAAAR,UAAA,kBAAX,WACI,OAAOS,KAAKS,iBAGhB,SAAsB7B,GACdoB,KAAKS,cAAgB7B,IAIzBoB,KAAKS,YAAc7B,EACnBoB,KAAKoF,oDAOT/G,OAAAC,eAAWyB,EAAAR,UAAA,aAAX,WACI,OAAOS,KAAKiB,YAGhB,SAAiBrC,GAAjB,IAAAyG,EAAArF,KACQA,KAAKiB,SACLjB,KAAKiB,OAAOqE,oBAAoBC,OAAOvF,KAAKwF,gBAC5CxF,KAAKwF,eAAiB,MAG1BxF,KAAKiB,OAASrC,EAEVoB,KAAKiB,SACLjB,KAAKwF,eAAiBxF,KAAKiB,OAAOqE,oBAAoBG,IAAI,WACtDJ,EAAKT,eACLS,EAAKD,qBAIbpF,KAAK4E,eACL5E,KAAKoF,mDAIT/G,OAAAC,eAAWyB,EAAAR,UAAA,+BAAX,WACI,OAAOS,KAAKU,UAAUgF,8CAI1BrH,OAAAC,eAAWyB,EAAAR,UAAA,wBAAX,WACI,IAAIoG,EAAgB3F,KAAKiB,OAASjB,KAAKiB,OAAOP,UAAYV,KAAKU,UAE/D,OAAIiF,EAAcC,QACPD,EAAcE,SAAS7F,KAAK+E,OAGhCY,EAAcV,gBAAgBjF,KAAK+E,MAAO/E,KAAKuB,mBAAmB4D,QAAUnF,KAAKwB,qBAAqB2D,yCAIjH9G,OAAAC,eAAWyB,EAAAR,UAAA,gBAAX,WACI,OAAOS,KAAKU,UAAUoE,SAAS9E,KAAK+E,YAGxC,SAAoBnG,GACZoB,KAAKU,UAAUoE,SAAS9E,KAAK+E,SAAWnG,GAIxCoB,KAAKU,UAAUsE,WAAWpG,KAC1BoB,KAAK4E,eACL5E,KAAKoF,oDAKb/G,OAAAC,eAAWyB,EAAAR,UAAA,aAAX,WACI,OAAOS,KAAKgB,YAGhB,SAAiBpC,GACToB,KAAKgB,SAAWpC,IAIpBoB,KAAKgB,OAASpC,EACdoB,KAAK4E,iDAITvG,OAAAC,eAAWyB,EAAAR,UAAA,cAAX,WACI,OAAOS,KAAKG,aAGhB,SAAkBvB,GACVoB,KAAK8F,SAAWlH,IAIpBoB,KAAKG,QAAUvB,EAEXoB,KAAK+F,OACL/F,KAAK+F,MAAMC,gBAAgBhG,wCAKnC3B,OAAAC,eAAWyB,EAAAR,UAAA,qBAAX,WACI,OAAOS,KAAKkD,kBAGhB,SAAyBtE,GACjBoB,KAAKkD,eAAiBtE,IAI1BoB,KAAKkD,aAAetE,EACpBoB,KAAK4E,iDAITvG,OAAAC,eAAWyB,EAAAR,UAAA,iBAAX,WACI,OAAOS,KAAK6C,gBAGhB,SAAqBjE,GACboB,KAAK6C,aAAejE,IAIxBoB,KAAK6C,WAAajE,EAClBoB,KAAK4E,iDAITvG,OAAAC,eAAWyB,EAAAR,UAAA,eAAX,WACI,OAAOS,KAAKsB,0CAOhBjD,OAAAC,eAAWyB,EAAAR,UAAA,mBAAX,WACI,OAAOS,KAAKyB,aAAaqD,SAAS9E,KAAK+E,YAW3C,SAAuBnG,GACfoB,KAAKyB,aAAauD,WAAWpG,IAC7BoB,KAAK4E,gDANbvG,OAAAC,eAAWyB,EAAAR,UAAA,2BAAX,WACI,OAAOS,KAAKyB,aAAawD,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB0D,wCAanF7G,OAAAC,eAAWyB,EAAAR,UAAA,oBAAX,WACI,OAAOS,KAAK0B,cAAcoD,SAAS9E,KAAK+E,YAW5C,SAAwBnG,GAChBoB,KAAK0B,cAAcsD,WAAWpG,IAC9BoB,KAAK4E,gDANbvG,OAAAC,eAAWyB,EAAAR,UAAA,4BAAX,WACI,OAAOS,KAAK0B,cAAcuD,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB0D,wCAapF7G,OAAAC,eAAWyB,EAAAR,UAAA,kBAAX,WACI,OAAOS,KAAK2B,YAAYmD,SAAS9E,KAAK+E,YAW1C,SAAsBnG,GACdoB,KAAK2B,YAAYqD,WAAWpG,IAC5BoB,KAAK4E,gDANbvG,OAAAC,eAAWyB,EAAAR,UAAA,0BAAX,WACI,OAAOS,KAAK2B,YAAYsD,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB2D,yCAalF9G,OAAAC,eAAWyB,EAAAR,UAAA,qBAAX,WACI,OAAOS,KAAK4B,eAAekD,SAAS9E,KAAK+E,YAW7C,SAAyBnG,GACjBoB,KAAK4B,eAAeoD,WAAWpG,IAC/BoB,KAAK4E,gDANbvG,OAAAC,eAAWyB,EAAAR,UAAA,6BAAX,WACI,OAAOS,KAAK4B,eAAeqD,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB2D,yCAarF9G,OAAAC,eAAWyB,EAAAR,UAAA,YAAX,WACI,OAAOS,KAAK6B,MAAMiD,SAAS9E,KAAK+E,YAWpC,SAAgBnG,GACRoB,KAAK6B,MAAMmD,WAAWpG,IACtBoB,KAAK4E,gDANbvG,OAAAC,eAAWyB,EAAAR,UAAA,oBAAX,WACI,OAAOS,KAAK6B,MAAMoD,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB0D,wCAa5E7G,OAAAC,eAAWyB,EAAAR,UAAA,WAAX,WACI,OAAOS,KAAK8B,KAAKgD,SAAS9E,KAAK+E,YAWnC,SAAenG,GACPoB,KAAK8B,KAAKkD,WAAWpG,IACrBoB,KAAK4E,gDANbvG,OAAAC,eAAWyB,EAAAR,UAAA,mBAAX,WACI,OAAOS,KAAK8B,KAAKmD,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB2D,yCAa3E9G,OAAAC,eAAWyB,EAAAR,UAAA,mBAAX,WACI,OAAOS,KAAK8D,aAAagB,SAAS9E,KAAK+E,YAW3C,SAAuBnG,GACfoB,KAAK8D,aAAakB,WAAWpG,IAC7BoB,KAAK4E,gDANbvG,OAAAC,eAAWyB,EAAAR,UAAA,2BAAX,WACI,OAAOS,KAAK8D,aAAamB,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB0D,wCAanF7G,OAAAC,eAAWyB,EAAAR,UAAA,mBAAX,WACI,OAAOS,KAAK+D,aAAae,SAAS9E,KAAK+E,YAW3C,SAAuBnG,GACfoB,KAAK+D,aAAaiB,WAAWpG,IAC7BoB,KAAK4E,gDANbvG,OAAAC,eAAWyB,EAAAR,UAAA,2BAAX,WACI,OAAOS,KAAK+D,aAAakB,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB2D,yCAUnF9G,OAAAC,eAAWyB,EAAAR,UAAA,eAAX,WACI,OAAOS,KAAKI,gBAAgB6F,KAAOjG,KAAKI,gBAAgB8E,MAAQ,mCAIpE7G,OAAAC,eAAWyB,EAAAR,UAAA,eAAX,WACI,OAAOS,KAAKI,gBAAgB8F,IAAMlG,KAAKI,gBAAgB+E,OAAS,mCAIpE9G,OAAAC,eAAWyB,EAAAR,UAAA,iBAAX,WACI,OAAOS,KAAKoD,gBAGhB,SAAqBxE,GACdoB,KAAKoD,aAAexE,IAIvBoB,KAAKoD,WAAaxE,EAClBoB,KAAK4E,iDAGTvG,OAAAC,eAAWyB,EAAAR,UAAA,qBAAX,WACI,OAAOS,KAAKqD,oBAGhB,SAAyBzE,GAClBoB,KAAKqD,iBAAmBzE,IAI3BoB,KAAKqD,eAAiBzE,EACtBoB,KAAK4E,iDAcC7E,EAAAR,UAAAkF,aAAV,WACI,MAAO,WAIJ1E,EAAAR,UAAA6F,gBAAP,WACIpF,KAAK8C,UAAW,EAChB9C,KAAK4E,gBAQF7E,EAAAR,UAAA4G,YAAP,SAAmBC,GACf,QAAKpG,KAAKqG,SAINrG,KAAKqG,SAAWD,GAIbpG,KAAKqG,OAAOF,YAAYC,KAQ5BrG,EAAAR,UAAA+G,oBAAP,SAA2BC,GACvB,IAAIC,EAAS5G,EAAA6C,QAAQC,OAIrB,OAFA1C,KAAKyG,yBAAyBF,EAAmBC,GAE1CA,GASJzG,EAAAR,UAAAkH,yBAAP,SAAgCF,EAA4BC,GAGxD,OAFAA,EAAOE,EAAIH,EAAkBG,EAAI1G,KAAKI,gBAAgB6F,KACtDO,EAAOG,EAAIJ,EAAkBI,EAAI3G,KAAKI,gBAAgB8F,IAC/ClG,MAQJD,EAAAR,UAAAqH,0BAAP,SAAiCL,GAC7B,IAAIC,EAAS5G,EAAA6C,QAAQC,OAKrB,OAHA8D,EAAOE,EAAIH,EAAkBG,EAAI1G,KAAKwB,qBAAqByE,KAC3DO,EAAOG,EAAIJ,EAAkBI,EAAI3G,KAAKwB,qBAAqB0E,IAEpDM,GAQJzG,EAAAR,UAAAsH,cAAP,SAAqBC,EAAmBC,GACpC,GAAK/G,KAAK+E,OAAS/E,KAAK+F,QAAU/F,KAAK+E,MAAMiC,eAA7C,CAKAhH,KAAKiH,oBAAsBlH,EAAQmH,0BACnClH,KAAKmH,kBAAoBpH,EAAQqH,uBAEjC,IAAIC,EAAiBrH,KAAK+E,MAAMuC,mBAAmBP,GAC/CQ,EAAoB3H,EAAA4H,QAAQC,QAAQX,EAAUlH,EAAA8H,OAAOpF,WAAYyE,EAAMY,qBAAsBN,GAEjGrH,KAAK4H,yBAAyBL,GAE1BA,EAAkBM,EAAI,GAAKN,EAAkBM,EAAI,EACjD7H,KAAK8H,eAAgB,EAGzB9H,KAAK8H,eAAgB,OAhBjBlI,EAAAmI,MAAMC,MAAM,2EAwBbjI,EAAAR,UAAA0I,aAAP,SAAoBC,GAChB,IAAKlI,KAAK+E,OAAS/E,KAAK+F,OAAS/F,KAAK+F,QAAU/F,KAAK+E,MAAMiC,eACnDkB,GACAtI,EAAAmI,MAAMC,MAAM,2EAFpB,CAOA,IAAIG,EAAQnI,KAAK+E,MAAMqD,gBAAgBC,QAAQrI,MAC/C,IAAe,IAAXmI,EAKA,OAJAnI,KAAKsI,YAAcJ,OACdA,GACDlI,KAAK+E,MAAMqD,gBAAgBG,OAAOJ,EAAO,IAGrCD,IAIZlI,KAAKiH,oBAAsBlH,EAAQmH,0BACnClH,KAAKmH,kBAAoBpH,EAAQqH,uBACjCpH,KAAKsI,YAAcJ,EACnBlI,KAAK2C,iBAAkD,IAA/B3C,KAAKI,gBAAgB8E,OAA+C,IAAhClF,KAAKI,gBAAgB+E,OACjFnF,KAAK+E,MAAMqD,gBAAgBI,KAAKxI,SAI7BD,EAAAR,UAAAqI,yBAAP,SAAgCL,GAC5B,IAAIkB,EAAUzI,KAAK6B,MAAMgE,SAAS7F,KAAK+E,OACnC2D,EAAS1I,KAAK8B,KAAK+D,SAAS7F,KAAK+E,OAEjC4D,EAAYpB,EAAkBb,EAAI1G,KAAK8D,aAAa+B,SAAS7F,KAAK+E,OAAU/E,KAAKI,gBAAgB8E,MAAQ,EACzG0D,EAAWrB,EAAkBZ,EAAI3G,KAAK+D,aAAa8B,SAAS7F,KAAK+E,OAAU/E,KAAKI,gBAAgB+E,OAAS,EAEzGnF,KAAK6B,MAAMgH,uBAAyB7I,KAAK8B,KAAK+G,wBAC1CC,KAAKC,IAAIJ,EAAUF,GAAW,KAC9BE,EAAUF,GAGVK,KAAKC,IAAIH,EAASF,GAAU,KAC5BE,EAASF,IAIjB1I,KAAKiG,KAAO0C,EAAU,KACtB3I,KAAKkG,IAAM0C,EAAS,KAEpB5I,KAAK6B,MAAMgH,uBAAwB,EACnC7I,KAAK8B,KAAK+G,uBAAwB,GAI/B9I,EAAAR,UAAAsF,mBAAP,WACI7E,KAAK4C,gBAAiB,EACtB5C,KAAK4E,gBAIF7E,EAAAR,UAAAqF,aAAP,WACI5E,KAAKsB,UAAW,EAEXtB,KAAK+E,OAGV/E,KAAK+E,MAAMiE,eAIRjJ,EAAAR,UAAA0J,gBAAP,WACIjJ,KAAK4E,eAED5E,KAAKkJ,OACLlJ,KAAKmJ,gBAKNpJ,EAAAR,UAAA6J,MAAP,SAAarM,EAA2BsM,GACpCrJ,KAAK+F,MAAQhJ,EACbiD,KAAK+E,MAAQsE,GAIPtJ,EAAAR,UAAA+J,WAAV,SAAqBC,GACjB,GAAKvJ,KAAK4C,gBAAmC,IAAjB5C,KAAK+B,SAAkC,IAAjB/B,KAAKgC,SAAoC,IAAnBhC,KAAKiC,UAA7E,CAKA,IAAIuH,EAAUxJ,KAAKI,gBAAgB8E,MAAQlF,KAAKkC,kBAAoBlC,KAAKI,gBAAgB6F,KACrFwD,EAAUzJ,KAAKI,gBAAgB+E,OAASnF,KAAKmC,kBAAoBnC,KAAKI,gBAAgB8F,IAC1FqD,EAAQG,UAAUF,EAASC,GAG3BF,EAAQI,OAAO3J,KAAKiC,WAGpBsH,EAAQK,MAAM5J,KAAK+B,QAAS/B,KAAKgC,SAGjCuH,EAAQG,WAAWF,GAAUC,IAGzBzJ,KAAK4C,gBAAkB5C,KAAK6J,iBAAmBL,GAAWxJ,KAAK8J,iBAAmBL,KAClFzJ,KAAK6J,eAAiBL,EACtBxJ,KAAK8J,eAAiBL,EACtBzJ,KAAK4C,gBAAiB,EAEtB9C,EAAAuC,SAAS0H,cAAcP,GAAUC,EAASzJ,KAAKiC,UAAWjC,KAAK+B,QAAS/B,KAAKgC,QAAShC,KAAK+F,MAAQ/F,KAAK+F,MAAM3D,iBAAmB,KAAMpC,KAAKoC,kBAE5IpC,KAAKoC,iBAAiB4H,YAAYhK,KAAKuC,2BAKrCxC,EAAAR,UAAA0K,aAAV,SAAuBV,GACfvJ,KAAK8C,WACL9C,KAAKmJ,eACLnJ,KAAK8C,UAAW,GAGhB9C,KAAKkJ,QACLK,EAAQW,KAAOlK,KAAKkJ,OAGpBlJ,KAAKgB,SACLuI,EAAQY,UAAYnK,KAAKgB,QAGzBhB,KAAKE,YACLqJ,EAAQa,YAAcpK,KAAKqG,OAASrG,KAAKqG,OAAOgE,MAAQrK,KAAKC,OAASD,KAAKC,SAKzEF,EAAAR,UAAA+K,iBAAV,SAA2BC,EAAwBhB,GA2B/C,OA1BIvJ,KAAKsB,UAAatB,KAAKwB,qBAAqBgJ,WAAWD,KACvDvK,KAAKsB,UAAW,EAChBtB,KAAKI,gBAAgBqK,SAASF,GAG9BvK,KAAK0K,YAAYH,EAAehB,GAEhCvJ,KAAK2K,WACL3K,KAAK4K,kBAAkBL,EAAehB,GAGtCvJ,KAAKI,gBAAgB6F,KAAmC,EAA5BjG,KAAKI,gBAAgB6F,KACjDjG,KAAKI,gBAAgB8F,IAAiC,EAA3BlG,KAAKI,gBAAgB8F,IAChDlG,KAAKI,gBAAgB8E,MAAqC,EAA7BlF,KAAKI,gBAAgB8E,MAClDlF,KAAKI,gBAAgB+E,OAAuC,EAA9BnF,KAAKI,gBAAgB+E,OAGnDnF,KAAK6K,sBAAsBN,EAAehB,GAE1CvJ,KAAKwB,qBAAqBiJ,SAASF,GAE/BvK,KAAKuE,kBAAkBuG,gBACvB9K,KAAKuE,kBAAkBwG,gBAAgB/K,SAI3CA,KAAKI,gBAAgB6F,KAAOsE,EAActE,KAAOsE,EAAcrF,WAI/DlF,KAAKI,gBAAgB6F,KAAOjG,KAAKI,gBAAgB8E,MAAQqF,EAActE,UAIvEjG,KAAKI,gBAAgB8F,IAAMqE,EAAcrE,IAAMqE,EAAcpF,YAI7DnF,KAAKI,gBAAgB8F,IAAMlG,KAAKI,gBAAgB+E,OAASoF,EAAcrE,OAK3ElG,KAAKsJ,WAAWC,GAEZvJ,KAAK2C,kBACL3C,KAAK2C,kBAAmB,GACjB,IAIX3C,KAAKgL,MAAMzB,GACXA,EAAQ0B,QAED,QAIDlL,EAAAR,UAAAyL,MAAV,SAAgBzB,GAGZ,GAFAA,EAAQ2B,YAEJlL,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,cAAe,CAC7D,IAAID,EAAgBzD,KAAKyD,cACrBC,EAAgB1D,KAAK0D,cACrBC,EAAa3D,KAAK2D,WAElBwH,EAAmBrC,KAAKsC,IAAItC,KAAKsC,IAAI3H,EAAe,GAAkB,EAAbE,EAAgB,GACzE0H,EAAoBvC,KAAKwC,IAAIxC,KAAKwC,IAAI7H,EAAe,GAAkB,EAAbE,EAAgB,GAC1E4H,EAAkBzC,KAAKsC,IAAItC,KAAKsC,IAAI1H,EAAe,GAAkB,EAAbC,EAAgB,GACxE6H,EAAqB1C,KAAKwC,IAAIxC,KAAKwC,IAAI5H,EAAe,GAAkB,EAAbC,EAAgB,GAE/E4F,EAAQkC,KAAKzL,KAAKI,gBAAgB6F,KAAOkF,EACrCnL,KAAKI,gBAAgB8F,IAAMqF,EAC3BvL,KAAKI,gBAAgB8E,MAAQmG,EAAoBF,EACjDnL,KAAKI,gBAAgB+E,OAASqG,EAAqBD,QAEvDhC,EAAQkC,KAAKzL,KAAKI,gBAAgB6F,KAAMjG,KAAKI,gBAAgB8F,IAAKlG,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,SAKpHpF,EAAAR,UAAAoL,SAAP,WAEQ3K,KAAKa,OAAO+E,QACZ5F,KAAKI,gBAAgB8E,MAAQlF,KAAKa,OAAOgF,SAAS7F,KAAK+E,OAEvD/E,KAAKI,gBAAgB8E,OAASlF,KAAKa,OAAOgF,SAAS7F,KAAK+E,OAGxD/E,KAAKe,QAAQ6E,QACb5F,KAAKI,gBAAgB+E,OAASnF,KAAKe,QAAQ8E,SAAS7F,KAAK+E,OAEzD/E,KAAKI,gBAAgB+E,QAAUnF,KAAKe,QAAQ8E,SAAS7F,KAAK+E,QAKxDhF,EAAAR,UAAAqL,kBAAV,SAA4BL,EAAwBhB,GAChD,IAAIrE,EAAQlF,KAAKI,gBAAgB8E,MAC7BC,EAASnF,KAAKI,gBAAgB+E,OAE9BuG,EAAcnB,EAAcrF,MAC5ByG,EAAepB,EAAcpF,OAG7BuB,EAAI,EACJC,EAAI,EAER,OAAQ3G,KAAKiH,qBACT,KAAKlH,EAAQmH,0BACTR,EAAI,EACJ,MACJ,KAAK3G,EAAQ6L,2BACTlF,EAAIgF,EAAcxG,EAClB,MACJ,KAAKnF,EAAQoB,4BACTuF,GAAKgF,EAAcxG,GAAS,EAIpC,OAAQlF,KAAKmH,mBACT,KAAKpH,EAAQqH,uBACTT,EAAI,EACJ,MACJ,KAAK5G,EAAQ8L,0BACTlF,EAAIgF,EAAexG,EACnB,MACJ,KAAKpF,EAAQsB,0BACTsF,GAAKgF,EAAexG,GAAU,EAIlCnF,KAAKyB,aAAamE,SAClB5F,KAAKI,gBAAgB6F,MAAQjG,KAAKyB,aAAaoE,SAAS7F,KAAK+E,OAC7D/E,KAAKI,gBAAgB8E,OAASlF,KAAKyB,aAAaoE,SAAS7F,KAAK+E,SAE9D/E,KAAKI,gBAAgB6F,MAAQyF,EAAc1L,KAAKyB,aAAaoE,SAAS7F,KAAK+E,OAC3E/E,KAAKI,gBAAgB8E,OAASwG,EAAc1L,KAAKyB,aAAaoE,SAAS7F,KAAK+E,QAG5E/E,KAAK0B,cAAckE,QACnB5F,KAAKI,gBAAgB8E,OAASlF,KAAK0B,cAAcmE,SAAS7F,KAAK+E,OAE/D/E,KAAKI,gBAAgB8E,OAASwG,EAAc1L,KAAK0B,cAAcmE,SAAS7F,KAAK+E,OAG7E/E,KAAK2B,YAAYiE,SACjB5F,KAAKI,gBAAgB8F,KAAOlG,KAAK2B,YAAYkE,SAAS7F,KAAK+E,OAC3D/E,KAAKI,gBAAgB+E,QAAUnF,KAAK2B,YAAYkE,SAAS7F,KAAK+E,SAE9D/E,KAAKI,gBAAgB8F,KAAOyF,EAAe3L,KAAK2B,YAAYkE,SAAS7F,KAAK+E,OAC1E/E,KAAKI,gBAAgB+E,QAAUwG,EAAe3L,KAAK2B,YAAYkE,SAAS7F,KAAK+E,QAG7E/E,KAAK4B,eAAegE,QACpB5F,KAAKI,gBAAgB+E,QAAUnF,KAAK4B,eAAeiE,SAAS7F,KAAK+E,OAEjE/E,KAAKI,gBAAgB+E,QAAUwG,EAAe3L,KAAK4B,eAAeiE,SAAS7F,KAAK+E,OAGhF/E,KAAK6B,MAAM+D,QACX5F,KAAKI,gBAAgB6F,MAAQjG,KAAK6B,MAAMgE,SAAS7F,KAAK+E,OAEtD/E,KAAKI,gBAAgB6F,MAAQyF,EAAc1L,KAAK6B,MAAMgE,SAAS7F,KAAK+E,OAGpE/E,KAAK8B,KAAK8D,QACV5F,KAAKI,gBAAgB8F,KAAOlG,KAAK8B,KAAK+D,SAAS7F,KAAK+E,OAEpD/E,KAAKI,gBAAgB8F,KAAOyF,EAAe3L,KAAK8B,KAAK+D,SAAS7F,KAAK+E,OAGvE/E,KAAKI,gBAAgB6F,MAAQS,EAC7B1G,KAAKI,gBAAgB8F,KAAOS,GAItB5G,EAAAR,UAAAmL,YAAV,SAAsBH,EAAwBhB,KAKpCxJ,EAAAR,UAAAsL,sBAAV,SAAgCN,EAAwBhB,KAKjDxJ,EAAAR,UAAAuM,MAAP,SAAavB,EAAwBhB,KAU9BxJ,EAAAR,UAAAwM,SAAP,SAAgBrF,EAAWC,GAQvB,OANA3G,KAAKuC,uBAAuByJ,qBAAqBtF,EAAGC,EAAG3G,KAAKwC,sBAE5DkE,EAAI1G,KAAKwC,qBAAqBkE,EAC9BC,EAAI3G,KAAKwC,qBAAqBmE,IAG1BD,EAAI1G,KAAKI,gBAAgB6F,UAIzBS,EAAI1G,KAAKI,gBAAgB6F,KAAOjG,KAAKI,gBAAgB8E,WAIrDyB,EAAI3G,KAAKI,gBAAgB8F,SAIzBS,EAAI3G,KAAKI,gBAAgB8F,IAAMlG,KAAKI,gBAAgB+E,UAIpDnF,KAAKuD,mBACLvD,KAAK+E,MAAMkH,qBAAsB,IAE9B,OAIJlM,EAAAR,UAAA2M,gBAAP,SAAuBxF,EAAWC,EAAWwF,EAAcC,EAAmBC,GAC1E,QAAIrM,KAAKoD,gBAGJpD,KAAKsD,mBAAqBtD,KAAKsM,WAAatM,KAAKkD,kBAIjDlD,KAAK+L,SAASrF,EAAGC,KAItB3G,KAAKuM,oBAAoBJ,EAAMzF,EAAGC,EAAGyF,EAAWC,IAEzC,MAIJtM,EAAAR,UAAAiN,eAAP,SAAsBC,EAAiBC,GACV1M,KAAKgE,wBAAwB+G,gBAAgB2B,GAAc,EAAGD,EAAQzM,OAE/D,MAAfA,KAAKqG,QAAgBrG,KAAKqG,OAAOmG,eAAeC,EAAQC,IAItE3M,EAAAR,UAAAoN,gBAAP,SAAuBF,GACnB,QAAIzM,KAAKoD,eAGLpD,KAAKiD,YAAc,MAIG,IAAtBjD,KAAKiD,cACLjD,KAAKiD,YAAc,GAEvBjD,KAAKiD,cAEoBjD,KAAKsE,yBAAyByG,gBAAgB/K,MAAO,EAAGyM,EAAQzM,OAEzD,MAAfA,KAAKqG,QAAgBrG,KAAKqG,OAAOsG,gBAAgBF,IAE3D,KAIJ1M,EAAAR,UAAAqN,cAAP,SAAqBH,GACbzM,KAAKoD,aAGTpD,KAAKiD,YAAc,EAEMjD,KAAKkE,uBAAuB6G,gBAAgB/K,MAAO,EAAGyM,EAAQzM,OAEvD,MAAfA,KAAKqG,QAAgBrG,KAAKqG,OAAOuG,cAAcH,KAI7D1M,EAAAR,UAAAsN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAK5E,OAFArM,KAAK2M,gBAAgB3M,MAEG,IAApBA,KAAKgD,aAIThD,KAAKgD,aAELhD,KAAKmD,gBAAgBiJ,IAAa,EAETpM,KAAKmE,wBAAwB4G,gBAAgB,IAAIjL,EAAAgN,gBAAgBJ,EAAaL,IAAe,EAAGI,EAAQzM,OAEjG,MAAfA,KAAKqG,QAAgBrG,KAAKqG,OAAOwG,eAAeJ,EAAQC,EAAaN,EAAWC,IAE1F,IAIJtM,EAAAR,UAAAwN,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmBC,EAAqBW,GAC/F,GAAIhN,KAAKoD,WAAT,CAGApD,KAAKgD,WAAa,SAEXhD,KAAKmD,gBAAgBiJ,GAE5B,IAAIa,EAA0BD,EAC1BA,IAAgBhN,KAAKiD,YAAc,IAA2B,IAAtBjD,KAAKiD,eAC7CgK,EAAiBjN,KAAKqE,yBAAyB0G,gBAAgB,IAAIjL,EAAAgN,gBAAgBJ,EAAaL,IAAe,EAAGI,EAAQzM,OAErGA,KAAKoE,sBAAsB2G,gBAAgB,IAAIjL,EAAAgN,gBAAgBJ,EAAaL,IAAe,EAAGI,EAAQzM,OAE/F,MAAfA,KAAKqG,QAAgBrG,KAAKqG,OAAO0G,aAAaN,EAAQC,EAAaN,EAAWC,EAAaY,KAIzGlN,EAAAR,UAAA2N,gBAAP,SAAuBd,GACnB,QADmB,IAAAA,MAAA,MACD,OAAdA,EACApM,KAAK+M,aAAa/M,KAAMJ,EAAA6C,QAAQC,OAAQ0J,EAAW,GAAG,QAEtD,IAAK,IAAIlN,KAAOc,KAAKmD,gBACjBnD,KAAK+M,aAAa/M,KAAMJ,EAAA6C,QAAQC,QAASxD,EAAe,GAAG,IAMhEa,EAAAR,UAAAgN,oBAAP,SAA2BJ,EAAczF,EAAWC,EAAWyF,EAAmBC,GAC9E,IAAIrM,KAAKoD,WACL,OAAO,EAGX,GADApD,KAAK+C,cAAcoK,eAAezG,EAAGC,GACjCwF,IAASvM,EAAAwN,kBAAkBC,YAAa,CACxCrN,KAAKwM,eAAexM,KAAMA,KAAK+C,eAE/B,IAAIuK,EAAsBtN,KAAK+E,MAAMwI,iBAAiBnB,GAUtD,OATIkB,GAAuBA,IAAwBtN,MAC/CsN,EAAoBV,cAAc5M,MAGlCsN,IAAwBtN,MACxBA,KAAK2M,gBAAgB3M,MAGzBA,KAAK+E,MAAMwI,iBAAiBnB,GAAapM,MAClC,EAGX,OAAImM,IAASvM,EAAAwN,kBAAkBI,aAC3BxN,KAAK6M,eAAe7M,KAAMA,KAAK+C,cAAeqJ,EAAWC,GACzDrM,KAAK+E,MAAM0I,iBAAiBrB,GAAapM,KACzCA,KAAK+E,MAAM2I,mBAAqB1N,MACzB,GAGPmM,IAASvM,EAAAwN,kBAAkBO,YACvB3N,KAAK+E,MAAM0I,iBAAiBrB,IAC5BpM,KAAK+E,MAAM0I,iBAAiBrB,GAAWW,aAAa/M,KAAMA,KAAK+C,cAAeqJ,EAAWC,GAAa,UAEnGrM,KAAK+E,MAAM0I,iBAAiBrB,IAC5B,IAMPrM,EAAAR,UAAA4J,aAAR,YACSnJ,KAAKkJ,OAAUlJ,KAAK8C,YAIrB9C,KAAKiB,OACLjB,KAAKkJ,MAAQlJ,KAAKiB,OAAO2M,UAAY,IAAM5N,KAAKiB,OAAO4M,WAAa,IAAM7N,KAAK8N,iBAAmB,MAAQ9N,KAAKiB,OAAO8M,WAEtH/N,KAAKkJ,MAAQlJ,KAAKQ,WAAa,IAAMR,KAAKS,YAAc,IAAMT,KAAK8N,iBAAmB,MAAQ9N,KAAKO,YAGvGP,KAAK0E,YAAc3E,EAAQiO,eAAehO,KAAKkJ,SAI5CnJ,EAAAR,UAAA0O,QAAP,WACIjO,KAAKuE,kBAAkB2J,QACvBlO,KAAKwE,sBAAsB0J,QAC3BlO,KAAKmE,wBAAwB+J,QAC7BlO,KAAKsE,yBAAyB4J,QAC9BlO,KAAKgE,wBAAwBkK,QAC7BlO,KAAKkE,uBAAuBgK,QAC5BlO,KAAKoE,sBAAsB8J,QAC3BlO,KAAKqE,yBAAyB6J,QAE1BlO,KAAKwF,gBAAkBxF,KAAKiB,SAC5BjB,KAAKiB,OAAOqE,oBAAoBC,OAAOvF,KAAKwF,gBAC5CxF,KAAKwF,eAAiB,MAGtBxF,KAAK+F,QACL/F,KAAK+F,MAAMoI,cAAcnO,MACzBA,KAAK+F,MAAQ,MAGL/F,KAAK+E,MAAMqD,gBAAgBC,QAAQrI,OAClC,GACTA,KAAKiI,aAAa,OAc1B5J,OAAAC,eAAkByB,EAAA,iCAAlB,WACI,OAAOA,EAAQqO,4DAInB/P,OAAAC,eAAkByB,EAAA,kCAAlB,WACI,OAAOA,EAAQsO,6DAInBhQ,OAAAC,eAAkByB,EAAA,mCAAlB,WACI,OAAOA,EAAQuO,8DAInBjQ,OAAAC,eAAkByB,EAAA,8BAAlB,WACI,OAAOA,EAAQwO,yDAInBlQ,OAAAC,eAAkByB,EAAA,iCAAlB,WACI,OAAOA,EAAQyO,4DAInBnQ,OAAAC,eAAkByB,EAAA,iCAAlB,WACI,OAAOA,EAAQ0O,4DAML1O,EAAAiO,eAAd,SAA6B9D,GAEzB,GAAInK,EAAQ2O,iBAAiBxE,GACzB,OAAOnK,EAAQ2O,iBAAiBxE,GAGpC,IAAIyE,EAAOC,SAASC,cAAc,QAClCF,EAAKG,UAAY,KACjBH,EAAKI,MAAM7E,KAAOA,EAElB,IAAI8E,EAAQJ,SAASC,cAAc,OACnCG,EAAMD,MAAME,QAAU,eACtBD,EAAMD,MAAM7J,MAAQ,MACpB8J,EAAMD,MAAM5J,OAAS,MACrB6J,EAAMD,MAAMG,cAAgB,SAE5B,IAAIC,EAAMP,SAASC,cAAc,OACjCM,EAAIC,YAAYT,GAChBQ,EAAIC,YAAYJ,GAEhBJ,SAASS,KAAKD,YAAYD,GAE1B,IAAIG,EAAa,EACbC,EAAa,EACjB,IACIA,EAAaP,EAAMQ,wBAAwBtJ,IAAMyI,EAAKa,wBAAwBtJ,IAC9E8I,EAAMD,MAAMG,cAAgB,WAC5BI,EAAaN,EAAMQ,wBAAwBtJ,IAAMyI,EAAKa,wBAAwBtJ,YAE9E0I,SAASS,KAAKI,YAAYN,GAE9B,IAAI3I,GAAWkJ,OAAQJ,EAAYnK,OAAQoK,EAAYI,QAASJ,EAAaD,GAG7E,OAFAvP,EAAQ2O,iBAAiBxE,GAAQ1D,EAE1BA,GAkBMzG,EAAA6P,YAAjB,SAA6BlJ,EAAWC,EAAWzB,EAAeC,EAAgBoE,GAC9EA,EAAQG,UAAUhD,EAAGC,GACrB4C,EAAQK,MAAM1E,EAAOC,GAErBoE,EAAQ2B,YACR3B,EAAQsG,IAAI,EAAG,EAAG,EAAG,EAAG,EAAI/G,KAAKgH,IACjCvG,EAAQwG,YAERxG,EAAQK,MAAM,EAAI1E,EAAO,EAAIC,GAC7BoE,EAAQG,WAAWhD,GAAIC,IAtGZ5G,EAAAqO,2BAA6B,EAC7BrO,EAAAsO,4BAA8B,EAC9BtO,EAAAuO,6BAA+B,EAE/BvO,EAAAwO,wBAA0B,EAC1BxO,EAAAyO,2BAA6B,EAC7BzO,EAAA0O,2BAA6B,EAgC7B1O,EAAA2O,oBAoDD3O,EAAAiQ,UAAuI,aAczJjQ,EAv8CA,GAAa9C,EAAA8C,yFCPb,IAAAY,EAAA,WAcI,SAAAA,EAAmB/B,EAERqR,EAEAC,QAFA,IAAAD,MAAOtP,EAAaC,qBAEpB,IAAAsP,OAAA,GAFAlQ,KAAAiQ,OAEAjQ,KAAAkQ,uBAjBHlQ,KAAAmQ,OAAS,EAKVnQ,KAAA6I,uBAAwB,EAa3B7I,KAAKmQ,OAASvR,EA0ItB,OAtIIP,OAAAC,eAAWqC,EAAApB,UAAA,oBAAX,WACI,OAAOS,KAAKiQ,OAAStP,EAAaG,qDAItCzC,OAAAC,eAAWqC,EAAApB,UAAA,eAAX,WACI,OAAOS,KAAKiQ,OAAStP,EAAaC,gDAItCvC,OAAAC,eAAWqC,EAAApB,UAAA,qBAAX,WACI,OAAOS,KAAKmQ,wCASTxP,EAAApB,UAAA0F,gBAAP,SAAuBoE,EAA8B+G,GACjD,OAAIpQ,KAAK4F,QACE5F,KAAK6F,SAASwD,GAGlBrJ,KAAK6F,SAASwD,GAAQ+G,GAQ1BzP,EAAApB,UAAAsG,SAAP,SAAgBwD,GACZ,GAAIA,IAASrJ,KAAK6I,uBAAyB7I,KAAKiQ,OAAStP,EAAaG,oBAAqB,CACvF,IAAIoE,EAAgB,EAChBC,EAAiB,EAUrB,GARIkE,EAAKgH,aACLnL,EAASlF,KAAKmQ,OAAS9G,EAAKiH,UAAUpL,MAASmE,EAAKgH,YAGpDhH,EAAKkH,cACLpL,EAAUnF,KAAKmQ,OAAS9G,EAAKiH,UAAUnL,OAAUkE,EAAKkH,aAGtDlH,EAAKmH,kBAAoBnH,EAAKgH,YAAchH,EAAKkH,YACjD,OAAOjT,OAAOmT,WAAanT,OAAOoT,YAAcxL,EAAQC,EAG5D,GAAIkE,EAAKgH,WACL,OAAOnL,EAGX,GAAImE,EAAKkH,YACL,OAAOpL,EAGf,OAAOnF,KAAKmQ,QAQTxP,EAAApB,UAAAuF,SAAP,SAAgBuE,GACZ,OAAQrJ,KAAKiQ,MACT,KAAKtP,EAAaG,oBACd,OAA8B,IAAtBd,KAAK6F,SAASwD,GAAe,IACzC,KAAK1I,EAAaC,eACd,OAAOZ,KAAK6F,SAASwD,GAAQ,KAGrC,OAAOrJ,KAAKiQ,KAAKnL,YAQdnE,EAAApB,UAAAyF,WAAP,SAAkB2L,GACd,IAAIC,EAAQjQ,EAAakQ,OAAOC,KAAKH,EAAO7L,YAE5C,IAAK8L,GAA0B,IAAjBA,EAAMG,OAChB,OAAO,EAGX,IAAIC,EAAcC,WAAWL,EAAM,IAC/BM,EAAalR,KAAKiQ,KAQtB,GANKjQ,KAAKkQ,sBACFc,EAAc,IACdA,EAAc,GAID,IAAjBJ,EAAMG,OACN,OAAQH,EAAM,IACV,IAAK,KACDM,EAAavQ,EAAaC,eAC1B,MACJ,IAAK,IACDsQ,EAAavQ,EAAaG,oBAC1BkQ,GAAe,IAK3B,OAAIA,IAAgBhR,KAAKmQ,QAAUe,IAAelR,KAAKiQ,QAIvDjQ,KAAKmQ,OAASa,EACdhR,KAAKiQ,KAAOiB,GAEL,IASX7S,OAAAC,eAAkBqC,EAAA,2BAAlB,WACI,OAAOA,EAAawQ,sDAIxB9S,OAAAC,eAAkBqC,EAAA,sBAAlB,WACI,OAAOA,EAAayQ,iDAXTzQ,EAAAkQ,OAAS,0BACTlQ,EAAAwQ,qBAAuB,EACvBxQ,EAAAyQ,gBAAkB,EAWrCzQ,EA7JA,GAAa1D,EAAA0D,mcCLb,IAAA0Q,EAAA5T,EAAA,IACAmC,EAAAnC,EAAA,GAKA6T,EAAA,SAAAC,GAuCI,SAAAD,EAAYpT,GAAZ,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YAvCPqF,EAAAmM,cAAe,EAKbnM,EAAAoM,UAAY,IAAIC,QAmJ9B,OAzJiCC,EAAAL,EAAAC,GAW7BlT,OAAAC,eAAWgT,EAAA/R,UAAA,gBAAX,WACI,OAAOS,KAAKyR,2CAOhBpT,OAAAC,eAAWgT,EAAA/R,UAAA,mBAAX,WACI,OAAOS,KAAKwR,kBAGhB,SAAuB5S,GACfoB,KAAKwR,eAAiB5S,IAI1BoB,KAAKwR,aAAe5S,EAEfoB,KAAKwR,cACNxR,KAAK4R,qDAgBNN,EAAA/R,UAAAsS,aAAP,WAEI,OADA7R,KAAK4R,mBACE5R,MAQJsR,EAAA/R,UAAAuS,gBAAP,SAAuBC,GACnB,OAA4C,IAArC/R,KAAKyR,UAAUpJ,QAAQ0J,IAQ3BT,EAAA/R,UAAAyS,WAAP,SAAkBD,GAGd,OAAe,IAFH/R,KAAKyR,UAAUpJ,QAAQ0J,GAGxB/R,MAEX+R,EAAQ1L,OAASrG,KACjB+R,EAAQhN,MAAQ/E,KAAK+E,MAErB/E,KAAKyR,UAAUjJ,KAAKuJ,GAEhB/R,KAAK+E,MAAMkN,eACXF,EAAQG,aAAalS,KAAK+E,MAAMkN,aAAaE,mBAEzCJ,EAAQK,OACRL,EAAQK,KAAK/L,OAASrG,KAAKoS,MAG1BpS,KAAKqS,aACNrS,KAAK4R,oBAIN5R,OAODsR,EAAA/R,UAAAqS,iBAAV,aAGUN,EAAA/R,UAAA+S,YAAV,SAAsBvL,GAClB,OAAO,IAAInH,EAAA2S,cAAc,gBAAiBxL,IAQvCuK,EAAA/R,UAAA4O,cAAP,SAAqB4D,GACjB,IAAI5J,EAAQnI,KAAKyR,UAAUpJ,QAAQ0J,GASnC,OAPe,IAAX5J,IACAnI,KAAKyR,UAAUlJ,OAAOJ,EAAO,GAE7B4J,EAAQ1L,OAAS,KACjB0L,EAAQS,gBAGLxS,MAGDsR,EAAA/R,UAAAkF,aAAV,WACI,MAAO,eAMJ6M,EAAA/R,UAAA0O,QAAP,WACI,IAAoB,IAAAwE,EAAA,EAAAC,EAAA1S,KAAKyR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAApBC,EAAAD,GACJxE,UAGZjO,KAAKyR,aAELF,EAAAhS,UAAM0O,QAAOnQ,KAAAkC,OAIMsR,EAAAqB,kBAAoB,EAGpBrB,EAAAsB,uBAAyB,EAGzBtB,EAAAuB,+BAAiC,EAGjCvB,EAAAwB,wBAA0B,EAG1BxB,EAAAyB,gCAAkC,EAE7DzB,EAzJA,CAAiCD,EAAA2B,WAApB/V,EAAAqU,kcCNb,IAAA2B,EAAAxV,EAAA,GACAoC,EAAApC,EAAA,GAQAyV,EAAA,SAAA3B,GAyEI,SAAA2B,EAAmBhV,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OAvETmH,EAAAoM,UAAY,IAAIC,MAEhBrM,EAAA8N,oBAAsBtT,EAAAQ,QAAQC,QAI9B+E,EAAA+N,uBAAwB,EAExB/N,EAAAgO,wBAAyB,IAiVvC,OA3V+B1B,EAAAuB,EAAA3B,GAa3BlT,OAAAC,eAAW4U,EAAA3T,UAAA,6BAAX,WACI,OAAOS,KAAKqT,4BAGhB,SAAiCzU,GACzBoB,KAAKqT,yBAA2BzU,IAIpCoB,KAAKqT,uBAAyBzU,EAE1BA,IACAoB,KAAKmF,OAAS,QAGlBnF,KAAK4E,iDAITvG,OAAAC,eAAW4U,EAAA3T,UAAA,4BAAX,WACI,OAAOS,KAAKoT,2BAGhB,SAAgCxU,GACxBoB,KAAKoT,wBAA0BxU,IAInCoB,KAAKoT,sBAAwBxU,EAEzBA,IACAoB,KAAKkF,MAAQ,QAGjBlF,KAAK4E,iDAITvG,OAAAC,eAAW4U,EAAA3T,UAAA,kBAAX,WACI,OAAOS,KAAKsT,iBAGhB,SAAsB1U,GACdoB,KAAKsT,cAAgB1U,IAIzBoB,KAAKsT,YAAc1U,EACnBoB,KAAK4E,iDAITvG,OAAAC,eAAW4U,EAAA3T,UAAA,gBAAX,WACI,OAAOS,KAAKyR,2CAWNyB,EAAA3T,UAAAkF,aAAV,WACI,MAAO,aAQJyO,EAAA3T,UAAAgU,eAAP,SAAsBrV,GAClB,IAAkB,IAAAuU,EAAA,EAAAC,EAAA1S,KAAKwT,SAALf,EAAAC,EAAA3B,OAAA0B,IAAe,CAA5B,IAAIgB,EAAKf,EAAAD,GACV,GAAIgB,EAAMvV,OAASA,EACf,OAAOuV,EAIf,OAAO,MASJP,EAAA3T,UAAAmU,eAAP,SAAsBxV,EAAciO,GAChC,IAAkB,IAAAsG,EAAA,EAAAC,EAAA1S,KAAKwT,SAALf,EAAAC,EAAA3B,OAAA0B,IAAe,CAA5B,IAAIgB,EAAKf,EAAAD,GACV,GAAIgB,EAAME,WAAaxH,EACnB,OAAOsH,EAIf,OAAO,MAQJP,EAAA3T,UAAAuS,gBAAP,SAAuBC,GACnB,OAA2C,IAApC/R,KAAKwT,SAASnL,QAAQ0J,IAQ1BmB,EAAA3T,UAAAyS,WAAP,SAAkBD,GACd,OAAKA,GAMU,IAFH/R,KAAKyR,UAAUpJ,QAAQ0J,GAGxB/R,MAEX+R,EAAQ3I,MAAMpJ,KAAMA,KAAK+E,OAEzBgN,EAAQ9I,kBAERjJ,KAAKgG,gBAAgB+L,GAErB/R,KAAK4E,eACE5E,MAfIA,MAsBRkT,EAAA3T,UAAAqU,cAAP,WAGI,IAFA,IAEkBnB,EAAA,EAAAoB,EAFH7T,KAAKyR,UAAUqC,QAEZrB,EAAAoB,EAAA9C,OAAA0B,IAAU,CAAvB,IAAIgB,EAAKI,EAAApB,GACVzS,KAAKmO,cAAcsF,GAGvB,OAAOzT,MAQJkT,EAAA3T,UAAA4O,cAAP,SAAqB4D,GACjB,IAAI5J,EAAQnI,KAAKyR,UAAUpJ,QAAQ0J,GAenC,OAbe,IAAX5J,IACAnI,KAAKyR,UAAUlJ,OAAOJ,EAAO,GAE7B4J,EAAQ1L,OAAS,MAGrB0L,EAAQ9J,aAAa,MAEjBjI,KAAK+E,OACL/E,KAAK+E,MAAMgP,0BAA0BhC,GAGzC/R,KAAK4E,eACE5E,MAIJkT,EAAA3T,UAAAyG,gBAAP,SAAuB+L,GACnB/R,KAAKmO,cAAc4D,GAEnB,IAAK,IAAI5J,EAAQ,EAAGA,EAAQnI,KAAKyR,UAAUV,OAAQ5I,IAC/C,GAAInI,KAAKyR,UAAUtJ,GAAOrC,OAASiM,EAAQjM,OAEvC,YADA9F,KAAKyR,UAAUlJ,OAAOJ,EAAO,EAAG4J,GAKxC/R,KAAKyR,UAAUjJ,KAAKuJ,GAEpBA,EAAQ1L,OAASrG,KAEjBA,KAAK4E,gBAIFsO,EAAA3T,UAAAsF,mBAAP,WACI0M,EAAAhS,UAAMsF,mBAAkB/G,KAAAkC,MAExB,IAAK,IAAImI,EAAQ,EAAGA,EAAQnI,KAAKyR,UAAUV,OAAQ5I,IAC/CnI,KAAKyR,UAAUtJ,GAAOtD,sBAKvBqO,EAAA3T,UAAA0J,gBAAP,WACIsI,EAAAhS,UAAM0J,gBAAenL,KAAAkC,MAErB,IAAK,IAAImI,EAAQ,EAAGA,EAAQnI,KAAKyR,UAAUV,OAAQ5I,IAC/CnI,KAAKyR,UAAUtJ,GAAOc,mBAKpBiK,EAAA3T,UAAAyU,WAAV,SAAqBzK,GACbvJ,KAAKsT,eACDtT,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,eAGjC6F,EAAQY,UAAYnK,KAAKsT,YACzB/J,EAAQ0K,SAASjU,KAAKI,gBAAgB6F,KAAMjG,KAAKI,gBAAgB8F,IAAKlG,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,SAEnHnF,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ5F,WAAa,EACrB4F,EAAQ9F,cAAgB,EACxB8F,EAAQ7F,cAAgB,KAM7BwP,EAAA3T,UAAA6J,MAAP,SAAarM,EAA2BsM,GACpCkI,EAAAhS,UAAM6J,MAAKtL,KAAAkC,KAACjD,EAAMsM,GAElB,IAAkB,IAAAoJ,EAAA,EAAAC,EAAA1S,KAAKyR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAApBC,EAAAD,GACJrJ,MAAMrM,EAAMsM,KAKnB6J,EAAA3T,UAAAuM,MAAP,SAAavB,EAAwBhB,GACjC,GAAKvJ,KAAKsM,YAAatM,KAAK8H,cAA5B,CAOA,GAJAyB,EAAQ2K,OAERlU,KAAKiK,aAAaV,GAEdvJ,KAAKsK,iBAAiBC,EAAehB,GAAU,CAC/CvJ,KAAKgU,WAAWzK,GAEhBvJ,KAAKmU,iBAAiB5K,GAKtB,IAHA,IAAI6K,GAAiB,EACjBC,GAAkB,EAEJ5B,EAAA,EAAAC,EAAA1S,KAAKyR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAA7B,IAAIgB,EAAKf,EAAAD,GACNgB,EAAMnH,YAAcmH,EAAM3L,gBAC1B2L,EAAMlS,mBAAmBkJ,SAASzK,KAAKmT,qBACvCM,EAAM3H,MAAM9L,KAAKmT,oBAAqB5J,GAElCkK,EAAMjP,sBAAsBsG,gBAC5B2I,EAAMjP,sBAAsBuG,gBAAgB0I,GAG5CzT,KAAKsU,sBAAwBb,EAAM5S,OAAO+E,UAC1CwO,EAAgBtL,KAAKwC,IAAI8I,EAAeX,EAAMrT,gBAAgB8E,QAE9DlF,KAAKuU,uBAAyBd,EAAM1S,QAAQ6E,UAC5CyO,EAAiBvL,KAAKwC,IAAI+I,EAAgBZ,EAAMrT,gBAAgB+E,UAKxEnF,KAAKsU,sBAAwBF,GAAiB,IAC9CpU,KAAKkF,MAAQkP,EAAgB,MAE7BpU,KAAKuU,uBAAyBF,GAAkB,IAChDrU,KAAKmF,OAASkP,EAAiB,MAGvC9K,EAAQiL,UAEJxU,KAAKwE,sBAAsBsG,gBAC3B9K,KAAKwE,sBAAsBuG,gBAAgB/K,QAK5CkT,EAAA3T,UAAA2M,gBAAP,SAAuBxF,EAAWC,EAAWwF,EAAcC,EAAmBC,GAC1E,IAAKrM,KAAKsM,WAAatM,KAAK8H,cACxB,OAAO,EAGX,IAAKyJ,EAAAhS,UAAMwM,SAAQjO,KAAAkC,KAAC0G,EAAGC,GACnB,OAAO,EAIX,IAAK,IAAIwB,EAAQnI,KAAKyR,UAAUV,OAAS,EAAG5I,GAAS,EAAGA,IAAS,CAC7D,IAAIsL,EAAQzT,KAAKyR,UAAUtJ,GAC3B,GAAIsL,EAAMvH,gBAAgBxF,EAAGC,EAAGwF,EAAMC,EAAWC,GAI7C,OAHIoH,EAAM5P,aACN7D,KAAK+E,MAAM0P,cAAchB,EAAM5P,cAE5B,EAIf,QAAK7D,KAAKsD,kBAIHtD,KAAKuM,oBAAoBJ,EAAMzF,EAAGC,EAAGyF,EAAWC,IAIjD6G,EAAA3T,UAAA4U,iBAAV,SAA2B5K,KAKjB2J,EAAA3T,UAAAsL,sBAAV,SAAgCN,EAAwBhB,GACpDgI,EAAAhS,UAAMsL,sBAAqB/M,KAAAkC,KAACuK,EAAehB,GAE3CvJ,KAAKmT,oBAAoB1I,SAASzK,KAAKI,kBAIpC8S,EAAA3T,UAAA0O,QAAP,WACIsD,EAAAhS,UAAM0O,QAAOnQ,KAAAkC,MAEb,IAAoB,IAAAyS,EAAA,EAAAC,EAAA1S,KAAKyR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAApBC,EAAAD,GACJxE,YAGpBiF,EA3VA,CAA+BD,EAAAlT,SAAlB9C,EAAAiW,gcCTb,IAQYwB,EARZ9U,EAAAnC,EAAA,GAEAkC,EAAAlC,EAAA,GACAwV,EAAAxV,EAAA,IAKA,SAAYiX,GAIRA,IAAA,eAKAA,IAAA,uBAKAA,IAAA,uBAdJ,CAAYA,EAAAzX,EAAAyX,eAAAzX,EAAAyX,kBAoBZ,IAAAC,EAAA,SAAApD,GAoLI,SAAAoD,EAIWzW,EACPyQ,QAAA,IAAAA,MAAA,IALJ,IAAAtJ,EAMIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YAFJqF,EAAAnH,OAvLHmH,EAAAuP,MAAQ,GACRvP,EAAAwP,cAAgBH,EAAaI,KAC7BzP,EAAA0P,yBAA2B9B,EAAAlT,QAAQoB,4BACnCkE,EAAA2P,uBAAyB/B,EAAAlT,QAAQsB,0BAGjCgE,EAAA4P,cAAwB,EACxB5P,EAAA6P,aAA6B,IAAIvV,EAAAgB,aAAa,GAC9C0E,EAAA8P,cAAwB,EACxB9P,EAAA+P,cAAwB,QAIzB/P,EAAAgQ,wBAA0B,IAAIzV,EAAAqE,WAK9BoB,EAAAiQ,uBAAyB,IAAI1V,EAAAqE,WAyKhCoB,EAAKsJ,KAAOA,IAsMpB,OAlY+BgD,EAAAgD,EAAApD,GAwB3BlT,OAAAC,eAAWqW,EAAApV,UAAA,aAAX,WACI,OAAOS,KAAKuV,wCAMhBlX,OAAAC,eAAWqW,EAAApV,UAAA,mBAAX,WACI,OAAOS,KAAKiV,kBAMhB,SAAuBrW,GACnBoB,KAAKiV,aAAerW,EAEhBoB,KAAKiV,eACLjV,KAAKa,OAAOgI,uBAAwB,EACpC7I,KAAKe,QAAQ8H,uBAAwB,oCAO7CxK,OAAAC,eAAWqW,EAAApV,UAAA,oBAAX,WACI,OAAOS,KAAK6U,mBAMhB,SAAwBjW,GAChBoB,KAAK6U,gBAAkBjW,IAG3BoB,KAAK6U,eAAiBjW,EACtBoB,KAAK4E,iDAMTvG,OAAAC,eAAWqW,EAAApV,UAAA,YAAX,WACI,OAAOS,KAAK4U,WAMhB,SAAgBhW,GACRoB,KAAK4U,QAAUhW,IAGnBoB,KAAK4U,MAAQhW,EACboB,KAAK4E,eAEL5E,KAAKqV,wBAAwBtK,gBAAgB/K,wCAMjD3B,OAAAC,eAAWqW,EAAApV,UAAA,+BAAX,WACI,OAAOS,KAAK+U,8BAMhB,SAAmCnW,GAC3BoB,KAAK+U,2BAA6BnW,IAItCoB,KAAK+U,yBAA2BnW,EAChCoB,KAAK4E,iDAMTvG,OAAAC,eAAWqW,EAAApV,UAAA,6BAAX,WACI,OAAOS,KAAKgV,4BAMhB,SAAiCpW,GACzBoB,KAAKgV,yBAA2BpW,IAIpCoB,KAAKgV,uBAAyBpW,EAC9BoB,KAAK4E,iDAMTvG,OAAAC,eAAWqW,EAAApV,UAAA,mBASX,WACI,OAAOS,KAAKkV,aAAapQ,SAAS9E,KAAK+E,YAV3C,SAAuBnG,GACfoB,KAAKkV,aAAalQ,WAAWpG,IAC7BoB,KAAK4E,gDAcbvG,OAAAC,eAAWqW,EAAApV,UAAA,oBAAX,WACI,OAAOS,KAAKmV,mBAMhB,SAAwBvW,GAChBoB,KAAKmV,gBAAkBvW,IAG3BoB,KAAKmV,cAAgBvW,EACrBoB,KAAK4E,iDAMTvG,OAAAC,eAAWqW,EAAApV,UAAA,oBAAX,WACI,OAAOS,KAAKoV,mBAMhB,SAAwBxW,GAChBoB,KAAKoV,gBAAkBxW,IAG3BoB,KAAKoV,cAAgBxW,EACrBoB,KAAK4E,iDAmBC+P,EAAApV,UAAAkF,aAAV,WACI,MAAO,aAGHkQ,EAAApV,UAAAiW,UAAR,SAAkB7G,EAAc8G,EAAmB9O,EAAW4C,GAC1D,IAAIrE,EAAQlF,KAAKI,gBAAgB8E,MAC7BwB,EAAI,EACR,OAAQ1G,KAAK+U,0BACT,KAAK9B,EAAAlT,QAAQmH,0BACTR,EAAI,EACJ,MACJ,KAAKuM,EAAAlT,QAAQ6L,2BACTlF,EAAIxB,EAAQuQ,EACZ,MACJ,KAAKxC,EAAAlT,QAAQoB,4BACTuF,GAAKxB,EAAQuQ,GAAa,GAI9BzV,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,eAG7B1D,KAAK0V,cACLnM,EAAQoM,WAAWhH,EAAM3O,KAAKI,gBAAgB6F,KAAOS,EAAGC,GAE5D4C,EAAQqM,SAASjH,EAAM3O,KAAKI,gBAAgB6F,KAAOS,EAAGC,IAInDgO,EAAApV,UAAAuM,MAAP,SAAavB,EAAwBhB,GACjCA,EAAQ2K,OAERlU,KAAKiK,aAAaV,GAEdvJ,KAAKsK,iBAAiBC,EAAehB,IAErCvJ,KAAK6V,aAAatM,GAEtBA,EAAQiL,WAGFG,EAAApV,UAAA0K,aAAV,SAAuBV,GACnBgI,EAAAhS,UAAM0K,aAAYnM,KAAAkC,KAACuJ,GACfvJ,KAAK0V,eACLnM,EAAQuM,UAAY9V,KAAK0V,aACzBnM,EAAQwM,YAAc/V,KAAKgW,eAIzBrB,EAAApV,UAAAsL,sBAAV,SAAgCN,EAAwBhB,GACpDvJ,KAAKuV,OAASvV,KAAKiW,YAAYjW,KAAKI,gBAAgB8E,MAAOqE,GAC3DvJ,KAAKsV,uBAAuBvK,gBAAgB/K,OAGtC2U,EAAApV,UAAA0W,YAAV,SAAsBC,EAAkB3M,GACpC,IAAI4M,KACAZ,EAASvV,KAAK2O,KAAKyH,MAAM,MAE7B,GAAIpW,KAAK6U,gBAAkBH,EAAa2B,UAAarW,KAAKiV,aAInD,GAAIjV,KAAK6U,gBAAkBH,EAAa4B,UAAatW,KAAKiV,aAK7D,IAAkB,IAAAsB,EAAA,EAAAC,EAAAjB,EAAAgB,EAAAC,EAAAzF,OAAAwF,IAAQ,CAAjBE,EAAKD,EAAAD,GACVJ,EAAM3N,KAAKxI,KAAK0W,WAAWD,EAAOlN,SALtC,IAAkB,IAAAmJ,EAAA,EAAAiE,EAAApB,EAAA7C,EAAAiE,EAAA5F,OAAA2B,IAAQ,CAArB,IAAI+D,EAAKE,EAAAjE,GACVyD,EAAM3N,KAAIoO,MAAVT,EAAcnW,KAAK6W,mBAAmBJ,EAAOP,EAAU3M,SAL3D,IAAkB,IAAAkJ,EAAA,EAAAqE,EAAAvB,EAAA9C,EAAAqE,EAAA/F,OAAA0B,IAAQ,CAArB,IAAIgE,EAAKK,EAAArE,GACV0D,EAAM3N,KAAKxI,KAAK+W,mBAAmBN,EAAOP,EAAU3M,IAY5D,OAAO4M,GAGDxB,EAAApV,UAAAmX,WAAV,SAAqBM,EAAmBzN,GACpC,YADiB,IAAAyN,MAAA,KACRrI,KAAMqI,EAAM9R,MAAOqE,EAAQ0N,YAAYD,GAAM9R,QAGhDyP,EAAApV,UAAAwX,mBAAV,SAA6BC,EAAmB9R,EAC5CqE,QADyB,IAAAyN,MAAA,IAEzB,IAAIlB,EAAYvM,EAAQ0N,YAAYD,GAAM9R,MAK1C,IAHI4Q,EAAY5Q,IACZ8R,GAAQ,KAELA,EAAKjG,OAAS,GAAK+E,EAAY5Q,GAClC8R,EAAOA,EAAKlD,MAAM,GAAI,GAAK,IAC3BgC,EAAYvM,EAAQ0N,YAAYD,GAAM9R,MAG1C,OAASyJ,KAAMqI,EAAM9R,MAAO4Q,IAGtBnB,EAAApV,UAAAsX,mBAAV,SAA6BG,EAAmB9R,EAC5CqE,QADyB,IAAAyN,MAAA,IAMzB,IAJA,IAAIb,KACAe,EAAQF,EAAKZ,MAAM,KACnBN,EAAY,EAEP1W,EAAI,EAAGA,EAAI8X,EAAMnG,OAAQ3R,IAAK,CACnC,IAAI+X,EAAW/X,EAAI,EAAI4X,EAAO,IAAME,EAAM9X,GAAK8X,EAAM,GAEjDE,EADU7N,EAAQ0N,YAAYE,GACVjS,MACpBkS,EAAYlS,GAAS9F,EAAI,GACzB+W,EAAM3N,MAAOmG,KAAMqI,EAAM9R,MAAO4Q,IAChCkB,EAAOE,EAAM9X,GACb0W,EAAYvM,EAAQ0N,YAAYD,GAAM9R,QAGtC4Q,EAAYsB,EACZJ,EAAOG,GAKf,OAFAhB,EAAM3N,MAAOmG,KAAMqI,EAAM9R,MAAO4Q,IAEzBK,GAGDxB,EAAApV,UAAAsW,aAAV,SAAuBtM,GACnB,IAAIpE,EAASnF,KAAKI,gBAAgB+E,OAE7BnF,KAAK0E,cACN1E,KAAK0E,YAAcuO,EAAAlT,QAAQiO,eAAezE,EAAQW,OAEtD,IAAImN,EAAQ,EACZ,OAAQrX,KAAKgV,wBACT,KAAK/B,EAAAlT,QAAQqH,uBACTiQ,EAAQrX,KAAK0E,YAAYgL,OACzB,MACJ,KAAKuD,EAAAlT,QAAQ8L,0BACTwL,EAAQlS,EAASnF,KAAK0E,YAAYS,QAAUnF,KAAKuV,OAAOxE,OAAS,GAAK/Q,KAAK0E,YAAYiL,QACvF,MACJ,KAAKsD,EAAAlT,QAAQsB,0BACTgW,EAAQrX,KAAK0E,YAAYgL,QAAUvK,EAASnF,KAAK0E,YAAYS,OAASnF,KAAKuV,OAAOxE,QAAU,EAIpGsG,GAASrX,KAAKI,gBAAgB8F,IAI9B,IAFA,IAAIoR,EAAuB,EAElB3Z,EAAI,EAAGA,EAAIqC,KAAKuV,OAAOxE,OAAQpT,IAAK,CACzC,IAAMqZ,EAAOhX,KAAKuV,OAAO5X,GAEf,IAANA,GAA+C,IAApCqC,KAAKkV,aAAaqC,gBAEzBvX,KAAKkV,aAAatP,QAClByR,GAASrX,KAAKkV,aAAarP,SAAS7F,KAAK+E,OAEzCsS,GAAiBrX,KAAKkV,aAAarP,SAAS7F,KAAK+E,OAAS/E,KAAKe,QAAQkE,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB2D,SAIrInF,KAAKwV,UAAUwB,EAAKrI,KAAMqI,EAAK9R,MAAOmS,EAAO9N,GAC7C8N,GAASrX,KAAK0E,YAAYS,OAEtB6R,EAAK9R,MAAQoS,IAAcA,EAAeN,EAAK9R,OAGnDlF,KAAKiV,eACLjV,KAAKkF,MAAQlF,KAAKwX,oBAAsBxX,KAAKyX,qBAAuBH,EAAe,KACnFtX,KAAKmF,OAASnF,KAAK0X,mBAAqB1X,KAAK2X,sBAAwB3X,KAAK0E,YAAYS,OAASnF,KAAKuV,OAAOxE,OAAS,OAQrH4D,EAAApV,UAAAqY,sBAAP,WACI,GAAI5X,KAAK2O,MAAQ3O,KAAK6X,cAAe,CACjC,IAAMtO,EAAUqF,SAASC,cAAc,UAAUiJ,WAAW,MAC5D,GAAIvO,EAAS,CACTvJ,KAAKiK,aAAaV,GACbvJ,KAAK0E,cACN1E,KAAK0E,YAAcuO,EAAAlT,QAAQiO,eAAezE,EAAQW,OAEtD,IAAMiM,EAAQnW,KAAKuV,OAASvV,KAAKuV,OAASvV,KAAKiW,YAC3CjW,KAAK6X,cAAgB7X,KAAKwX,oBAAsBxX,KAAKyX,qBAAsBlO,GAC/E,OAAOvJ,KAAK0X,mBAAqB1X,KAAK2X,sBAAwB3X,KAAK0E,YAAYS,OAASgR,EAAMpF,QAGtG,OAAO,GAGX4D,EAAApV,UAAA0O,QAAA,WACIsD,EAAAhS,UAAM0O,QAAOnQ,KAAAkC,MAEbA,KAAKqV,wBAAwBnH,SAErCyG,EAlYA,CAA+B1B,EAAAlT,SAAlB9C,EAAA0X,gcC5Bb,IAAAoD,EAAAta,EAAA,GACAoC,EAAApC,EAAA,GACAwV,EAAAxV,EAAA,GAKAua,EAAA,SAAAzG,GA+DI,SAAAyG,EAAmB9Z,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OA9DXmH,EAAA4S,aAAc,EACd5S,EAAA6S,cAAe,EACf7S,EAAA8S,eAAgB,EAChB9S,EAAA+S,0BAA2B,EAC3B/S,EAAAgT,kBAAoBxY,EAAAQ,QAAQC,UA4IxC,OAjJgCqR,EAAAqG,EAAAzG,GAQ5BlT,OAAAC,eAAW0Z,EAAAzY,UAAA,kBAAX,WACI,OAAOS,KAAKiY,iBAGhB,SAAsBrZ,GACdoB,KAAKiY,cAAgBrZ,IAIzBoB,KAAKiY,YAAcrZ,EACnBoB,KAAK4E,iDAITvG,OAAAC,eAAW0Z,EAAAzY,UAAA,aAcX,WACI,OAAOS,KAAKa,OAAOiE,SAAS9E,KAAK+E,YAfrC,SAAiBnG,GACRoB,KAAKoY,2BACNpY,KAAKkY,cAAe,GAGpBlY,KAAKa,OAAOiE,SAAS9E,KAAK+E,SAAWnG,GAIrCoB,KAAKa,OAAOmE,WAAWpG,IACvBoB,KAAK4E,gDASbvG,OAAAC,eAAW0Z,EAAAzY,UAAA,cAcX,WACI,OAAOS,KAAKe,QAAQ+D,SAAS9E,KAAK+E,YAftC,SAAkBnG,GACToB,KAAKoY,2BACNpY,KAAKmY,eAAgB,GAGrBnY,KAAKe,QAAQ+D,SAAS9E,KAAK+E,SAAWnG,GAItCoB,KAAKe,QAAQiE,WAAWpG,IACxBoB,KAAK4E,gDAgBHoT,EAAAzY,UAAAkF,aAAV,WACI,MAAO,cAGDuT,EAAAzY,UAAAmL,YAAV,SAAsBH,EAAwBhB,GAG1C,IAFA,IAAI+O,EAAa,EACbC,EAAc,EACA9F,EAAA,EAAAC,EAAA1S,KAAKyR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAA7B,IAAIgB,EAAKf,EAAAD,GACVzS,KAAKqY,kBAAkB5N,SAASgJ,EAAMrT,iBACtCqT,EAAMrT,gBAAgBqK,SAASF,GAC/BkJ,EAAM9I,WAEF3K,KAAKiY,aACLxE,EAAMvN,IAAMqS,EAAc,KACrB9E,EAAM3R,KAAK+G,uBACZ4K,EAAM7O,eAEV6O,EAAM3R,KAAK+G,uBAAwB,EACnC0P,GAAe9E,EAAMrT,gBAAgB+E,OACjCsO,EAAMrT,gBAAgB8E,MAAQoT,IAC9BA,EAAa7E,EAAMrT,gBAAgB8E,OAEvCuO,EAAMtM,kBAAoB8L,EAAAlT,QAAQqH,yBAElCqM,EAAMxN,KAAOqS,EAAa,KACrB7E,EAAM5R,MAAMgH,uBACb4K,EAAM7O,eAEV6O,EAAM5R,MAAMgH,uBAAwB,EACpCyP,GAAc7E,EAAMrT,gBAAgB8E,MAChCuO,EAAMrT,gBAAgB+E,OAASoT,IAC/BA,EAAc9E,EAAMrT,gBAAgB+E,QAExCsO,EAAMxM,oBAAsBgM,EAAAlT,QAAQmH,2BAGxCuM,EAAMrT,gBAAgBqK,SAASzK,KAAKqY,mBAGxCrY,KAAKoY,0BAA2B,EAKhC,IAAII,EACAC,EAEAC,EAAiB1Y,KAAKmF,OACtBwT,EAAgB3Y,KAAKkF,MAEpBlF,KAAKmY,gBAENnY,KAAKmF,OAASoT,EAAc,MAE3BvY,KAAKkY,eAENlY,KAAKkF,MAAQoT,EAAa,MAG9BE,EAAoBG,IAAkB3Y,KAAKkF,QAAUlF,KAAKa,OAAOgI,uBACjE4P,EAAqBC,IAAmB1Y,KAAKmF,SAAWnF,KAAKe,QAAQ8H,yBAGjE7I,KAAKe,QAAQ8H,uBAAwB,GAGrC2P,IACAxY,KAAKa,OAAOgI,uBAAwB,GAGxC7I,KAAKoY,0BAA2B,GAE5BI,GAAqBC,IACrBzY,KAAKiJ,kBAGTsI,EAAAhS,UAAMmL,YAAW5M,KAAAkC,KAACuK,EAAehB,IAEzCyO,EAjJA,CAAgCD,EAAA7E,WAAnBjW,EAAA+a,4FCHb,IAAA3X,EAAA,WAQI,SAAAA,EAEW4F,EAEAC,EAEAhB,EAEAC,GANAnF,KAAAiG,OAEAjG,KAAAkG,MAEAlG,KAAAkF,QAEAlF,KAAAmF,SAgDf,OAxCW9E,EAAAd,UAAAkL,SAAP,SAAgBmO,GACZ5Y,KAAKiG,KAAO2S,EAAM3S,KAClBjG,KAAKkG,IAAM0S,EAAM1S,IACjBlG,KAAKkF,MAAQ0T,EAAM1T,MACnBlF,KAAKmF,OAASyT,EAAMzT,QAQjB9E,EAAAd,UAAAiL,WAAP,SAAkBoO,GAEd,OAAI5Y,KAAKiG,OAAS2S,EAAM3S,OAIpBjG,KAAKkG,MAAQ0S,EAAM1S,MAInBlG,KAAKkF,QAAU0T,EAAM1T,OAIrBlF,KAAKmF,SAAWyT,EAAMzT,UAWhB9E,EAAAC,MAAd,WACI,OAAO,IAAID,EAAQ,EAAG,EAAG,EAAG,IAEpCA,EAhEA,GAAapD,EAAAoD,8bCJb,IAAAwY,EAAApb,EAAA,GACAmC,EAAAnC,EAAA,GAMAqb,EAAA,SAAAvH,GAsFI,SAAAuH,IAAA,IAAAzT,EACIkM,EAAAzT,KAAAkC,OAAOA,YAtFHqF,EAAA0T,SAAW,GACX1T,EAAA2T,MAAQ,EACR3T,EAAA4T,eAAgB,EAEhB5T,EAAA6T,aAAeL,EAAAvH,YAAYsB,uBAQ5BvN,EAAA8T,OAAS,IA0KpB,OAvL+CxH,EAAAmH,EAAAvH,GAyB3ClT,OAAAC,eAAWwa,EAAAvZ,UAAA,mBAAX,WACI,OAAOS,KAAKkZ,kBAGhB,SAAuBta,GAAvB,IAAAyG,EAAArF,KACQA,KAAKkZ,eAAiBta,IAI1BoB,KAAKkZ,aAAeta,EAEpBgB,EAAAmI,MAAMqR,aAAa,WACf/T,EAAKuM,uDAQbvT,OAAAC,eAAWwa,EAAAvZ,UAAA,eAAX,WACI,OAAOS,KAAK+Y,cAGhB,SAAmBna,GAAnB,IAAAyG,EAAArF,KACQA,KAAK+Y,WAAana,IAItBoB,KAAK+Y,SAAWna,EAChBoB,KAAKiZ,eAAgB,EAErBrZ,EAAAmI,MAAMqR,aAAa,WACf/T,EAAKuM,uDAQbvT,OAAAC,eAAWwa,EAAAvZ,UAAA,YAAX,WACI,OAAOS,KAAKgZ,WAGhB,SAAgBpa,GAAhB,IAAAyG,EAAArF,KACQA,KAAKgZ,QAAUpa,IAInBoB,KAAKgZ,MAAQpa,EACboB,KAAKiZ,eAAgB,EAErBrZ,EAAAmI,MAAMqR,aAAa,WACf/T,EAAKuM,uDAWHkH,EAAAvZ,UAAAqS,iBAAV,WACI5R,KAAKqZ,WAAa,EAClBrZ,KAAKsZ,YAAc,EAQnB,IAPA,IAAIC,EAAO,EACPC,EAAU,EACVC,EAAe,EAEfC,EAAsB9Z,EAAA8H,OAAOiS,OAAO3Z,KAAKoS,KAAMwH,oBAAmB,IAGpDnH,EAAA,EAAAC,EAAA1S,KAAKyR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAC9B,IADKgB,EAAKf,EAAAD,IACCvK,KAAX,CAIAuR,IACAhG,EAAMvL,KAAK0R,oBAAmB,GAG9B,IAAIC,EAAcpG,EAAMvL,KAAK4R,8BACzBC,EAAana,EAAAoa,IAAIxS,QAAQ,GACzByS,EAAOra,EAAAoa,IAAIxS,QAAQ,GAEvBqS,EAAYvO,IAAI4O,cAAcL,EAAYzO,IAAK6O,GAE/CA,EAAKE,aAAa,IAElBva,EAAA4H,QAAQ4S,qBAAqBH,EAAMP,EAAqBK,GAExD/Z,KAAKqZ,WAAavQ,KAAKwC,IAAItL,KAAKqZ,WAA2B,EAAfU,EAAWrT,GACvD1G,KAAKsZ,YAAcxQ,KAAKwC,IAAItL,KAAKsZ,YAA4B,EAAfS,EAAWpT,IAG7D3G,KAAKqZ,YAA4B,EAAdrZ,KAAKmZ,OACxBnZ,KAAKsZ,aAA6B,EAAdtZ,KAAKmZ,OAGrBnZ,KAAKiZ,eACLO,EAAUxZ,KAAK+Y,SACfQ,EAAOzQ,KAAKuR,KAAKZ,EAAezZ,KAAK+Y,YAErCQ,EAAOvZ,KAAKgZ,MACZQ,EAAU1Q,KAAKuR,KAAKZ,EAAezZ,KAAKgZ,QAG5C,IAAIsB,EAA0B,GAAVd,EAAiBxZ,KAAKqZ,WACtCkB,EAAuB,GAAPhB,EAAcvZ,KAAKsZ,YACnCkB,KACAC,EAAc,EAElB,GAAIza,KAAKiZ,cACL,IAAK,IAAIxa,EAAI,EAAGA,EAAI8a,EAAM9a,IACtB,IAAK,IAAIT,EAAI,EAAGA,EAAIwb,IAChBgB,EAAShS,KAAK,IAAI5I,EAAA4H,QAASxJ,EAAIgC,KAAKqZ,WAAciB,EAAeta,KAAKqZ,WAAa,EAAI5a,EAAIuB,KAAKsZ,YAAeiB,EAAeva,KAAKsZ,YAAc,EAAG,QACpJmB,EACkBhB,IAHOzb,UASjC,IAASA,EAAI,EAAGA,EAAIwb,EAASxb,IACzB,IAASS,EAAI,EAAGA,EAAI8a,IAChBiB,EAAShS,KAAK,IAAI5I,EAAA4H,QAASxJ,EAAIgC,KAAKqZ,WAAciB,EAAeta,KAAKqZ,WAAa,EAAI5a,EAAIuB,KAAKsZ,YAAeiB,EAAeva,KAAKsZ,YAAc,EAAG,QACpJmB,EACkBhB,IAHIhb,KAUlCgc,EAAc,EACd,IAAkB,IAAAlE,EAAA,EAAAmE,EAAA1a,KAAKyR,UAAL8E,EAAAmE,EAAA3J,OAAAwF,IAAgB,CAA7B,IAAI9C,KAAKiH,EAAAnE,IACCrO,OAIXlI,KAAK2a,aAAalH,EAAO+G,EAASC,IAElCA,KAGJza,KAAK4a,oBAOC9B,EAAAvZ,UAAAqb,iBAAV,aAGJ9B,EAvLA,CAA+CD,EAAAvH,aAAzBrU,EAAA6b,gKCPtB+B,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,IACAod,EAAApd,EAAA,IACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,IACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,IACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KAEAod,EAAApd,EAAA,ybCrBA,IAIAqd,EAAA,SAAAvJ,GAwCI,SAAAuJ,EAAmB5c,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OAvCXmH,EAAA0V,WAAa,EACb1V,EAAA2V,cAAgB,IAgI5B,OAlI+BrJ,EAAAmJ,EAAAvJ,GAK3BlT,OAAAC,eAAWwc,EAAAvb,UAAA,iBAAX,WACI,OAAOS,KAAK+a,gBAGhB,SAAqBnc,GACboB,KAAK+a,aAAenc,IAIxBoB,KAAK+a,WAAanc,EAClBoB,KAAK4E,iDAITvG,OAAAC,eAAWwc,EAAAvb,UAAA,oBAAX,WACI,OAAOS,KAAKgb,mBAGhB,SAAwBpc,GAChBA,EAAQ,IACRA,EAAQ,GAGRoB,KAAKgb,gBAAkBpc,IAI3BoB,KAAKgb,cAAgBpc,EACrBoB,KAAK4E,iDAWCkW,EAAAvb,UAAAkF,aAAV,WACI,MAAO,aAGDqW,EAAAvb,UAAAyU,WAAV,SAAqBzK,GACjBA,EAAQ2K,QAEJlU,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,eAG7B1D,KAAKsT,cACL/J,EAAQY,UAAYnK,KAAKsT,YAErBtT,KAAKgb,eACLhb,KAAKib,iBAAiB1R,EAASvJ,KAAK+a,WAAa,GACjDxR,EAAQ2R,QAER3R,EAAQ0K,SAASjU,KAAKI,gBAAgB6F,KAAMjG,KAAKI,gBAAgB8F,IAAKlG,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,SAI3HnF,KAAK+a,cAED/a,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ5F,WAAa,EACrB4F,EAAQ9F,cAAgB,EACxB8F,EAAQ7F,cAAgB,GAGxB1D,KAAKmb,QACL5R,EAAQwM,YAAc/V,KAAKmb,OAE/B5R,EAAQuM,UAAY9V,KAAK+a,WAErB/a,KAAKgb,eACLhb,KAAKib,iBAAiB1R,EAASvJ,KAAK+a,WAAa,GACjDxR,EAAQ6R,UAER7R,EAAQ8R,WAAWrb,KAAKI,gBAAgB6F,KAAOjG,KAAK+a,WAAa,EAAG/a,KAAKI,gBAAgB8F,IAAMlG,KAAK+a,WAAa,EAC7G/a,KAAKI,gBAAgB8E,MAAQlF,KAAK+a,WAAY/a,KAAKI,gBAAgB+E,OAASnF,KAAK+a,aAI7FxR,EAAQiL,WAGFsG,EAAAvb,UAAAsL,sBAAV,SAAgCN,EAAwBhB,GACpDgI,EAAAhS,UAAMsL,sBAAqB/M,KAAAkC,KAACuK,EAAehB,GAE3CvJ,KAAKmT,oBAAoBjO,OAAS,EAAIlF,KAAK+a,WAC3C/a,KAAKmT,oBAAoBhO,QAAU,EAAInF,KAAK+a,WAC5C/a,KAAKmT,oBAAoBlN,MAAQjG,KAAK+a,WACtC/a,KAAKmT,oBAAoBjN,KAAOlG,KAAK+a,YAGjCD,EAAAvb,UAAA0b,iBAAR,SAAyB1R,EAAmC5E,QAAA,IAAAA,MAAA,GACxD,IAAI+B,EAAI1G,KAAKI,gBAAgB6F,KAAOtB,EAChCgC,EAAI3G,KAAKI,gBAAgB8F,IAAMvB,EAC/BO,EAAQlF,KAAKI,gBAAgB8E,MAAiB,EAATP,EACrCQ,EAASnF,KAAKI,gBAAgB+E,OAAkB,EAATR,EAEvC2W,EAASxS,KAAKsC,IAAIjG,EAAS,EAAI,EAAG2D,KAAKsC,IAAIlG,EAAQ,EAAI,EAAGlF,KAAKgb,gBAEnEzR,EAAQ2B,YACR3B,EAAQgS,OAAO7U,EAAI4U,EAAQ3U,GAC3B4C,EAAQiS,OAAO9U,EAAIxB,EAAQoW,EAAQ3U,GACnC4C,EAAQkS,iBAAiB/U,EAAIxB,EAAOyB,EAAGD,EAAIxB,EAAOyB,EAAI2U,GACtD/R,EAAQiS,OAAO9U,EAAIxB,EAAOyB,EAAIxB,EAASmW,GACvC/R,EAAQkS,iBAAiB/U,EAAIxB,EAAOyB,EAAIxB,EAAQuB,EAAIxB,EAAQoW,EAAQ3U,EAAIxB,GACxEoE,EAAQiS,OAAO9U,EAAI4U,EAAQ3U,EAAIxB,GAC/BoE,EAAQkS,iBAAiB/U,EAAGC,EAAIxB,EAAQuB,EAAGC,EAAIxB,EAASmW,GACxD/R,EAAQiS,OAAO9U,EAAGC,EAAI2U,GACtB/R,EAAQkS,iBAAiB/U,EAAGC,EAAGD,EAAI4U,EAAQ3U,GAC3C4C,EAAQwG,aAGF+K,EAAAvb,UAAA4U,iBAAV,SAA2B5K,GACnBvJ,KAAKgb,gBACLhb,KAAKib,iBAAiB1R,EAASvJ,KAAK+a,YACpCxR,EAAQ0B,SAGpB6P,EAlIA,CAJArd,EAAA,GAI+ByV,WAAlBjW,EAAA6d,gcCJb,IAAA7H,EAAAxV,EAAA,GACAmC,EAAAnC,EAAA,GAMAie,EAAA,SAAAnK,GAoOI,SAAAmK,EAAmBxd,EAAeyd,QAAA,IAAAA,MAAA,MAAlC,IAAAtW,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OAhOXmH,EAAAuW,SAAU,EACVvW,EAAAwW,SAAWH,EAAMI,aAEjBzW,EAAA0W,YAAa,EAEb1W,EAAA2W,YAAc,EACd3W,EAAA4W,WAAa,EACb5W,EAAA6W,aAAe,EACf7W,EAAA8W,cAAgB,EAEhB9W,EAAAgU,WAAqB,EACrBhU,EAAAiU,YAAsB,EACtBjU,EAAA+W,SAAmB,EAuNvB/W,EAAKsL,OAASgL,IA8FtB,OArU2BhK,EAAA+J,EAAAnK,GAqBvBlT,OAAAC,eAAWod,EAAAnc,UAAA,kBAAX,WACI,OAAOS,KAAKgc,iBAGhB,SAAsBpd,GACdoB,KAAKgc,cAAgBpd,IAIzBoB,KAAKgc,YAAcpd,EAEnBoB,KAAK4E,iDAMTvG,OAAAC,eAAWod,EAAAnc,UAAA,iBAAX,WACI,OAAOS,KAAKic,gBAGhB,SAAqBrd,GACboB,KAAKic,aAAerd,IAIxBoB,KAAKic,WAAard,EAElBoB,KAAK4E,iDAMTvG,OAAAC,eAAWod,EAAAnc,UAAA,mBAAX,WACI,OAAOS,KAAKkc,kBAGhB,SAAuBtd,GACfoB,KAAKkc,eAAiBtd,IAI1BoB,KAAKkc,aAAetd,EAEpBoB,KAAK4E,iDAMTvG,OAAAC,eAAWod,EAAAnc,UAAA,oBAAX,WACI,OAAOS,KAAKmc,mBAGhB,SAAwBvd,GAChBoB,KAAKmc,gBAAkBvd,IAI3BoB,KAAKmc,cAAgBvd,EAErBoB,KAAK4E,iDAOTvG,OAAAC,eAAWod,EAAAnc,UAAA,iBAAX,WACI,OAAOS,KAAK+b,gBAGhB,SAAqBnd,GACboB,KAAK+b,aAAend,IAIxBoB,KAAK+b,WAAand,EAEdA,GAASoB,KAAK4b,SACd5b,KAAKqc,+DAKbhe,OAAAC,eAAWod,EAAAnc,UAAA,eAAX,WACI,OAAOS,KAAK6b,cAGhB,SAAmBjd,GACXoB,KAAK6b,WAAajd,IAItBoB,KAAK6b,SAAWjd,EAEhBoB,KAAK4E,iDAMTvG,OAAAC,eAAWod,EAAAnc,UAAA,gBAaX,WACI,OAAOS,KAAKsc,eAdhB,SAAoB1d,GAApB,IAAAyG,EAAArF,KACIA,KAAKsc,UAAY1d,EACjBoB,KAAK4b,SAAU,EAEX5b,KAAKsc,UAAUpX,MACflF,KAAKuc,iBAELvc,KAAKsc,UAAUE,OAAS,WACpBnX,EAAKkX,mDASTb,EAAAnc,UAAAgd,eAAR,WACIvc,KAAKyc,YAAczc,KAAKsc,UAAUpX,MAClClF,KAAK0c,aAAe1c,KAAKsc,UAAUnX,OACnCnF,KAAK4b,SAAU,EAEX5b,KAAK+b,YACL/b,KAAKqc,6BAGTrc,KAAK4E,gBAMTvG,OAAAC,eAAWod,EAAAnc,UAAA,cAAX,SAAkBX,GAAlB,IAAAyG,EAAArF,KACQA,KAAK2c,UAAY/d,IAIrBoB,KAAK4b,SAAU,EACf5b,KAAK2c,QAAU/d,EAEfoB,KAAKsc,UAAY1N,SAASC,cAAc,OAExC7O,KAAKsc,UAAUE,OAAS,WACpBnX,EAAKkX,kBAEL3d,IACAgB,EAAAmI,MAAM6U,gBAAgBhe,EAAOoB,KAAKsc,WAClCtc,KAAKsc,UAAUO,IAAMje,qCAQ7BP,OAAAC,eAAIod,EAAAnc,UAAA,iBAAJ,WACI,OAAOS,KAAKqZ,gBAEhB,SAAcza,GACNoB,KAAKqZ,aAAeza,IAIxBoB,KAAKqZ,WAAaza,EAClBoB,KAAK4E,iDAOTvG,OAAAC,eAAIod,EAAAnc,UAAA,kBAAJ,WACI,OAAOS,KAAKsZ,iBAEhB,SAAe1a,GACPoB,KAAKsZ,cAAgB1a,IAIzBoB,KAAKsZ,YAAc1a,EACnBoB,KAAK4E,iDAOTvG,OAAAC,eAAIod,EAAAnc,UAAA,cAAJ,WACI,OAAOS,KAAKoc,aAEhB,SAAWxd,GACHoB,KAAKoc,UAAYxd,IAIrBoB,KAAKoc,QAAUxd,EACfoB,KAAK4E,iDAcC8W,EAAAnc,UAAAkF,aAAV,WACI,MAAO,SAIJiX,EAAAnc,UAAA8c,2BAAP,WACSrc,KAAK4b,UAIV5b,KAAKkF,MAAQlF,KAAKsc,UAAUpX,MAAQ,KACpClF,KAAKmF,OAASnF,KAAKsc,UAAUnX,OAAS,OAGnCuW,EAAAnc,UAAAuM,MAAP,SAAavB,EAAwBhB,GAUjC,IAAI7C,EAAGC,EAAGzB,EAAOC,EACjB,GAVAoE,EAAQ2K,QAEJlU,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,gBAIb,GAAhB1D,KAAK8c,OACLpW,EAAI1G,KAAKgc,YACTrV,EAAI3G,KAAKic,WAET/W,EAAQlF,KAAKkc,aAAelc,KAAKkc,aAAelc,KAAKyc,YACrDtX,EAASnF,KAAKmc,cAAgBnc,KAAKmc,cAAgBnc,KAAK0c,iBAEvD,CACD,IAAIK,EAAW/c,KAAKsc,UAAUU,aAAehd,KAAKid,UAC9CC,EAAUld,KAAK8c,OAASC,GAAa,EACrCI,EAAMnd,KAAK8c,OAASC,EAExBrW,EAAI1G,KAAKid,UAAYE,EACrBxW,EAAI3G,KAAKod,WAAaF,EACtBhY,EAAQlF,KAAKid,UACb9X,EAASnF,KAAKod,WAIlB,GADApd,KAAKiK,aAAaV,GACdvJ,KAAKsK,iBAAiBC,EAAehB,IACjCvJ,KAAK4b,QACL,OAAQ5b,KAAK6b,UACT,KAAKH,EAAM2B,aAIX,KAAK3B,EAAMI,aACPvS,EAAQ+T,UAAUtd,KAAKsc,UAAW5V,EAAGC,EAAGzB,EAAOC,EAC3CnF,KAAKI,gBAAgB6F,KAAMjG,KAAKI,gBAAgB8F,IAAKlG,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,QAC1G,MACJ,KAAKuW,EAAM6B,gBACP,IAAIC,EAASxd,KAAKI,gBAAgB8E,MAAQA,EACtCuY,EAASzd,KAAKI,gBAAgB+E,OAASA,EACvCuY,EAAQ5U,KAAKsC,IAAIoS,EAAQC,GACzBE,GAAW3d,KAAKI,gBAAgB8E,MAAQA,EAAQwY,GAAS,EACzDE,GAAW5d,KAAKI,gBAAgB+E,OAASA,EAASuY,GAAS,EAE/DnU,EAAQ+T,UAAUtd,KAAKsc,UAAW5V,EAAGC,EAAGzB,EAAOC,EAC3CnF,KAAKI,gBAAgB6F,KAAO0X,EAAS3d,KAAKI,gBAAgB8F,IAAM0X,EAAS1Y,EAAQwY,EAAOvY,EAASuY,GACrG,MACJ,KAAKhC,EAAMmC,eACPtU,EAAQ+T,UAAUtd,KAAKsc,UAAW5V,EAAGC,EAAGzB,EAAOC,EAC3CnF,KAAKI,gBAAgB6F,KAAMjG,KAAKI,gBAAgB8F,IAAKlG,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,QACtGnF,KAAK+b,YACL/b,KAAKqc,6BAELrc,KAAK+F,OAAS/F,KAAK+F,MAAMM,SACzBrG,KAAK+F,MAAMb,MAAQlF,KAAKkF,MACxBlF,KAAK+F,MAAMZ,OAASnF,KAAKmF,QAM7CoE,EAAQiL,WAKWkH,EAAA2B,aAAe,EAEf3B,EAAAI,aAAe,EAEfJ,EAAA6B,gBAAkB,EAElB7B,EAAAmC,eAAiB,EAC5CnC,EArUA,CAA2BzI,EAAAlT,SAAd9C,EAAAye,4bCPb,IAAA9b,EAAAnC,EAAA,GACAsa,EAAAta,EAAA,GAEAqgB,EAAArgB,EAAA,IACAoC,EAAApC,EAAA,GAgCAsgB,EAAA,SAAAxM,GAoNI,SAAAwM,EAAY7f,EAAcgH,EAAWC,EAAY4B,EAAwBiX,EAAyBC,QAAxE,IAAA/Y,MAAA,QAAW,IAAAC,MAAA,QAAoC,IAAA6Y,OAAA,QAAyB,IAAAC,MAAere,EAAAse,QAAQC,sBAAzH,IAAA9Y,EACIkM,EAAAzT,KAAAkC,KAAM9B,GAAQgH,MAAOA,EAAOC,OAAQA,GAAU4B,EAAOiX,EAAiBC,EAAcre,EAAAwe,OAAOC,qBAAmBre,KAI9G,OAxNIqF,EAAA/D,UAAW,EASZ+D,EAAA2B,eAAiB,IAAI+Q,EAAA7E,UAAU,QAI/B7N,EAAAkI,oBAEAlI,EAAAoI,oBAEApI,EAAAiZ,qBAMAjZ,EAAA+C,gBAAkB,IAAIsJ,MACrBrM,EAAAkZ,eAAgB,EAChBlZ,EAAAmZ,oBAAsB,IAAI5e,EAAA6e,SAAS,EAAG,EAAG,EAAG,GAC5CpZ,EAAAqZ,YAAc,EACdrZ,EAAAsZ,aAAe,EACftZ,EAAAuZ,mBAA6B,EAC7BvZ,EAAAwZ,oBAAqB,EAErBxZ,EAAAyZ,sBAAuB,EACvBzZ,EAAA0Z,aAAe,EAMhB1Z,EAAA2Z,aAAc,GAgLjBjY,EAAQ1B,EAAK4Z,aAEE5Z,EAAK6Z,UAIpB7Z,EAAK8Z,YAAcpY,EAAMqY,YAAaC,qBAEtCha,EAAKia,gBAAkBvY,EAAMwY,+BAA+B9Z,IAAI,SAAC+Z,GAAmB,OAAAna,EAAKoa,aAAaD,KACtGna,EAAKqa,qBAAuB3Y,EAAM4Y,wBAAwBla,IAAI,SAAAma,GACrDva,EAAKwa,kBAIND,EAAKzT,OAASvM,EAAAkgB,mBAAmBC,SACjC1a,EAAKwa,gBAAgBG,gBAAgBJ,EAAKK,OAG9CL,EAAKM,yBAA0B,KAGnC7a,EAAK2B,eAAeoC,MAAM,KAAM/D,GAEhCA,EAAK8a,UAAW,EAEXjb,GAAUC,IACXE,EAAK+a,gBAAkBrZ,EAAMqY,YAAYiB,mBAAmB5a,IAAI,WAAM,OAAAJ,EAAKib,cAC3Ejb,EAAKib,aAGTjb,EAAK6Z,SAASqB,SAAU,OA2fhC,OAhvB4C5O,EAAAoM,EAAAxM,GA6CxClT,OAAAC,eAAWyf,EAAAxe,UAAA,mBAAX,WACI,OAAOS,KAAK+e,kBAGhB,SAAuBngB,GACfA,IAAUoB,KAAK+e,eAInB/e,KAAK+e,aAAengB,EAEpBoB,KAAKsgB,8CAITjiB,OAAAC,eAAWyf,EAAAxe,UAAA,kBAAX,WACI,OAAOS,KAAKsT,iBAGhB,SAAsB1U,GACdoB,KAAKsT,cAAgB1U,IAIzBoB,KAAKsT,YAAc1U,EACnBoB,KAAKgJ,gDAQT3K,OAAAC,eAAWyf,EAAAxe,UAAA,kBAAX,WACI,OAAOS,KAAK0e,iBAGhB,SAAsB9f,GACdoB,KAAK0e,cAAgB9f,IAIzBoB,KAAK0e,YAAc9f,EACnBoB,KAAKgJ,cACLhJ,KAAKgH,eAAeiC,oDAQxB5K,OAAAC,eAAWyf,EAAAxe,UAAA,mBAAX,WACI,OAAOS,KAAK2e,kBAGhB,SAAuB/f,GACfoB,KAAK2e,eAAiB/f,IAI1BoB,KAAK2e,aAAe/f,EACpBoB,KAAKgJ,cACLhJ,KAAKgH,eAAeiC,oDAOxB5K,OAAAC,eAAWyf,EAAAxe,UAAA,wBAAX,WACI,OAAOS,KAAK4e,uBAGhB,SAA4BhgB,GACpBoB,KAAK4e,oBAAsBhgB,IAI/BoB,KAAK4e,kBAAoBhgB,EACzBoB,KAAKgJ,cACLhJ,KAAKgH,eAAeiC,oDAOxB5K,OAAAC,eAAWyf,EAAAxe,UAAA,yBAAX,WACI,OAAOS,KAAK6e,wBAGhB,SAA6BjgB,GACrBoB,KAAK6e,qBAAuBjgB,IAIhCoB,KAAK6e,mBAAqBjgB,EAC1BoB,KAAKsgB,8CAMTjiB,OAAAC,eAAWyf,EAAAxe,UAAA,aAAX,WACI,OAAOS,KAAKwgB,iDAMhBniB,OAAAC,eAAWyf,EAAAxe,UAAA,qBAAX,WACI,OAAOS,KAAKgH,gDAMhB3I,OAAAC,eAAWyf,EAAAxe,UAAA,sBAAX,WACI,OAAOS,KAAK6f,qBAGhB,SAA0B9N,GAClB/R,KAAK6f,iBAAmB9N,IAIxB/R,KAAK6f,iBACL7f,KAAK6f,gBAAgBY,SAGrB1O,GACAA,EAAQ2O,UAGZ1gB,KAAK6f,gBAAkB9N,oCAM3B1T,OAAAC,eAAWyf,EAAAxe,UAAA,oBAAX,WACI,OAAKS,KAAK2gB,QAGD3gB,KAAK2gB,MAAMC,kBAGxB,SAAwBhiB,GACfoB,KAAK2gB,OAGN3gB,KAAK2gB,MAAMC,gBAAkBhiB,IAGjCoB,KAAK2gB,MAAMC,cAAgBhiB,oCAqDxBmf,EAAAxe,UAAAshB,qBAAP,SAA4BC,EAAkC1a,GACrDA,IACDA,EAAYpG,KAAKgH,gBAGrB8Z,EAAK1a,GAEL,IAAkB,IAAAqM,EAAA,EAAAC,EAAAtM,EAAUoN,SAAVf,EAAAC,EAAA3B,OAAA0B,IAAoB,CAAjC,IAAIgB,EAAKf,EAAAD,GACAgB,EAAOD,SACbxT,KAAK6gB,qBAAqBC,EAAkBrN,GAGhDqN,EAAKrN,KAONsK,EAAAxe,UAAAyJ,YAAP,WACIhJ,KAAKsB,UAAW,EAEhBtB,KAAK6gB,qBAAqB,SAAC9O,GACnBA,EAAQgP,yBACRhP,EAAQ3M,qBAUb2Y,EAAAxe,UAAAyhB,YAAP,WACI,OAAO,IAAIlD,EAAAmD,MAAMjhB,OAQd+d,EAAAxe,UAAAyS,WAAP,SAAkBD,GAGd,OAFA/R,KAAKgH,eAAegL,WAAWD,GAExB/R,MAQJ+d,EAAAxe,UAAA4O,cAAP,SAAqB4D,GAEjB,OADA/R,KAAKgH,eAAemH,cAAc4D,GAC3B/R,MAMJ+d,EAAAxe,UAAA0O,QAAP,WACI,IAAIlH,EAAQ/G,KAAKif,WAEZlY,IAIL/G,KAAKmf,YAAc,KAEnBpY,EAAMwY,+BAA+Bha,OAAOvF,KAAKsf,iBAE7Ctf,KAAKogB,iBACLrZ,EAAMqY,YAAYiB,mBAAmB9a,OAAOvF,KAAKogB,iBAGjDpgB,KAAKkhB,sBACLna,EAAMoa,uBAAuB5b,OAAOvF,KAAKkhB,sBAGzClhB,KAAKohB,kBACLra,EAAMsa,oBAAoB9b,OAAOvF,KAAKohB,kBAGtCphB,KAAK0f,sBACL3Y,EAAM4Y,wBAAwBpa,OAAOvF,KAAK0f,sBAG1C1f,KAAKshB,2BACLva,EAAMqY,YAAYmC,6BAA6Bhc,OAAOvF,KAAKshB,2BAG3DthB,KAAKwgB,kBACLxgB,KAAKwgB,gBAAgBgB,QAAU,KAC/BxhB,KAAKwgB,gBAAgBvS,UACrBjO,KAAKwgB,gBAAkB,MAG3BxgB,KAAKgH,eAAeiH,UAEpBsD,EAAAhS,UAAM0O,QAAOnQ,KAAAkC,QAGT+d,EAAAxe,UAAA+gB,UAAR,WACI,IAAIvZ,EAAQ/G,KAAKif,WAEjB,GAAKlY,EAAL,CAKA,IAAI0a,EAAS1a,EAAMqY,YACfsC,EAAc1hB,KAAKsQ,UACnBqR,EAAcF,EAAOG,iBAAmB5hB,KAAK+e,aAC7C8C,EAAeJ,EAAOK,kBAAoB9hB,KAAK+e,aAE/C/e,KAAK6e,qBACD7e,KAAK0e,aACLmD,EAAgBA,EAAe7hB,KAAK0e,YAAeiD,EACnDA,EAAc3hB,KAAK0e,aACZ1e,KAAK2e,eACZgD,EAAeA,EAAc3hB,KAAK2e,aAAgBkD,EAClDA,EAAe7hB,KAAK2e,eAIxB+C,EAAYxc,QAAUyc,GAAeD,EAAYvc,SAAW0c,IAC5D7hB,KAAK+hB,QAAQJ,EAAaE,GAE1B7hB,KAAKgJ,eAEDhJ,KAAK0e,aAAe1e,KAAK2e,eACzB3e,KAAKgH,eAAeiC,qBAMzB8U,EAAAxe,UAAA+H,mBAAP,SAA0BP,GACtB,IAAI0a,EAAS1a,EAAMqY,YACnB,OAAOpf,KAAKwe,oBAAoBwD,SAASP,EAAOG,iBAAkBH,EAAOK,oBAStE/D,EAAAxe,UAAA0iB,qBAAP,SAA4Bnb,EAAmBob,GAC3C,IAAInb,EAAQ/G,KAAKif,WAEjB,IAAKlY,EACD,OAAOnH,EAAA6C,QAAQC,OAGnB,IAAI2E,EAAiBrH,KAAKsH,mBAAmBP,GACzCQ,EAAoB3H,EAAA4H,QAAQC,QAAQX,EAAUob,EAAanb,EAAMY,qBAAsBN,GAI3F,OAFAE,EAAkB4S,aAAana,KAAKmiB,aAE7B,IAAIviB,EAAA6C,QAAQ8E,EAAkBb,EAAGa,EAAkBZ,IAGtDoX,EAAAxe,UAAAkgB,aAAR,SAAqBD,GACjB,IAAIxf,KAAKwgB,iBACuD,IAAvDhB,EAAO4C,UAAYpiB,KAAKwgB,gBAAgB4B,WADjD,CAMA,GAAIpiB,KAAKue,eAAiBve,KAAKoI,gBAAgB2I,OAAQ,CACnD,IAAIhK,EAAQ/G,KAAKif,WAEjB,IAAKlY,EACD,OAKJ,IAFA,IAAIM,EAAiBrH,KAAKsH,mBAAmBP,GAEzB0L,EAAA,EAAAC,EAAA1S,KAAKoI,gBAALqK,EAAAC,EAAA3B,OAAA0B,IAAsB,CAArC,IAAIV,EAAOW,EAAAD,GACZ,GAAKV,EAAQzF,UAAb,CAIA,IAAIpE,EAAO6J,EAAQzJ,YAEnB,GAAKJ,IAAQA,EAAKma,aAAlB,CAQA,IAAIvb,EAAWoB,EAAKoa,kBAAkBC,eAAeC,OACjDjb,EAAoB3H,EAAA4H,QAAQC,QAAQX,EAAUoB,EAAKua,iBAAkB1b,EAAMY,qBAAsBN,GAEjGE,EAAkBM,EAAI,GAAKN,EAAkBM,EAAI,EACjDkK,EAAQjK,eAAgB,GAG5BiK,EAAQjK,eAAgB,EAExBP,EAAkB4S,aAAana,KAAKmiB,aACpCpQ,EAAQnK,yBAAyBL,SAjB7B3H,EAAAmI,MAAMqR,aAAa,WACfrH,EAAQ9J,aAAa,WAoBhCjI,KAAKsB,UAAatB,KAAKgH,eAAe0b,WAG3C1iB,KAAKsB,UAAW,EAEhBtB,KAAK2iB,UACL3iB,KAAK4iB,QAAO,EAAM5iB,KAAKgf,gBAGnBjB,EAAAxe,UAAAojB,QAAR,WACI,IAAIjB,EAAc1hB,KAAKsQ,UACnBqR,EAAcD,EAAYxc,MAC1B2c,EAAeH,EAAYvc,OAG3BoE,EAAUvJ,KAAK8X,aACnBvO,EAAQsZ,UAAU,EAAG,EAAGlB,EAAaE,GACjC7hB,KAAKsT,cACL/J,EAAQ2K,OACR3K,EAAQY,UAAYnK,KAAKsT,YACzB/J,EAAQ0K,SAAS,EAAG,EAAG0N,EAAaE,GACpCtY,EAAQiL,WAIZjL,EAAQW,KAAO,aACfX,EAAQwM,YAAc,QACtB,IAAI+M,EAAU,IAAIjjB,EAAAQ,QAAQ,EAAG,EAAGshB,EAAaE,GAC7C7hB,KAAKgH,eAAe8E,MAAMgX,EAASvZ,IAIhCwU,EAAAxe,UAAAkV,cAAP,SAAqBsO,GACb/iB,KAAKmf,cACLnf,KAAKmf,YAAYpQ,MAAMgU,OAASA,IAIhChF,EAAAxe,UAAAyjB,WAAR,SAAmBtc,EAAWC,EAAWwF,EAAcC,EAAmBC,GACtE,IAAItF,EAAQ/G,KAAKif,WAEjB,GAAKlY,EAAL,CAIA,IAAI0a,EAAS1a,EAAMqY,YACfsC,EAAc1hB,KAAKsQ,UAEnBtQ,KAAKue,gBACL7X,GAASgb,EAAYxc,MAAQuc,EAAOG,iBACpCjb,GAAS+a,EAAYvc,OAASsc,EAAOK,mBAGrC9hB,KAAKse,kBAAkBlS,GACvBpM,KAAKse,kBAAkBlS,GAAWG,oBAAoBJ,EAAMzF,EAAGC,EAAGyF,EAAWC,IAI5ErM,KAAKgH,eAAekF,gBAAgBxF,EAAGC,EAAGwF,EAAMC,EAAWC,KAC5DrM,KAAKyU,cAAc,IACftI,IAASvM,EAAAwN,kBAAkBC,cACvBrN,KAAKuN,iBAAiBnB,IACtBpM,KAAKuN,iBAAiBnB,GAAWQ,cAAc5M,KAAKuN,iBAAiBnB,WAGlEpM,KAAKuN,iBAAiBnB,KAIrCpM,KAAKijB,kBAIFlF,EAAAxe,UAAA2jB,kCAAP,SAAyCC,EAAwCpR,GAC7E,IAAK,IAAI3F,KAAa+W,EAAM,CACxB,GAAKA,EAAK3jB,eAAe4M,GAIH+W,EAAK/W,KACH2F,UACboR,EAAK/W,KAMjB2R,EAAAxe,UAAAwU,0BAAP,SAAiChC,GAC7B/R,KAAKkjB,kCAAkCljB,KAAKyN,iBAAkBsE,GAC9D/R,KAAKkjB,kCAAkCljB,KAAKuN,iBAAkBwE,IAI3DgM,EAAAxe,UAAA6jB,OAAP,eAAA/d,EAAArF,KACQ+G,EAAQ/G,KAAKif,WACZlY,IAIL/G,KAAKkhB,qBAAuBna,EAAMoa,uBAAuB1b,IAAI,SAAC4d,EAAIC,GAC9D,IAAIvc,EAAOwc,kBAAkCF,EAAQ,MAAGjX,aAIpDiX,EAAGlX,OAASvM,EAAAwN,kBAAkBC,aAC3BgW,EAAGlX,OAASvM,EAAAwN,kBAAkBO,WAC9B0V,EAAGlX,OAASvM,EAAAwN,kBAAkBI,cAIhCzG,EAAL,CAIA,IAAIyY,EAASzY,EAAMyc,wBAA0Bzc,EAAM0c,aAEnD,GAAKjE,EAAL,CAGA,IAAIiC,EAAS1a,EAAMqY,YACfsE,EAAWlE,EAAOkE,SAClBhd,GAAKK,EAAM4c,SAAWlC,EAAOmC,0BAA4BF,EAAShd,EAAI+a,EAAOG,kBAAoB8B,EAASxe,MAC1GyB,GAAKI,EAAM8c,SAAWpC,EAAOmC,0BAA4BF,EAAS/c,EAAI8a,EAAOK,mBAAqB4B,EAASve,OAE/GE,EAAK4G,qBAAsB,EAE3B5G,EAAK2d,WAAWtc,EAAGC,EAAG0c,EAAGlX,KAAOkX,EAAGpD,MAAuB7T,WAAa,EAAGiX,EAAGpD,MAAM6D,QAGhFze,EAAK4G,sBACJoX,EAAGnD,wBAA0B7a,EAAK4G,yBAI1CjM,KAAK+jB,sBAAsBhd,KAQxBgX,EAAAxe,UAAAykB,aAAP,SAAoB9b,EAAoB+b,GAAxC,IAAA5e,EAAArF,UAAwC,IAAAikB,OAAA,GACpC,IAAIld,EAAQ/G,KAAKif,WACZlY,IAGL/G,KAAKohB,iBAAmBra,EAAMsa,oBAAoB5b,IAAI,SAAC4d,EAAIC,GACvD,GAAID,EAAGlX,OAASvM,EAAAwN,kBAAkBC,aAC3BgW,EAAGlX,OAASvM,EAAAwN,kBAAkBO,WAC9B0V,EAAGlX,OAASvM,EAAAwN,kBAAkBI,YAFrC,CAKA,IAAIpB,EAAaiX,EAAGpD,MAAuB7T,WAAa,EACxD,GAAIiX,EAAGa,UAAYb,EAAGa,SAASC,KAAOd,EAAGa,SAASE,aAAelc,EAAM,CACnE,IAAImc,EAAKhB,EAAGa,SAASI,wBAErB,GAAID,EAAI,CACJ,IAAIE,EAAOlf,EAAKiL,UAEhBjL,EAAK2d,WAAWqB,EAAG3d,EAAI6d,EAAKrf,OAAQ,EAAMmf,EAAG1d,GAAK4d,EAAKpf,OAAQke,EAAGlX,KAAMC,EAAWiX,EAAGpD,MAAM6D,cAEzFT,EAAGlX,OAASvM,EAAAwN,kBAAkBO,WACjCtI,EAAKoI,iBAAiBrB,IACtB/G,EAAKoI,iBAAiBrB,GAAWc,gBAAgBd,UAE9C/G,EAAKoI,iBAAiBrB,GAEzB/G,EAAKmf,iBACAnf,EAAKmf,eAAeC,UAAUrY,KAC/B/G,EAAKmf,eAAiB,QAGvBnB,EAAGlX,OAASvM,EAAAwN,kBAAkBC,cACjChI,EAAKkI,iBAAiBnB,IACtB/G,EAAKkI,iBAAiBnB,GAAWQ,cAAcvH,EAAKkI,iBAAiBnB,WAElE/G,EAAKkI,iBAAiBnB,OAIrClE,EAAKwc,wBAA0BT,EAC/BjkB,KAAK+jB,sBAAsBhd,KAOxBgX,EAAAxe,UAAAolB,mBAAP,SAA0B5S,GACtB/R,KAAKwkB,eAAiBzS,EACtB/R,KAAK0N,mBAA0BqE,EAC/B/R,KAAK8e,sBAAuB,GAGxBf,EAAAxe,UAAA0jB,aAAR,WACI,GAAIjjB,KAAK8e,qBAGL,OAFA9e,KAAK8e,sBAAuB,OAC5B9e,KAAK0N,mBAA0B1N,KAAK6f,iBAKxC,GAAI7f,KAAK6f,iBACD7f,KAAK6f,kBAA0B7f,KAAK0N,mBAAqB,CACzD,GAAI1N,KAAK0N,mBAAmBlK,iBACxB,OAGJxD,KAAKwkB,eAAiB,OAK1BzG,EAAAxe,UAAAwkB,sBAAR,SAA8Bhd,GAA9B,IAAA1B,EAAArF,KACIA,KAAKshB,0BAA4Bva,EAAMqY,YAAYmC,6BAA6B9b,IAAI,SAACmf,GAC7Evf,EAAKkI,iBAAiBqX,EAAaxY,YACnC/G,EAAKkI,iBAAiBqX,EAAaxY,WAAWQ,cAAcvH,EAAKkI,iBAAiBqX,EAAaxY,mBAE5F/G,EAAKkI,iBAAiBqX,EAAaxY,WAEtC/G,EAAKoI,iBAAiBmX,EAAaxY,YACnC/G,EAAKoI,iBAAiBmX,EAAaxY,WAAWc,yBAE3C7H,EAAKoI,iBAAiBmX,EAAaxY,cAcpC2R,EAAA8G,cAAd,SAA4B3c,EAAoBhD,EAAcC,EAAe8e,EAA2Ba,QAAxD,IAAA5f,MAAA,WAAc,IAAAC,MAAA,WAAe,IAAA8e,OAAA,QAA2B,IAAAa,OAAA,GACpG,IAAIte,EAAS,IAAIuX,EAAuB7V,EAAKhK,KAAO,0BAA2BgH,EAAOC,EAAQ+C,EAAK+W,YAAY,EAAMrf,EAAAse,QAAQ6G,wBAEzHC,EAAW,IAAIplB,EAAAqlB,iBAAiB,iCAAkC/c,EAAK+W,YAkB3E,OAjBA+F,EAASE,iBAAkB,EAC3BF,EAASG,aAAevlB,EAAAwlB,OAAOC,QAC/BL,EAASM,cAAgB1lB,EAAAwlB,OAAOC,QAE5BP,GACAE,EAASO,eAAiB/e,EAC1Bwe,EAASQ,gBAAkBhf,EAC3BA,EAAO2Z,UAAW,IAElB6E,EAASQ,gBAAkBhf,EAC3Bwe,EAASS,eAAiBjf,GAG9B0B,EAAK8c,SAAWA,EAEhBxe,EAAOwd,aAAa9b,EAAM+b,GAEnBzd,GAeGuX,EAAA2H,mBAAd,SAAiCxnB,EAAcynB,EAA4B5e,EAA+B6e,QAA3D,IAAAD,OAAA,QAA4B,IAAA5e,MAAA,WAA+B,IAAA6e,MAAWhmB,EAAAse,QAAQ2H,uBACzH,IAAIrf,EAAS,IAAIuX,EAAuB7f,EAAM,EAAG,EAAG6I,GAAO,EAAO6e,GAG9DjF,EAAQ,IAAI/gB,EAAAkmB,MAAM5nB,EAAO,SAAU,KAAM6I,GAAQ4e,GASrD,OARAhF,EAAMa,QAAUhb,EAEhBA,EAAOga,gBAAkBG,EACzBna,EAAO+X,eAAgB,EAGvB/X,EAAO4c,SAEA5c,GAEfuX,EAhvBA,CAA4Cne,EAAAmmB,gBAA/B9oB,EAAA8gB,wGCpCb,IAAAne,EAAAnC,EAAA,GAEAuoB,EAAAvoB,EAAA,IAMAuV,EAAA,WAuLI,SAAAA,EAEW9U,GAAA8B,KAAA9B,OArLH8B,KAAAgD,WAAa,EACbhD,KAAAiD,aAAe,EACfjD,KAAAmD,mBACAnD,KAAA6C,YAAa,EAgDd7C,KAAAgE,wBAA0B,IAAIpE,EAAAqE,WAK9BjE,KAAAkE,uBAAyB,IAAItE,EAAAqE,WAK7BjE,KAAAmE,wBAA0B,IAAIvE,EAAAqE,WAK9BjE,KAAAoE,sBAAwB,IAAIxE,EAAAqE,WAK5BjE,KAAAqE,yBAA2B,IAAIzE,EAAAqE,WAK/BjE,KAAAsE,yBAA2B,IAAI1E,EAAAqE,WAQ9BjE,KAAAimB,WAAa,IAAIvU,MAwU7B,OAtZIrT,OAAAC,eAAW0U,EAAAzT,UAAA,gBAAX,WACI,OAAKS,KAAKkmB,MAIHlmB,KAAKkmB,MAAMpf,SAHPlH,EAAA4H,QAAQ9E,YAMvB,SAAoB9D,GACXoB,KAAKkmB,QAIVlmB,KAAKkmB,MAAMpf,SAAWlI,oCAI1BP,OAAAC,eAAW0U,EAAAzT,UAAA,eAAX,WACI,OAAKS,KAAKkmB,MAIHlmB,KAAKkmB,MAAMC,QAHP,IAAIvmB,EAAA4H,QAAQ,EAAG,EAAG,QAMjC,SAAmB5I,GACVoB,KAAKkmB,QAIVlmB,KAAKkmB,MAAMC,QAAUvnB,oCAsDzBP,OAAAC,eAAW0U,EAAAzT,UAAA,iBAAX,WACI,OAAOS,KAAKimB,4CASTjT,EAAAzT,UAAA6mB,YAAP,SAAmBC,GAAnB,IAAAhhB,EAAArF,KAGI,IAAe,IAFHA,KAAKimB,WAAW5d,QAAQge,GAGhC,OAAOrmB,KAGXqmB,EAASC,OACT,IAAIvf,EAAQ/G,KAAK+E,MAAMgC,MAWvB,OAVIA,EAAMwf,UAENxf,EAAMyf,uBAAuBC,QAAQ,WACjCJ,EAASjD,OAAO/d,KAGpBghB,EAASjD,OAAOpjB,MAEpBA,KAAKimB,WAAWzd,KAAK6d,GAEdrmB,MASJgT,EAAAzT,UAAAmnB,eAAP,SAAsBL,GAClB,IAAIle,EAAQnI,KAAKimB,WAAW5d,QAAQge,GAEpC,OAAe,IAAXle,EACOnI,MAGXA,KAAKimB,WAAW9d,GAAOwe,SACvB3mB,KAAKimB,WAAW1d,OAAOJ,EAAO,GAEvBnI,OASJgT,EAAAzT,UAAAqnB,kBAAP,SAAyB1oB,GACrB,IAAqB,IAAAuU,EAAA,EAAAC,EAAA1S,KAAKimB,WAALxT,EAAAC,EAAA3B,OAAA0B,IAAiB,CAAjC,IAAI4T,EAAQ3T,EAAAD,GACb,GAAI4T,EAASnoB,OAASA,EAClB,OAAOmoB,EAIf,OAAO,MAIXhoB,OAAAC,eAAW0U,EAAAzT,UAAA,iBAAX,WACI,OAAOS,KAAK6C,gBAGhB,SAAqBjE,GACjB,GAAIoB,KAAK6C,aAAejE,EAAxB,CAIAoB,KAAK6C,WAAajE,EAElB,IAAIsJ,EAAOlI,KAAKkI,KACZA,GACAA,EAAK2e,WAAWjoB,qCAgBxBP,OAAAC,eAAW0U,EAAAzT,UAAA,gBAAX,WACI,OAAOS,KAAKyE,gDAGNuO,EAAAzT,UAAAkF,aAAV,WACI,MAAO,aAMXpG,OAAAC,eAAW0U,EAAAzT,UAAA,YAAX,WACI,OAAOS,KAAKkmB,uCAMhB7nB,OAAAC,eAAW0U,EAAAzT,UAAA,YAAX,WACI,OAAIS,KAAKkmB,iBAAiBtmB,EAAAknB,aACf9mB,KAAKkmB,MAGT,sCAQJlT,EAAAzT,UAAAwnB,oBAAP,SAA2B3U,GAIvB,OAHIpS,KAAKkmB,QACLlmB,KAAKkmB,MAAM7f,OAAS+L,GAEjBpS,MAIJgT,EAAAzT,UAAA2S,aAAP,SAAoBnL,GAChB,IAAK/G,KAAKkmB,MAAO,CAGb,GAFAlmB,KAAKkmB,MAAQlmB,KAAKsS,YAAYvL,IAEzB/G,KAAKoS,KACN,OAEJpS,KAAKkmB,MAAOc,SAAWhnB,KACvBA,KAAKkmB,MAAOpf,SAAW9G,KAAK8G,SAC5B9G,KAAKkmB,MAAOC,QAAUnmB,KAAKmmB,QAE3B,IAAIje,EAAOlI,KAAKkI,KACZA,IACAA,EAAK+e,YAAa,EAElBjnB,KAAKknB,gBAAgBhf,MAWvB8K,EAAAzT,UAAA+S,YAAV,SAAsBvL,GAElB,OAAO,MAODiM,EAAAzT,UAAA2nB,gBAAV,SAA0Bhf,GACtBA,EAAK8c,SAAW,MAMbhS,EAAAzT,UAAAiN,eAAP,SAAsBC,EAAmBC,GACrC1M,KAAKgE,wBAAwB+G,gBAAgB2B,GAAc,EAAGD,EAAQzM,OAInEgT,EAAAzT,UAAAoN,gBAAP,SAAuBF,GACnB,QAAIzM,KAAKiD,YAAc,MAIG,IAAtBjD,KAAKiD,cACLjD,KAAKiD,YAAc,GAGvBjD,KAAKiD,cAELjD,KAAKsE,yBAAyByG,gBAAgB/K,MAAO,EAAGyM,EAAQzM,MAE5DA,KAAKmnB,uBACLnnB,KAAKmnB,yBAGF,IAIJnU,EAAAzT,UAAAqN,cAAP,SAAqBH,GACjBzM,KAAKiD,YAAc,EAEnBjD,KAAKkE,uBAAuB6G,gBAAgB/K,MAAO,EAAGyM,EAAQzM,MAE1DA,KAAKonB,qBACLpnB,KAAKonB,uBAKNpU,EAAAzT,UAAAsN,eAAP,SAAsBJ,EAAmBC,EAAsBN,EAAmBC,GAC9E,OAAwB,IAApBrM,KAAKgD,aAIThD,KAAKgD,aAELhD,KAAKmD,gBAAgBiJ,IAAa,EAElCpM,KAAKmE,wBAAwB4G,gBAAgB,IAAIib,EAAAqB,gBAAgB3a,EAAaL,IAAe,EAAGI,EAAQzM,MAEpGA,KAAKsnB,sBACLtnB,KAAKsnB,wBAGF,IAIJtU,EAAAzT,UAAAwN,aAAP,SAAoBN,EAAmBC,EAAsBN,EAAmBC,EAAqBW,GACjGhN,KAAKgD,WAAa,SAEXhD,KAAKmD,gBAAgBiJ,GAExBY,IAAgBhN,KAAKiD,YAAc,IAA2B,IAAtBjD,KAAKiD,cAC7CjD,KAAKqE,yBAAyB0G,gBAAgB,IAAIib,EAAAqB,gBAAgB3a,EAAaL,IAAe,EAAGI,EAAQzM,MAE7GA,KAAKoE,sBAAsB2G,gBAAgB,IAAIib,EAAAqB,gBAAgB3a,EAAaL,IAAe,EAAGI,EAAQzM,MAElGA,KAAKunB,oBACLvnB,KAAKunB,sBAKNvU,EAAAzT,UAAAioB,eAAP,SAAsBpb,GAClB,QADkB,IAAAA,MAAA,MACA,OAAdA,EACApM,KAAK+M,aAAa/M,KAAMJ,EAAA4H,QAAQ9E,OAAQ0J,EAAW,GAAG,QAEtD,IAAK,IAAIlN,KAAOc,KAAKmD,gBACjBnD,KAAK+M,aAAa/M,KAAMJ,EAAA4H,QAAQ9E,QAASxD,EAAe,GAAG,IAMhE8T,EAAAzT,UAAAgN,oBAAP,SAA2BJ,EAAcsb,EAAsBrb,EAAmBC,GAC9E,GAAIF,IAASvM,EAAAwN,kBAAkBC,YAAa,CACxCrN,KAAKwM,eAAexM,KAAMynB,GAE1B,IAAIna,EAAsBtN,KAAK+E,MAAMwI,iBAAiBnB,GAUtD,OATIkB,GAAuBA,IAAwBtN,MAC/CsN,EAAoBV,cAAc5M,MAGlCsN,IAAwBtN,MACxBA,KAAK2M,gBAAgB3M,MAGzBA,KAAK+E,MAAMwI,iBAAiBnB,GAAapM,MAClC,EAGX,OAAImM,IAASvM,EAAAwN,kBAAkBI,aAC3BxN,KAAK6M,eAAe7M,KAAMynB,EAAarb,EAAWC,GAClDrM,KAAK+E,MAAM0I,iBAAiBrB,GAAapM,KACzCA,KAAK+E,MAAM2I,mBAAqB1N,MACzB,GAGPmM,IAASvM,EAAAwN,kBAAkBO,YACvB3N,KAAK+E,MAAM0I,iBAAiBrB,IAC5BpM,KAAK+E,MAAM0I,iBAAiBrB,GAAWW,aAAa/M,KAAMynB,EAAarb,EAAWC,GAAa,UAE5FrM,KAAK+E,MAAM0I,iBAAiBrB,IAC5B,IAOR4G,EAAAzT,UAAAiT,aAAP,WACQxS,KAAKkmB,QACLlmB,KAAKkmB,MAAMjY,UACXjO,KAAKkmB,MAAQ,OAOdlT,EAAAzT,UAAA0O,QAAP,WACIjO,KAAKmE,wBAAwB+J,QAC7BlO,KAAKsE,yBAAyB4J,QAC9BlO,KAAKgE,wBAAwBkK,QAC7BlO,KAAKkE,uBAAuBgK,QAC5BlO,KAAKoE,sBAAsB8J,QAC3BlO,KAAKqE,yBAAyB6J,QAE9BlO,KAAKwS,eAGL,IAAqB,IAAAC,EAAA,EAAAC,EAAA1S,KAAKimB,WAALxT,EAAAC,EAAA3B,OAAA0B,IAAiB,CAArBC,EAAAD,GACJkU,WAGrB3T,EAhaA,GAAa/V,EAAA+V,gcCRb,IAAA0U,EAAAjqB,EAAA,IACAmC,EAAAnC,EAAA,GACAkqB,EAAAlqB,EAAA,IAMAmqB,EAAA,SAAArW,GAwDI,SAAAqW,EAAY1pB,GAAZ,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YApDPqF,EAAAwiB,mBAAqB,IACrBxiB,EAAAyiB,mBAAqB,EAuDzBziB,EAAK8hB,sBAAwB,WACpB9hB,EAAK6C,OAGS7C,EAAK0iB,iBAAkBC,cAAgBpoB,EAAAwlB,OAAO6C,QAGrE5iB,EAAK+hB,oBAAsB,WACJ/hB,EAAK0iB,iBAAkBC,cAAgBpoB,EAAAwlB,OAAOC,SAGrEhgB,EAAKiiB,qBAAuB,WACnBjiB,EAAK6C,MAIV7C,EAAK6C,KAAKie,QAAQhM,aAAa,MAGnC9U,EAAKkiB,mBAAqB,WACjBliB,EAAK6C,MAIV7C,EAAK6C,KAAKie,QAAQhM,aAAa,EAAM,QAoFjD,OAzK8BxI,EAAAiW,EAAArW,GAW1BlT,OAAAC,eAAWspB,EAAAroB,UAAA,yBAAX,WACI,OAAOS,KAAK6nB,wBAGhB,SAA6BjpB,GACrBoB,KAAK6nB,qBAAuBjpB,IAIhCoB,KAAK6nB,mBAAqBjpB,EAC1BoB,KAAKkoB,kDAMT7pB,OAAAC,eAAWspB,EAAAroB,UAAA,yBAAX,WACI,OAAOS,KAAK8nB,wBAGhB,SAA6BlpB,GACrBoB,KAAK8nB,qBAAuBlpB,IAIhCoB,KAAK8nB,mBAAqBlpB,EAC1BoB,KAAKkoB,kDAGCN,EAAAroB,UAAA4oB,sBAAV,WACQnoB,KAAKooB,iBACLpoB,KAAKooB,eAAena,UACpBjO,KAAKooB,eAAiB,OAIpBR,EAAAroB,UAAA2oB,cAAV,WACIloB,KAAKmoB,wBACLnoB,KAAKqoB,QAAUroB,KAAKsoB,UA2CxBjqB,OAAAC,eAAWspB,EAAAroB,UAAA,eAAX,WACI,OAAOS,KAAKsoB,cAGhB,SAAmB1pB,GACfoB,KAAKsoB,SAAW1pB,EAEXoB,KAAK+E,OAAU/E,KAAK+E,MAAMkN,eAI1BjS,KAAKooB,iBACNpoB,KAAKooB,eAAiB,IAAIT,EAAA5J,uBAAuB,SAAU/d,KAAK6nB,mBAAoB7nB,KAAK6nB,mBAAoB7nB,KAAK+E,MAAMkN,aAAaE,mBAAmB,EAAMvS,EAAAse,QAAQ6G,wBACtK/kB,KAAKooB,eAAeG,cAAcC,OAASxoB,KAAK8nB,mBAChD9nB,KAAKooB,eAAeG,cAAcE,OAASzoB,KAAK8nB,mBAChD9nB,KAAKooB,eAAepJ,aAAc,GAGtChf,KAAKooB,eAAepW,WAAWpT,GAE/BoB,KAAK0oB,aAAa1oB,KAAKooB,kDAQjBR,EAAAroB,UAAAmpB,aAAV,SAAuBC,GACb3oB,KAAK+nB,iBAAkBvC,gBAAkBmD,GAGzCf,EAAAroB,UAAAkF,aAAV,WACI,MAAO,YAIDmjB,EAAAroB,UAAA+S,YAAV,SAAsBvL,GAGlB,IAFA,IAAI6hB,EAAS,IAAIlX,MAAM,GAEd/T,EAAI,EAAGA,EAAI,EAAGA,IACnBirB,EAAOjrB,GAAK,IAAIiC,EAAAipB,QAAQ,EAAG,EAAG,EAAG,GAWrC,OATAD,EAAO,GAAK,IAAIhpB,EAAAipB,QAAQ,EAAG,EAAG,EAAG,GAEtBjpB,EAAAkpB,YAAYC,UAAU/oB,KAAK9B,KAAO,aACzCgH,MAAO,EACPC,OAAQ,EACR6jB,MAAO,IACPJ,OAAQA,GACT7hB,IAKG6gB,EAAAroB,UAAA2nB,gBAAV,SAA0Bhf,GACtB,IAAI8c,EAAW,IAAIplB,EAAAqlB,iBAAiBjlB,KAAK9B,KAAO,WAAYgK,EAAK+W,YACjE+F,EAASM,cAAgB1lB,EAAAwlB,OAAOC,QAEhCnd,EAAK8c,SAAWA,EAChBhlB,KAAK+nB,iBAAmB/C,EAExBhlB,KAAKkoB,iBAMFN,EAAAroB,UAAA0O,QAAP,WACIsD,EAAAhS,UAAM0O,QAAOnQ,KAAAkC,MAEbA,KAAKmoB,wBAEDnoB,KAAK+nB,kBACL/nB,KAAK+nB,iBAAiB9Z,WAGlC2Z,EAzKA,CAA8BF,EAAAuB,kBAAjBhsB,EAAA2qB,wJCRb/M,EAAApd,EAAA,KACAod,EAAApd,EAAA,ybCDA,IAAAyrB,EAAAzrB,EAAA,IACAwV,EAAAxV,EAAA,GACA0rB,EAAA1rB,EAAA,GACA2rB,EAAA3rB,EAAA,IAMA4rB,EAAA,SAAA9X,GAsBI,SAAA8X,EAAmBnrB,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OAGfmH,EAAKikB,UAAY,EACjBjkB,EAAK9B,kBAAmB,EAExB8B,EAAK8hB,sBAAwB,WACzB9hB,EAAKgF,OAAS,IAGlBhF,EAAK+hB,oBAAsB,WACvB/hB,EAAKgF,OAAS,IAGlBhF,EAAKiiB,qBAAuB,WACxBjiB,EAAKmjB,QAAU,IACfnjB,EAAKojB,QAAU,KAGnBpjB,EAAKkiB,mBAAqB,WACtBliB,EAAKmjB,QAAU,IACfnjB,EAAKojB,QAAU,OA4J3B,OAvM4B9W,EAAA0X,EAAA9X,GA+Cd8X,EAAA9pB,UAAAkF,aAAV,WACI,MAAO,UAKJ4kB,EAAA9pB,UAAA2M,gBAAP,SAAuBxF,EAAWC,EAAWwF,EAAcC,EAAmBC,GAC1E,SAAKrM,KAAKsD,mBAAqBtD,KAAKsM,WAAatM,KAAK8H,mBAIjDyJ,EAAAhS,UAAMwM,SAAQjO,KAAAkC,KAAC0G,EAAGC,KAIvB3G,KAAKuM,oBAAoBJ,EAAMzF,EAAGC,EAAGyF,EAAWC,IAEzC,KAIJgd,EAAA9pB,UAAAoN,gBAAP,SAAuBF,GACnB,QAAK8E,EAAAhS,UAAMoN,gBAAe7O,KAAAkC,KAACyM,KAIvBzM,KAAKmnB,uBACLnnB,KAAKmnB,yBAGF,IAIJkC,EAAA9pB,UAAAqN,cAAP,SAAqBH,GACbzM,KAAKonB,qBACLpnB,KAAKonB,sBAGT7V,EAAAhS,UAAMqN,cAAa9O,KAAAkC,KAACyM,IAIjB4c,EAAA9pB,UAAAsN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAAhS,UAAMsN,eAAc/O,KAAAkC,KAACyM,EAAQC,EAAaN,EAAWC,KAKtDrM,KAAKsnB,sBACLtnB,KAAKsnB,wBAGF,IAIJ+B,EAAA9pB,UAAAwN,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmBC,EAAqBW,GAC3FhN,KAAKunB,oBACLvnB,KAAKunB,qBAGThW,EAAAhS,UAAMwN,aAAYjP,KAAAkC,KAACyM,EAAQC,EAAaN,EAAWC,EAAaW,IAWtDqc,EAAAE,kBAAd,SAAgCrrB,EAAcyQ,EAAc6a,GACxD,IAAIhjB,EAAS,IAAI6iB,EAAOnrB,GAGpBurB,EAAY,IAAIN,EAAAxU,UAAUzW,EAAO,UAAWyQ,GAChD8a,EAAUC,cAAe,EACzBD,EAAUE,wBAA0B1W,EAAAlT,QAAQoB,4BAC5CsoB,EAAUG,YAAc,MACxBpjB,EAAOwL,WAAWyX,GAGlB,IAAII,EAAY,IAAIT,EAAA1N,MAAMxd,EAAO,QAASsrB,GAM1C,OALAK,EAAU3kB,MAAQ,MAClB2kB,EAAUC,QAAUV,EAAA1N,MAAM6B,gBAC1BsM,EAAU5iB,oBAAsBgM,EAAAlT,QAAQmH,0BACxCV,EAAOwL,WAAW6X,GAEXrjB,GASG6iB,EAAAU,sBAAd,SAAoC7rB,EAAcsrB,GAC9C,IAAIhjB,EAAS,IAAI6iB,EAAOnrB,GAGpB2rB,EAAY,IAAIT,EAAA1N,MAAMxd,EAAO,QAASsrB,GAK1C,OAJAK,EAAUC,QAAUV,EAAA1N,MAAMI,aAC1B+N,EAAU5iB,oBAAsBgM,EAAAlT,QAAQmH,0BACxCV,EAAOwL,WAAW6X,GAEXrjB,GASG6iB,EAAAW,mBAAd,SAAiC9rB,EAAcyQ,GAC3C,IAAInI,EAAS,IAAI6iB,EAAOnrB,GAGpBurB,EAAY,IAAIN,EAAAxU,UAAUzW,EAAO,UAAWyQ,GAKhD,OAJA8a,EAAUC,cAAe,EACzBD,EAAUE,wBAA0B1W,EAAAlT,QAAQoB,4BAC5CqF,EAAOwL,WAAWyX,GAEXjjB,GAUG6iB,EAAAY,gCAAd,SAA8C/rB,EAAcyQ,EAAc6a,GACtE,IAAIhjB,EAAS,IAAI6iB,EAAOnrB,GAGpB2rB,EAAY,IAAIT,EAAA1N,MAAMxd,EAAO,QAASsrB,GAC1CK,EAAUC,QAAUV,EAAA1N,MAAMI,aAC1BtV,EAAOwL,WAAW6X,GAGlB,IAAIJ,EAAY,IAAIN,EAAAxU,UAAUzW,EAAO,UAAWyQ,GAKhD,OAJA8a,EAAUC,cAAe,EACzBD,EAAUE,wBAA0B1W,EAAAlT,QAAQoB,4BAC5CqF,EAAOwL,WAAWyX,GAEXjjB,GAEf6iB,EAvMA,CAA4BH,EAAApO,WAAf7d,EAAAosB,6bCTb,IAAAzpB,EAAAnC,EAAA,GAKAqP,EAAA,SAAAyE,GAMI,SAAAzE,EAAmB6D,EAERtE,QAAA,IAAAA,MAAA,GAFX,IAAAhH,EAGIkM,EAAAzT,KAAAkC,KAAM2Q,EAAOjK,EAAGiK,EAAOhK,IAAE3G,YADlBqF,EAAAgH,gBAGf,OAXqCsF,EAAA7E,EAAAyE,GAWrCzE,EAXA,CAAqClN,EAAA6C,SAAxBxF,EAAA6P,kBAcb,IAAAzK,EAAA,WAaI,SAAAA,EAAY6nB,EAAaC,EAAaC,EAAaC,EAAaC,EAAaC,GAXtEvqB,KAAAjC,EAAI,IAAIysB,aAAa,GAYxBxqB,KAAKyqB,WAAWP,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GA2KjD,OA9JWloB,EAAA9C,UAAAkrB,WAAP,SAAkBP,EAAaC,EAAaC,EAAaC,EAAaC,EAAaC,GAI/E,OAHAvqB,KAAKjC,EAAE,GAAKmsB,EAAKlqB,KAAKjC,EAAE,GAAKosB,EAC7BnqB,KAAKjC,EAAE,GAAKqsB,EAAKpqB,KAAKjC,EAAE,GAAKssB,EAC7BrqB,KAAKjC,EAAE,GAAKusB,EAAKtqB,KAAKjC,EAAE,GAAKwsB,EACtBvqB,MAOJqC,EAAA9C,UAAAmrB,YAAP,WACI,OAAO1qB,KAAKjC,EAAE,GAAKiC,KAAKjC,EAAE,GAAKiC,KAAKjC,EAAE,GAAKiC,KAAKjC,EAAE,IAQ/CsE,EAAA9C,UAAAyK,YAAP,SAAmBxD,GACf,IAAImkB,EAAK3qB,KAAKjC,EAAE,GAAQ6sB,EAAK5qB,KAAKjC,EAAE,GAChC8sB,EAAK7qB,KAAKjC,EAAE,GAAQ+sB,EAAK9qB,KAAKjC,EAAE,GAChCgtB,EAAK/qB,KAAKjC,EAAE,GAAQitB,EAAKhrB,KAAKjC,EAAE,GAEhCktB,EAAMjrB,KAAK0qB,cACf,GAAIO,EAAOrrB,EAAAsrB,QAAUtrB,EAAAsrB,QAIjB,OAHA1kB,EAAOzI,EAAE,GAAK,EAAGyI,EAAOzI,EAAE,GAAK,EAC/ByI,EAAOzI,EAAE,GAAK,EAAGyI,EAAOzI,EAAE,GAAK,EAC/ByI,EAAOzI,EAAE,GAAK,EAAGyI,EAAOzI,EAAE,GAAK,EACxBiC,KAGX,IAAImrB,EAAS,EAAIF,EAEbG,EAAOP,EAAKG,EAAKF,EAAKC,EACtBM,EAAOT,EAAKG,EAAKJ,EAAKK,EAM1B,OAJAxkB,EAAOzI,EAAE,GAAK+sB,EAAKK,EAAQ3kB,EAAOzI,EAAE,IAAM6sB,EAAKO,EAC/C3kB,EAAOzI,EAAE,IAAM8sB,EAAKM,EAAQ3kB,EAAOzI,EAAE,GAAK4sB,EAAKQ,EAC/C3kB,EAAOzI,EAAE,GAAKqtB,EAAOD,EAAQ3kB,EAAOzI,EAAE,GAAKstB,EAAOF,EAE3CnrB,MASJqC,EAAA9C,UAAA+rB,cAAP,SAAqB1S,EAAiBpS,GAClC,IAAImkB,EAAK3qB,KAAKjC,EAAE,GAAQ6sB,EAAK5qB,KAAKjC,EAAE,GAChC8sB,EAAK7qB,KAAKjC,EAAE,GAAQ+sB,EAAK9qB,KAAKjC,EAAE,GAChCgtB,EAAK/qB,KAAKjC,EAAE,GAAQitB,EAAKhrB,KAAKjC,EAAE,GAEhCwtB,EAAK3S,EAAM7a,EAAE,GAAQytB,EAAK5S,EAAM7a,EAAE,GAClC0tB,EAAK7S,EAAM7a,EAAE,GAAQ2tB,EAAK9S,EAAM7a,EAAE,GAClC4tB,EAAK/S,EAAM7a,EAAE,GAAQ6tB,EAAKhT,EAAM7a,EAAE,GAMtC,OAJAyI,EAAOzI,EAAE,GAAK4sB,EAAKY,EAAKX,EAAKa,EAAIjlB,EAAOzI,EAAE,GAAK4sB,EAAKa,EAAKZ,EAAKc,EAC9DllB,EAAOzI,EAAE,GAAK8sB,EAAKU,EAAKT,EAAKW,EAAIjlB,EAAOzI,EAAE,GAAK8sB,EAAKW,EAAKV,EAAKY,EAC9DllB,EAAOzI,EAAE,GAAKgtB,EAAKQ,EAAKP,EAAKS,EAAKE,EAAInlB,EAAOzI,EAAE,GAAKgtB,EAAKS,EAAKR,EAAKU,EAAKE,EAEjE5rB,MAUJqC,EAAA9C,UAAAyM,qBAAP,SAA4BtF,EAAWC,EAAWH,GAI9C,OAHAA,EAAOE,EAAIA,EAAI1G,KAAKjC,EAAE,GAAK4I,EAAI3G,KAAKjC,EAAE,GAAKiC,KAAKjC,EAAE,GAClDyI,EAAOG,EAAID,EAAI1G,KAAKjC,EAAE,GAAK4I,EAAI3G,KAAKjC,EAAE,GAAKiC,KAAKjC,EAAE,GAE3CiC,MAQGqC,EAAAC,SAAd,WACI,OAAO,IAAID,EAAS,EAAG,EAAG,EAAG,EAAG,EAAG,IASzBA,EAAAwpB,iBAAd,SAA+BnlB,EAAWC,EAAWH,GACjDA,EAAOikB,WAAW,EAAG,EAAG,EAAG,EAAG/jB,EAAGC,IASvBtE,EAAAypB,aAAd,SAA2BplB,EAAWC,EAAWH,GAC7CA,EAAOikB,WAAW/jB,EAAG,EAAG,EAAGC,EAAG,EAAG,IAQvBtE,EAAA0pB,cAAd,SAA4BC,EAAexlB,GACvC,IAAI9G,EAAIoJ,KAAKmjB,IAAID,GACbhuB,EAAI8K,KAAKojB,IAAIF,GAEjBxlB,EAAOikB,WAAWzsB,EAAG0B,GAAIA,EAAG1B,EAAG,EAAG,IAqBxBqE,EAAA0H,aAAd,SAA2BoiB,EAAYC,EAAYJ,EAAexD,EAAgBC,EAAgB4D,EAAkC7lB,GAChInE,EAASwpB,iBAAiBM,EAAIC,EAAI/pB,EAASiqB,2BAE3CjqB,EAASypB,aAAatD,EAAQC,EAAQpmB,EAASkqB,oBAE/ClqB,EAAS0pB,cAAcC,EAAO3pB,EAASmqB,qBAEvCnqB,EAASwpB,kBAAkBM,GAAKC,EAAI/pB,EAASoqB,4BAE7CpqB,EAASiqB,0BAA0BhB,cAAcjpB,EAASkqB,mBAAoBlqB,EAASqqB,eACvFrqB,EAASqqB,cAAcpB,cAAcjpB,EAASmqB,oBAAqBnqB,EAASsqB,eACxEN,GACAhqB,EAASsqB,cAAcrB,cAAcjpB,EAASoqB,2BAA4BpqB,EAASuqB,eACnFvqB,EAASuqB,cAActB,cAAce,EAAc7lB,IAEnDnE,EAASsqB,cAAcrB,cAAcjpB,EAASoqB,2BAA4BjmB,IAjCnEnE,EAAAiqB,0BAA4BjqB,EAASC,WACrCD,EAAAoqB,2BAA6BpqB,EAASC,WACtCD,EAAAmqB,oBAAsBnqB,EAASC,WAC/BD,EAAAkqB,mBAAqBlqB,EAASC,WAC9BD,EAAAqqB,cAAgBrqB,EAASC,WACzBD,EAAAsqB,cAAgBtqB,EAASC,WACzBD,EAAAuqB,cAAgBvqB,EAASC,WA8B5CD,EAzLA,GAAapF,EAAAoF,+bCnBb,IAAA4Q,EAAAxV,EAAA,GAEAmC,EAAAnC,EAAA,GACAovB,EAAApvB,EAAA,GACA0rB,EAAA1rB,EAAA,GAKAqvB,EAAA,SAAAvb,GA2EI,SAAAub,EAAmB5uB,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OA1EXmH,EAAA0nB,YAAa,EACb1nB,EAAAiO,YAAc,QACdjO,EAAA2nB,gBAAkB,GAClB3nB,EAAA0V,WAAa,EAmBd1V,EAAA4nB,6BAA+B,IAAIrtB,EAAAqE,WAsDtCoB,EAAK9B,kBAAmB,IA0FhC,OAvK8BoO,EAAAmb,EAAAvb,GAO1BlT,OAAAC,eAAWwuB,EAAAvtB,UAAA,iBAAX,WACI,OAAOS,KAAK+a,gBAGhB,SAAqBnc,GACboB,KAAK+a,aAAenc,IAIxBoB,KAAK+a,WAAanc,EAClBoB,KAAK4E,iDASTvG,OAAAC,eAAWwuB,EAAAvtB,UAAA,sBAAX,WACI,OAAOS,KAAKgtB,qBAGhB,SAA0BpuB,GACtBA,EAAQkK,KAAKwC,IAAIxC,KAAKsC,IAAI,EAAGxM,GAAQ,GAEjCoB,KAAKgtB,kBAAoBpuB,IAI7BoB,KAAKgtB,gBAAkBpuB,EACvBoB,KAAK4E,iDAITvG,OAAAC,eAAWwuB,EAAAvtB,UAAA,kBAAX,WACI,OAAOS,KAAKsT,iBAGhB,SAAsB1U,GACdoB,KAAKsT,cAAgB1U,IAIzBoB,KAAKsT,YAAc1U,EACnBoB,KAAK4E,iDAITvG,OAAAC,eAAWwuB,EAAAvtB,UAAA,iBAAX,WACI,OAAOS,KAAK+sB,gBAGhB,SAAqBnuB,GACboB,KAAK+sB,aAAenuB,IAIxBoB,KAAK+sB,WAAanuB,EAClBoB,KAAK4E,eAEL5E,KAAKitB,6BAA6BliB,gBAAgBnM,qCAY5CkuB,EAAAvtB,UAAAkF,aAAV,WACI,MAAO,YAIJqoB,EAAAvtB,UAAAuM,MAAP,SAAavB,EAAwBhB,GAIjC,GAHAA,EAAQ2K,OAERlU,KAAKiK,aAAaV,GACdvJ,KAAKsK,iBAAiBC,EAAehB,GAAU,CAC/C,IAAI2jB,EAAcltB,KAAKI,gBAAgB8E,MAAQlF,KAAK+a,WAChDoS,EAAentB,KAAKI,gBAAgB+E,OAASnF,KAAK+a,WAkBtD,IAhBI/a,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,eAGjC6F,EAAQY,UAAYnK,KAAKoD,WAAapD,KAAKsT,YAActT,KAAKqD,eAC9DkG,EAAQ0K,SAASjU,KAAKI,gBAAgB6F,KAAOjG,KAAK+a,WAAa,EAAG/a,KAAKI,gBAAgB8F,IAAMlG,KAAK+a,WAAa,EAAGmS,EAAaC,IAE3HntB,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ5F,WAAa,EACrB4F,EAAQ9F,cAAgB,EACxB8F,EAAQ7F,cAAgB,GAGxB1D,KAAK+sB,WAAY,CACjBxjB,EAAQY,UAAYnK,KAAKoD,WAAapD,KAAKmb,MAAQnb,KAAKqD,eACxD,IAAI+pB,EAAcF,EAAcltB,KAAKgtB,gBACjCK,EAAcF,EAAentB,KAAKgtB,gBAEtCzjB,EAAQ0K,SAASjU,KAAKI,gBAAgB6F,KAAOjG,KAAK+a,WAAa,GAAKmS,EAAcE,GAAe,EAAGptB,KAAKI,gBAAgB8F,IAAMlG,KAAK+a,WAAa,GAAKoS,EAAeE,GAAe,EAAGD,EAAaC,GAGxM9jB,EAAQwM,YAAc/V,KAAKmb,MAC3B5R,EAAQuM,UAAY9V,KAAK+a,WAEzBxR,EAAQ8R,WAAWrb,KAAKI,gBAAgB6F,KAAOjG,KAAK+a,WAAa,EAAG/a,KAAKI,gBAAgB8F,IAAMlG,KAAK+a,WAAa,EAAGmS,EAAaC,GAErI5jB,EAAQiL,WAMLsY,EAAAvtB,UAAAsN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAAhS,UAAMsN,eAAc/O,KAAAkC,KAACyM,EAAQC,EAAaN,EAAWC,KAI1DrM,KAAKstB,WAAattB,KAAKstB,WAEhB,IASGR,EAAAS,sBAAd,SAAoCC,EAAeC,GAC/C,IAAIC,EAAQ,IAAIb,EAAA7U,WAChB0V,EAAMC,YAAa,EACnBD,EAAMvoB,OAAS,OAEf,IAAIyoB,EAAW,IAAId,EACnBc,EAAS1oB,MAAQ,OACjB0oB,EAASzoB,OAAS,OAClByoB,EAASN,WAAY,EACrBM,EAASzS,MAAQ,QACjByS,EAASX,6BAA6BxnB,IAAIgoB,GAC1CC,EAAM1b,WAAW4b,GAEjB,IAAIC,EAAS,IAAI1E,EAAAxU,UAQjB,OAPAkZ,EAAOlf,KAAO6e,EACdK,EAAO3oB,MAAQ,QACf2oB,EAAOjE,YAAc,MACrBiE,EAAOlE,wBAA0B1W,EAAAlT,QAAQmH,0BACzC2mB,EAAO1S,MAAQ,QACfuS,EAAM1b,WAAW6b,GAEVH,GAEfZ,EAvKA,CAA8B7Z,EAAAlT,SAAjB9C,EAAA6vB,+bCTb,IAAA7Z,EAAAxV,EAAA,GAEAkC,EAAAlC,EAAA,GACAmC,EAAAnC,EAAA,GAOAqwB,EAAA,SAAAvc,GA+NI,SAAAuc,EAAmB5vB,EAAeyQ,QAAA,IAAAA,MAAA,IAAlC,IAAAtJ,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OA9NXmH,EAAAuP,MAAQ,GACRvP,EAAA0oB,iBAAmB,GACnB1oB,EAAAiO,YAAc,UACdjO,EAAA2oB,mBAAqB,UACrB3oB,EAAA4oB,kBAAoB,OACpB5oB,EAAA0V,WAAa,EACb1V,EAAA6oB,QAAU,IAAIvuB,EAAAgB,aAAa,GAAIhB,EAAAgB,aAAaC,gBAC5CyE,EAAA8oB,mBAAoB,EACpB9oB,EAAA+oB,UAAY,IAAIzuB,EAAAgB,aAAa,EAAGhB,EAAAgB,aAAaG,qBAAqB,GAClEuE,EAAAgpB,YAAa,EAEbhpB,EAAAipB,cAAe,EACfjpB,EAAAkpB,cAAgB,EAIhBlpB,EAAAmpB,UAAW,EACXnpB,EAAAopB,SAAU,EACVppB,EAAAqpB,YAAc,GAMfrpB,EAAAspB,cAAgB,qBAGhBtpB,EAAAgQ,wBAA0B,IAAIzV,EAAAqE,WAE9BoB,EAAAupB,yBAA2B,IAAIhvB,EAAAqE,WAE/BoB,EAAAwpB,kBAAoB,IAAIjvB,EAAAqE,WAExBoB,EAAAypB,iBAAmB,IAAIlvB,EAAAqE,WAgM1BoB,EAAKsJ,KAAOA,IAgVpB,OAljB+BgD,EAAAmc,EAAAvc,GAqC3BlT,OAAAC,eAAWwvB,EAAAvuB,UAAA,gBAAX,WACI,OAAOS,KAAKouB,UAAUtpB,SAAS9E,KAAK+E,YAQxC,SAAoBnG,GACZoB,KAAKouB,UAAUtpB,SAAS9E,KAAK+E,SAAWnG,GAIxCoB,KAAKouB,UAAUppB,WAAWpG,IAC1BoB,KAAK4E,gDAVbvG,OAAAC,eAAWwvB,EAAAvuB,UAAA,wBAAX,WACI,OAAOS,KAAKouB,UAAUnpB,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB0D,wCAchF7G,OAAAC,eAAWwvB,EAAAvuB,UAAA,cAAX,WACI,OAAOS,KAAKkuB,QAAQppB,SAAS9E,KAAK+E,YAQtC,SAAkBnG,GACVoB,KAAKkuB,QAAQppB,SAAS9E,KAAK+E,SAAWnG,GAItCoB,KAAKkuB,QAAQlpB,WAAWpG,IACxBoB,KAAK4E,gDAVbvG,OAAAC,eAAWwvB,EAAAvuB,UAAA,sBAAX,WACI,OAAOS,KAAKkuB,QAAQjpB,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB0D,wCAc9E7G,OAAAC,eAAWwvB,EAAAvuB,UAAA,wBAAX,WACI,OAAOS,KAAKmuB,uBAGhB,SAA4BvvB,GACpBoB,KAAKmuB,oBAAsBvvB,IAI/BoB,KAAKmuB,kBAAoBvvB,EACzBoB,KAAK4E,iDAITvG,OAAAC,eAAWwvB,EAAAvuB,UAAA,iBAAX,WACI,OAAOS,KAAK+a,gBAGhB,SAAqBnc,GACboB,KAAK+a,aAAenc,IAIxBoB,KAAK+a,WAAanc,EAClBoB,KAAK4E,iDAITvG,OAAAC,eAAWwvB,EAAAvuB,UAAA,yBAAX,WACI,OAAOS,KAAKguB,wBAGhB,SAA6BpvB,GACrBoB,KAAKguB,qBAAuBpvB,IAIhCoB,KAAKguB,mBAAqBpvB,EAC1BoB,KAAK4E,iDAITvG,OAAAC,eAAWwvB,EAAAvuB,UAAA,kBAAX,WACI,OAAOS,KAAKsT,iBAGhB,SAAsB1U,GACdoB,KAAKsT,cAAgB1U,IAIzBoB,KAAKsT,YAAc1U,EACnBoB,KAAK4E,iDAITvG,OAAAC,eAAWwvB,EAAAvuB,UAAA,wBAAX,WACI,OAAOS,KAAKiuB,uBAGhB,SAA4BrvB,GACpBoB,KAAKiuB,oBAAsBrvB,IAI/BoB,KAAKiuB,kBAAoBrvB,EACzBoB,KAAK4E,iDAITvG,OAAAC,eAAWwvB,EAAAvuB,UAAA,uBAAX,WACI,OAAOS,KAAK+tB,sBAGhB,SAA2BnvB,GACnBoB,KAAK+tB,mBAAqBnvB,IAG9BoB,KAAK+tB,iBAAmBnvB,EACxBoB,KAAK4E,iDAITvG,OAAAC,eAAWwvB,EAAAvuB,UAAA,eAAX,WACI,OAAOS,KAAKwuB,cAGhB,SAAmBO,GACf/uB,KAAKwuB,SAAWO,mCAIpB1wB,OAAAC,eAAWwvB,EAAAvuB,UAAA,cAAX,WACI,OAAOS,KAAKyuB,aAGhB,SAAkBM,GACd/uB,KAAKyuB,QAAUM,mCAInB1wB,OAAAC,eAAWwvB,EAAAvuB,UAAA,kBAAX,WACI,OAAOS,KAAK0uB,iBAGhB,SAAsBxvB,GAClBc,KAAK0uB,YAAcxvB,mCAIvBb,OAAAC,eAAWwvB,EAAAvuB,UAAA,YAAX,WACI,OAAOS,KAAK4U,WAGhB,SAAgBhW,GACRoB,KAAK4U,QAAUhW,IAGnBoB,KAAK4U,MAAQhW,EACboB,KAAK4E,eAEL5E,KAAKqV,wBAAwBtK,gBAAgB/K,wCAIjD3B,OAAAC,eAAWwvB,EAAAvuB,UAAA,aAAX,WACI,OAAOS,KAAKa,OAAOiE,SAAS9E,KAAK+E,YAGrC,SAAiBnG,GACToB,KAAKa,OAAOiE,SAAS9E,KAAK+E,SAAWnG,IAIrCoB,KAAKa,OAAOmE,WAAWpG,IACvBoB,KAAK4E,eAGT5E,KAAKgvB,kBAAmB,oCAerBlB,EAAAvuB,UAAAkhB,OAAP,WACIzgB,KAAKquB,YAAa,EAClBruB,KAAKivB,YAAc,KACnBjvB,KAAKuuB,cAAgB,EACrBW,aAAalvB,KAAKmvB,eAClBnvB,KAAK4E,eAEL5E,KAAK8uB,iBAAiB/jB,gBAAgB/K,OAInC8tB,EAAAvuB,UAAAmhB,QAAP,WACI,GAAI1gB,KAAKoD,aAGTpD,KAAKivB,YAAc,KACnBjvB,KAAKquB,YAAa,EAClBruB,KAAKsuB,cAAe,EACpBtuB,KAAKuuB,cAAgB,EACrBvuB,KAAK4E,eAEL5E,KAAK6uB,kBAAkB9jB,gBAAgB/K,OAEQ,IAA3CovB,UAAUC,UAAUhnB,QAAQ,WAAkB,CAC9C,IAAIzJ,EAAQ0wB,OAAOtvB,KAAK2uB,eAMxB,OAJc,OAAV/vB,IACAoB,KAAK2O,KAAO/P,QAEhBoB,KAAK+E,MAAMyf,eAAiB,QAK1BsJ,EAAAvuB,UAAAkF,aAAV,WACI,MAAO,aAQJqpB,EAAAvuB,UAAAklB,UAAP,SAAiBrY,GACb,IAAKpM,KAAKuvB,0BACN,OAAO,EAIX,GAAIvvB,KAAK+E,QAAU/E,KAAKuvB,0BAA0BxqB,MAC9C,OAAO,EAIX,IAAMyqB,EAAYxvB,KAAKuvB,0BAA0BxqB,MAEjD,SAAIyqB,EAAUjiB,iBAAiBnB,KAAcojB,EAAUjiB,iBAAiBnB,GAAWjG,YAAYnG,KAAKuvB,6BAQjGzB,EAAAvuB,UAAAkwB,WAAP,SAAkBC,EAAiBxwB,GAE/B,OAAQwwB,GACJ,KAAK,GACDxwB,EAAM,IACN,MACJ,KAAK,EACD,GAAIc,KAAK4U,OAAS5U,KAAK4U,MAAM7D,OAAS,EAClC,GAA2B,IAAvB/Q,KAAKuuB,cACLvuB,KAAK2O,KAAO3O,KAAK4U,MAAM+a,OAAO,EAAG3vB,KAAK4U,MAAM7D,OAAS,QAEjD6e,EAAiB5vB,KAAK4U,MAAM7D,OAAS/Q,KAAKuuB,eACzB,IACjBvuB,KAAK2O,KAAO3O,KAAK4U,MAAMd,MAAM,EAAG8b,EAAiB,GAAK5vB,KAAK4U,MAAMd,MAAM8b,IAInF,OACJ,KAAK,GACD,GAAI5vB,KAAK4U,OAAS5U,KAAK4U,MAAM7D,OAAS,EAAG,CACrC,IAAI6e,EAAiB5vB,KAAK4U,MAAM7D,OAAS/Q,KAAKuuB,cAC9CvuB,KAAK2O,KAAO3O,KAAK4U,MAAMd,MAAM,EAAG8b,GAAkB5vB,KAAK4U,MAAMd,MAAM8b,EAAiB,GACpF5vB,KAAKuuB,gBAET,OACJ,KAAK,GAED,YADAvuB,KAAK+E,MAAMyf,eAAiB,MAEhC,KAAK,GAID,OAHAxkB,KAAKuuB,cAAgB,EACrBvuB,KAAKsuB,cAAe,OACpBtuB,KAAK4E,eAET,KAAK,GAID,OAHA5E,KAAKuuB,cAAgBvuB,KAAK4U,MAAM7D,OAChC/Q,KAAKsuB,cAAe,OACpBtuB,KAAK4E,eAET,KAAK,GAOD,OANA5E,KAAKuuB,gBACDvuB,KAAKuuB,cAAgBvuB,KAAK4U,MAAM7D,SAChC/Q,KAAKuuB,cAAgBvuB,KAAK4U,MAAM7D,QAEpC/Q,KAAKsuB,cAAe,OACpBtuB,KAAK4E,eAET,KAAK,GAOD,OANA5E,KAAKuuB,gBACDvuB,KAAKuuB,cAAgB,IACrBvuB,KAAKuuB,cAAgB,GAEzBvuB,KAAKsuB,cAAe,OACpBtuB,KAAK4E,eAET,KAAK,IAED,YADA5E,KAAK6vB,SAAU,GAKvB,GAAI3wB,KACe,IAAbwwB,GACe,KAAZA,GACAA,EAAU,IAAMA,EAAU,IAC1BA,EAAU,IAAMA,EAAU,IAC1BA,EAAU,KAAOA,EAAU,KAC3BA,EAAU,KAAOA,EAAU,KAC3BA,EAAU,IAAMA,EAAU,OAC/B1vB,KAAK0uB,YAAcxvB,EACnBc,KAAK4uB,yBAAyB7jB,gBAAgB/K,MAC9Cd,EAAMc,KAAK0uB,YACP1uB,KAAKyuB,SACL,GAA2B,IAAvBzuB,KAAKuuB,cACLvuB,KAAK2O,MAAQzP,MACV,CACH,IAAI4wB,EAAiB9vB,KAAK4U,MAAM7D,OAAS/Q,KAAKuuB,cAE9CvuB,KAAK2O,KAAO3O,KAAK4U,MAAMd,MAAM,EAAGgc,GAAkB5wB,EAAMc,KAAK4U,MAAMd,MAAMgc,KAOlFhC,EAAAvuB,UAAAygB,gBAAP,SAAuB+P,GACnB/vB,KAAKyvB,WAAWM,EAAIL,QAASK,EAAI7wB,MAG9B4uB,EAAAvuB,UAAAuM,MAAP,SAAavB,EAAwBhB,GAArC,IAAAlE,EAAArF,KAII,GAHAuJ,EAAQ2K,OAERlU,KAAKiK,aAAaV,GACdvJ,KAAKsK,iBAAiBC,EAAehB,GAAU,EAE3CvJ,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,eAI7B1D,KAAKquB,WACDruB,KAAKguB,qBACLzkB,EAAQY,UAAYnK,KAAKoD,WAAcpD,KAAKguB,mBAAqBhuB,KAAKqD,eAEtEkG,EAAQ0K,SAASjU,KAAKI,gBAAgB6F,KAAMjG,KAAKI,gBAAgB8F,IAAKlG,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,SAEpHnF,KAAKsT,cACZ/J,EAAQY,UAAYnK,KAAKoD,WAAapD,KAAKsT,YAActT,KAAKqD,eAE9DkG,EAAQ0K,SAASjU,KAAKI,gBAAgB6F,KAAMjG,KAAKI,gBAAgB8F,IAAKlG,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,UAGvHnF,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ5F,WAAa,EACrB4F,EAAQ9F,cAAgB,EACxB8F,EAAQ7F,cAAgB,GAGvB1D,KAAK0E,cACN1E,KAAK0E,YAAcuO,EAAAlT,QAAQiO,eAAezE,EAAQW,OAItD,IAAI8lB,EAAehwB,KAAKI,gBAAgB6F,KAAOjG,KAAKkuB,QAAQjpB,gBAAgBjF,KAAK+E,MAAOwF,EAAcrF,OAClGlF,KAAKmb,QACL5R,EAAQY,UAAYnK,KAAKmb,OAG7B,IAAIxM,EAAO3O,KAAKiwB,kBAAkBjwB,KAAK4U,OAElC5U,KAAKquB,YAAeruB,KAAK4U,QAAS5U,KAAK+tB,mBACxCpf,EAAO3O,KAAK+tB,iBAER/tB,KAAKiuB,oBACL1kB,EAAQY,UAAYnK,KAAKiuB,oBAIjCjuB,KAAKkwB,WAAa3mB,EAAQ0N,YAAYtI,GAAMzJ,MAC5C,IAAIirB,EAA8E,EAAhEnwB,KAAKkuB,QAAQjpB,gBAAgBjF,KAAK+E,MAAOwF,EAAcrF,OACrElF,KAAKmuB,oBACLnuB,KAAKkF,MAAQ4D,KAAKsC,IAAIpL,KAAKouB,UAAUnpB,gBAAgBjF,KAAK+E,MAAOwF,EAAcrF,OAAQlF,KAAKkwB,WAAaC,GAAe,MAG5H,IAAI9Y,EAAQrX,KAAK0E,YAAYgL,QAAU1P,KAAKI,gBAAgB+E,OAASnF,KAAK0E,YAAYS,QAAU,EAC5FirB,EAAiBpwB,KAAKa,OAAOoE,gBAAgBjF,KAAK+E,MAAOwF,EAAcrF,OAASirB,EAMpF,GALA5mB,EAAQ2K,OACR3K,EAAQ2B,YACR3B,EAAQkC,KAAKukB,EAAchwB,KAAKI,gBAAgB8F,KAAOlG,KAAKI,gBAAgB+E,OAASnF,KAAK0E,YAAYS,QAAU,EAAGirB,EAAiB,EAAGpwB,KAAKI,gBAAgB+E,QAC5JoE,EAAQ0B,OAEJjL,KAAKquB,YAAcruB,KAAKkwB,WAAaE,EAAgB,CACrD,IAAIC,EAAWL,EAAehwB,KAAKkwB,WAAaE,EAC3CpwB,KAAKivB,cACNjvB,KAAKivB,YAAcoB,QAGvBrwB,KAAKivB,YAAce,EAMvB,GAHAzmB,EAAQqM,SAASjH,EAAM3O,KAAKivB,YAAajvB,KAAKI,gBAAgB8F,IAAMmR,GAGhErX,KAAKquB,WAAY,CAGjB,GAAIruB,KAAKswB,mBAAoB,CACzB,IACIC,EADgBvwB,KAAKivB,YAAcjvB,KAAKkwB,WACClwB,KAAKswB,mBAC9CE,EAAc,EAClBxwB,KAAKuuB,cAAgB,EACrB,IAAIkC,EAAe,EACnB,GACQzwB,KAAKuuB,gBACLkC,EAAe3nB,KAAKC,IAAIwnB,EAAyBC,IAErDxwB,KAAKuuB,gBACLiC,EAAcjnB,EAAQ0N,YAAYtI,EAAKghB,OAAOhhB,EAAKoC,OAAS/Q,KAAKuuB,cAAevuB,KAAKuuB,gBAAgBrpB,YAEhGsrB,EAAcD,GAA2B5hB,EAAKoC,QAAU/Q,KAAKuuB,eAGlEzlB,KAAKC,IAAIwnB,EAAyBC,GAAeC,GACjDzwB,KAAKuuB,gBAGTvuB,KAAKsuB,cAAe,EACpBtuB,KAAKswB,mBAAqB,KAI9B,IAAKtwB,KAAKsuB,aAAc,CACpB,IAAIoC,EAAmB1wB,KAAK2O,KAAKghB,OAAO3vB,KAAK4U,MAAM7D,OAAS/Q,KAAKuuB,eAC7DoC,EAAoBpnB,EAAQ0N,YAAYyZ,GAAkBxrB,MAC1D0rB,EAAa5wB,KAAKivB,YAAcjvB,KAAKkwB,WAAaS,EAElDC,EAAaZ,GACbhwB,KAAKivB,aAAgBe,EAAeY,EACpCA,EAAaZ,EACbhwB,KAAK4E,gBACEgsB,EAAaZ,EAAeI,IACnCpwB,KAAKivB,aAAgBe,EAAeI,EAAiBQ,EACrDA,EAAaZ,EAAeI,EAC5BpwB,KAAK4E,gBAET2E,EAAQ0K,SAAS2c,EAAY5wB,KAAKI,gBAAgB8F,KAAOlG,KAAKI,gBAAgB+E,OAASnF,KAAK0E,YAAYS,QAAU,EAAG,EAAGnF,KAAK0E,YAAYS,QAG7I+pB,aAAalvB,KAAKmvB,eAClBnvB,KAAKmvB,cAAqB0B,WAAW,WACjCxrB,EAAKipB,cAAgBjpB,EAAKipB,aAC1BjpB,EAAKT,gBACN,KAGP2E,EAAQiL,UAGJxU,KAAK+a,aACD/a,KAAKmb,QACL5R,EAAQwM,YAAc/V,KAAKmb,OAE/B5R,EAAQuM,UAAY9V,KAAK+a,WAEzBxR,EAAQ8R,WAAWrb,KAAKI,gBAAgB6F,KAAOjG,KAAK+a,WAAa,EAAG/a,KAAKI,gBAAgB8F,IAAMlG,KAAK+a,WAAa,EAC7G/a,KAAKI,gBAAgB8E,MAAQlF,KAAK+a,WAAY/a,KAAKI,gBAAgB+E,OAASnF,KAAK+a,aAG7FxR,EAAQiL,WAGLsZ,EAAAvuB,UAAAsN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAAhS,UAAMsN,eAAc/O,KAAAkC,KAACyM,EAAQC,EAAaN,EAAWC,KAI1DrM,KAAKswB,mBAAqB5jB,EAAYhG,EAClC1G,KAAK+E,MAAMyf,iBAAmBxkB,MAE9BkvB,aAAalvB,KAAKmvB,eAClBnvB,KAAK4E,gBACE,KAEP5E,KAAKoD,aAGTpD,KAAK+E,MAAMyf,eAAiBxkB,MAErB,KAGJ8tB,EAAAvuB,UAAAwN,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmBC,EAAqBW,GAC/FuE,EAAAhS,UAAMwN,aAAYjP,KAAAkC,KAACyM,EAAQC,EAAaN,EAAWC,EAAaW,IAG1D8gB,EAAAvuB,UAAA0wB,kBAAV,SAA4BthB,GACxB,OAAOA,GAGJmf,EAAAvuB,UAAA0O,QAAP,WACIsD,EAAAhS,UAAM0O,QAAOnQ,KAAAkC,MAEbA,KAAK8uB,iBAAiB5gB,QACtBlO,KAAK6uB,kBAAkB3gB,QACvBlO,KAAKqV,wBAAwBnH,SAErC4f,EAljBA,CAA+B7a,EAAAlT,SAAlB9C,EAAA6wB,2FCTb,IAAAnuB,EAAAlC,EAAA,GAEAmC,EAAAnC,EAAA,GAOAqzB,EAAA,WAmBI,SAAAA,EAAYC,GACR/wB,KAAKgxB,WAAaD,EAElB/wB,KAAKixB,GAAK,IAAItxB,EAAAgB,aAAa,GAC3BX,KAAKkxB,GAAK,IAAIvxB,EAAAgB,aAAa,GAE3BX,KAAKmxB,OAAS,IAAIvxB,EAAA6C,QAAQ,EAAG,GAkHrC,OA9GIpE,OAAAC,eAAWwyB,EAAAvxB,UAAA,SAAX,WACI,OAAOS,KAAKixB,GAAGnsB,SAAS9E,KAAKgxB,WAAWjsB,YAG5C,SAAanG,GACLoB,KAAKixB,GAAGnsB,SAAS9E,KAAKgxB,WAAWjsB,SAAWnG,GAI5CoB,KAAKixB,GAAGjsB,WAAWpG,IACnBoB,KAAKgxB,WAAWpsB,gDAKxBvG,OAAAC,eAAWwyB,EAAAvxB,UAAA,SAAX,WACI,OAAOS,KAAKkxB,GAAGpsB,SAAS9E,KAAKgxB,WAAWjsB,YAG5C,SAAanG,GACLoB,KAAKkxB,GAAGpsB,SAAS9E,KAAKgxB,WAAWjsB,SAAWnG,GAI5CoB,KAAKkxB,GAAGlsB,WAAWpG,IACnBoB,KAAKgxB,WAAWpsB,gDAKxBvG,OAAAC,eAAWwyB,EAAAvxB,UAAA,eAAX,WACI,OAAOS,KAAKoxB,cAGhB,SAAmBxyB,GACXoB,KAAKoxB,WAAaxyB,IAIlBoB,KAAKoxB,UAAYpxB,KAAKqxB,mBACtBrxB,KAAKoxB,SAAS7sB,kBAAkBgB,OAAOvF,KAAKqxB,kBAE5CrxB,KAAKqxB,iBAAmB,MAG5BrxB,KAAKoxB,SAAWxyB,EAEZoB,KAAKoxB,WACLpxB,KAAKqxB,iBAAmBrxB,KAAKoxB,SAAS7sB,kBAAkBkB,IAAIzF,KAAKgxB,WAAWM,gBAGhFtxB,KAAKgxB,WAAWpsB,iDAIpBvG,OAAAC,eAAWwyB,EAAAvxB,UAAA,YAAX,WACI,OAAOS,KAAKuxB,WAGhB,SAAgB3yB,GACRoB,KAAKuxB,QAAU3yB,IAIfoB,KAAKuxB,OAASvxB,KAAKwxB,eACnBxxB,KAAKuxB,MAAMtS,WAAWwS,8BAA8BlsB,OAAOvF,KAAKwxB,eAGpExxB,KAAKuxB,MAAQ3yB,EAEToB,KAAKuxB,QACLvxB,KAAKwxB,cAAgBxxB,KAAKuxB,MAAMtS,WAAWwS,8BAA8BhsB,IAAIzF,KAAKgxB,WAAWM,gBAGjGtxB,KAAKgxB,WAAWpsB,iDAObksB,EAAAvxB,UAAAmK,UAAP,WAGI,OAFA1J,KAAKmxB,OAASnxB,KAAK0xB,kBAEZ1xB,KAAKmxB,QAGRL,EAAAvxB,UAAAmyB,gBAAR,WACI,GAAkB,MAAd1xB,KAAKuxB,MACL,OAAOvxB,KAAKgxB,WAAWjsB,MAAMkd,qBAAqBjiB,KAAKuxB,MAAMjP,kBAAkBC,eAAeC,OAAQxiB,KAAKuxB,MAAM9O,kBAEhH,GAAqB,MAAjBziB,KAAKoxB,SACV,OAAO,IAAIxxB,EAAA6C,QAAQzC,KAAKoxB,SAASzT,QAAS3d,KAAKoxB,SAASxT,SAGxD,IAAIvU,EAAYrJ,KAAKgxB,WAAWjsB,MAE5B4sB,EAAiB3xB,KAAKixB,GAAGhsB,gBAAgBoE,EAAMuoB,OAAOvoB,EAAKwoB,QAAQ3sB,QACnE4sB,EAAiB9xB,KAAKkxB,GAAGjsB,gBAAgBoE,EAAMuoB,OAAOvoB,EAAKwoB,QAAQ1sB,SAEvE,OAAO,IAAIvF,EAAA6C,QAAQkvB,EAAQG,IAK5BhB,EAAAvxB,UAAA0O,QAAP,WACIjO,KAAK+R,QAAU,KACf/R,KAAKkI,KAAO,MAGpB4oB,EA3IA,GAAa7zB,EAAA6zB,qcCVb,IAAA7d,EAAAxV,EAAA,GACAmC,EAAAnC,EAAA,GAEAs0B,EAAAt0B,EAAA,GAKAu0B,EAAA,SAAAzgB,GA6FI,SAAAygB,EAAmB9zB,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OA5FXmH,EAAA0nB,YAAa,EACb1nB,EAAAiO,YAAc,QACdjO,EAAA2nB,gBAAkB,GAClB3nB,EAAA0V,WAAa,EAiBd1V,EAAA4sB,MAAQ,GAGR5sB,EAAA4nB,6BAA+B,IAAIrtB,EAAAqE,WAwEtCoB,EAAK9B,kBAAmB,IAqGhC,OArMiCoO,EAAAqgB,EAAAzgB,GAO7BlT,OAAAC,eAAW0zB,EAAAzyB,UAAA,iBAAX,WACI,OAAOS,KAAK+a,gBAGhB,SAAqBnc,GACboB,KAAK+a,aAAenc,IAIxBoB,KAAK+a,WAAanc,EAClBoB,KAAK4E,iDAUTvG,OAAAC,eAAW0zB,EAAAzyB,UAAA,sBAAX,WACI,OAAOS,KAAKgtB,qBAGhB,SAA0BpuB,GACtBA,EAAQkK,KAAKwC,IAAIxC,KAAKsC,IAAI,EAAGxM,GAAQ,GAEjCoB,KAAKgtB,kBAAoBpuB,IAI7BoB,KAAKgtB,gBAAkBpuB,EACvBoB,KAAK4E,iDAITvG,OAAAC,eAAW0zB,EAAAzyB,UAAA,kBAAX,WACI,OAAOS,KAAKsT,iBAGhB,SAAsB1U,GACdoB,KAAKsT,cAAgB1U,IAIzBoB,KAAKsT,YAAc1U,EACnBoB,KAAK4E,iDAITvG,OAAAC,eAAW0zB,EAAAzyB,UAAA,iBAAX,WACI,OAAOS,KAAK+sB,gBAGhB,SAAqBnuB,GAArB,IAAAyG,EAAArF,KACQA,KAAK+sB,aAAenuB,IAIxBoB,KAAK+sB,WAAanuB,EAClBoB,KAAK4E,eAEL5E,KAAKitB,6BAA6BliB,gBAAgBnM,GAE9CoB,KAAK+sB,YAAc/sB,KAAK+E,OAExB/E,KAAK+E,MAAM8b,qBAAqB,SAAC9O,GAC7B,GAAIA,IAAY1M,QAIa6sB,IAAnBngB,EAASkgB,MAAnB,CAGA,IAAIE,EAA2BpgB,EAC3BogB,EAAWF,QAAU5sB,EAAK4sB,QAC1BE,EAAW7E,WAAY,wCAgB7B0E,EAAAzyB,UAAAkF,aAAV,WACI,MAAO,eAGJutB,EAAAzyB,UAAAuM,MAAP,SAAavB,EAAwBhB,GAIjC,GAHAA,EAAQ2K,OAERlU,KAAKiK,aAAaV,GACdvJ,KAAKsK,iBAAiBC,EAAehB,GAAU,CAC/C,IAAI2jB,EAAcltB,KAAKI,gBAAgB8E,MAAQlF,KAAK+a,WAChDoS,EAAentB,KAAKI,gBAAgB+E,OAASnF,KAAK+a,WA4BtD,IA1BI/a,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,eAIjCuP,EAAAlT,QAAQ6P,YAAY5P,KAAKI,gBAAgB6F,KAAOjG,KAAKI,gBAAgB8E,MAAQ,EAAGlF,KAAKI,gBAAgB8F,IAAMlG,KAAKI,gBAAgB+E,OAAS,EACrInF,KAAKI,gBAAgB8E,MAAQ,EAAIlF,KAAK+a,WAAa,EAAG/a,KAAKI,gBAAgB+E,OAAS,EAAInF,KAAK+a,WAAa,EAAGxR,GAEjHA,EAAQY,UAAYnK,KAAKoD,WAAapD,KAAKsT,YAActT,KAAKqD,eAC9DkG,EAAQ2R,QAEJlb,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ5F,WAAa,EACrB4F,EAAQ9F,cAAgB,EACxB8F,EAAQ7F,cAAgB,GAG5B6F,EAAQwM,YAAc/V,KAAKmb,MAC3B5R,EAAQuM,UAAY9V,KAAK+a,WAEzBxR,EAAQ6R,SAGJpb,KAAK+sB,WAAY,CACjBxjB,EAAQY,UAAYnK,KAAKoD,WAAapD,KAAKmb,MAAQnb,KAAKqD,eACxD,IAAI+pB,EAAcF,EAAcltB,KAAKgtB,gBACjCK,EAAcF,EAAentB,KAAKgtB,gBAEtC/Z,EAAAlT,QAAQ6P,YAAY5P,KAAKI,gBAAgB6F,KAAOjG,KAAKI,gBAAgB8E,MAAQ,EAAGlF,KAAKI,gBAAgB8F,IAAMlG,KAAKI,gBAAgB+E,OAAS,EACrIioB,EAAc,EAAIptB,KAAK+a,WAAa,EAAGsS,EAAc,EAAIrtB,KAAK+a,WAAa,EAAGxR,GAElFA,EAAQ2R,QAIhB3R,EAAQiL,WAILwd,EAAAzyB,UAAAsN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAAhS,UAAMsN,eAAc/O,KAAAkC,KAACyM,EAAQC,EAAaN,EAAWC,KAIrDrM,KAAKstB,YACNttB,KAAKstB,WAAY,IAGd,IAWG0E,EAAAI,yBAAd,SAAuC5E,EAAeyE,EAAe3E,EAAoBG,GACrF,IAAIC,EAAQ,IAAIqE,EAAA/Z,WAChB0V,EAAMC,YAAa,EACnBD,EAAMvoB,OAAS,OAEf,IAAIktB,EAAQ,IAAIL,EAChBK,EAAMntB,MAAQ,OACdmtB,EAAMltB,OAAS,OACfktB,EAAM/E,UAAYA,EAClB+E,EAAMlX,MAAQ,QACdkX,EAAMJ,MAAQA,EACdI,EAAMpF,6BAA6BxnB,IAAI,SAAC7G,GAAU,OAAA6uB,EAAe4E,EAAOzzB,KACxE8uB,EAAM1b,WAAWqgB,GAEjB,IAAIxE,EAAS,IAAIkE,EAAApd,UAQjB,OAPAkZ,EAAOlf,KAAO6e,EACdK,EAAO3oB,MAAQ,QACf2oB,EAAOjE,YAAc,MACrBiE,EAAOlE,wBAA0B1W,EAAAlT,QAAQmH,0BACzC2mB,EAAO1S,MAAQ,QACfuS,EAAM1b,WAAW6b,GAEVH,GAEfsE,EArMA,CAAiC/e,EAAAlT,SAApB9C,EAAA+0B,kcCRb,IAAA/e,EAAAxV,EAAA,GACAkC,EAAAlC,EAAA,GACAmC,EAAAnC,EAAA,GAMA60B,EAAA,SAAA/gB,GAkLI,SAAA+gB,EAAmBp0B,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OAjLXmH,EAAAktB,YAAc,IAAI5yB,EAAAgB,aAAa,GAAIhB,EAAAgB,aAAaC,gBAAgB,GAChEyE,EAAAmtB,SAAW,EACXntB,EAAAotB,SAAW,IACXptB,EAAA8K,OAAS,GACT9K,EAAA4S,aAAc,EACd5S,EAAAiO,YAAc,QACdjO,EAAAqtB,aAAe,QACfrtB,EAAAstB,WAAa,IAAIhzB,EAAAgB,aAAa,EAAGhB,EAAAgB,aAAaC,gBAAgB,GAC9DyE,EAAAutB,gBAAiB,EACjBvtB,EAAAwtB,iBAAkB,EAGnBxtB,EAAAytB,yBAA2B,IAAIlzB,EAAAqE,WA8Y9BoB,EAAA0tB,gBAAiB,EAtOrB1tB,EAAK9B,kBAAmB,IAkRhC,OAvc4BoO,EAAA2gB,EAAA/gB,GAgBxBlT,OAAAC,eAAWg0B,EAAA/yB,UAAA,mBAAX,WACI,OAAOS,KAAK0yB,kBAGhB,SAAuB9zB,GACfoB,KAAK0yB,eAAiB9zB,IAI1BoB,KAAK0yB,aAAe9zB,EACpBoB,KAAK4E,iDAITvG,OAAAC,eAAWg0B,EAAA/yB,UAAA,kBAAX,WACI,OAAOS,KAAKsT,iBAGhB,SAAsB1U,GACdoB,KAAKsT,cAAgB1U,IAIzBoB,KAAKsT,YAAc1U,EACnBoB,KAAK4E,iDAITvG,OAAAC,eAAWg0B,EAAA/yB,UAAA,iBAAX,WACI,OAAOS,KAAK2yB,WAAW7tB,SAAS9E,KAAK+E,YAQzC,SAAqBnG,GACboB,KAAK2yB,WAAW7tB,SAAS9E,KAAK+E,SAAWnG,GAIzCoB,KAAK2yB,WAAW3tB,WAAWpG,IAC3BoB,KAAK4E,gDAVbvG,OAAAC,eAAWg0B,EAAA/yB,UAAA,yBAAX,WACI,OAAOS,KAAK2yB,WAAW1tB,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB0D,wCAcjF7G,OAAAC,eAAWg0B,EAAA/yB,UAAA,kBAAX,WACI,OAAOS,KAAKuyB,YAAYztB,SAAS9E,KAAK+E,YAQ1C,SAAsBnG,GACdoB,KAAKuyB,YAAYztB,SAAS9E,KAAK+E,SAAWnG,GAI1CoB,KAAKuyB,YAAYvtB,WAAWpG,IAC5BoB,KAAK4E,gDAVbvG,OAAAC,eAAWg0B,EAAA/yB,UAAA,0BAAX,WACI,OAAOS,KAAKuyB,YAAYttB,gBAAgBjF,KAAK+E,MAAO/E,KAAKwB,qBAAqB0D,wCAclF7G,OAAAC,eAAWg0B,EAAA/yB,UAAA,eAAX,WACI,OAAOS,KAAKwyB,cAGhB,SAAmB5zB,GACXoB,KAAKwyB,WAAa5zB,IAItBoB,KAAKwyB,SAAW5zB,EAChBoB,KAAK4E,eAEL5E,KAAKpB,MAAQkK,KAAKwC,IAAIxC,KAAKsC,IAAIpL,KAAKpB,MAAOoB,KAAKyyB,UAAWzyB,KAAKwyB,4CAIpEn0B,OAAAC,eAAWg0B,EAAA/yB,UAAA,eAAX,WACI,OAAOS,KAAKyyB,cAGhB,SAAmB7zB,GACXoB,KAAKyyB,WAAa7zB,IAItBoB,KAAKyyB,SAAW7zB,EAChBoB,KAAK4E,eAEL5E,KAAKpB,MAAQkK,KAAKwC,IAAIxC,KAAKsC,IAAIpL,KAAKpB,MAAOoB,KAAKyyB,UAAWzyB,KAAKwyB,4CAIpEn0B,OAAAC,eAAWg0B,EAAA/yB,UAAA,aAAX,WACI,OAAOS,KAAKmQ,YAGhB,SAAiBvR,GACbA,EAAQkK,KAAKwC,IAAIxC,KAAKsC,IAAIxM,EAAOoB,KAAKyyB,UAAWzyB,KAAKwyB,UAElDxyB,KAAKmQ,SAAWvR,IAIpBoB,KAAKmQ,OAASvR,EACdoB,KAAK4E,eACL5E,KAAK8yB,yBAAyB/nB,gBAAgB/K,KAAKmQ,0CAIvD9R,OAAAC,eAAWg0B,EAAA/yB,UAAA,kBAAX,WACI,OAAOS,KAAKiY,iBAGhB,SAAsBrZ,GACdoB,KAAKiY,cAAgBrZ,IAIzBoB,KAAKiY,YAAcrZ,EACnBoB,KAAK4E,iDAITvG,OAAAC,eAAWg0B,EAAA/yB,UAAA,qBAAX,WACI,OAAOS,KAAK4yB,oBAGhB,SAAyBh0B,GACjBoB,KAAK4yB,iBAAmBh0B,IAI5BoB,KAAK4yB,eAAiBh0B,EACtBoB,KAAK4E,iDAITvG,OAAAC,eAAWg0B,EAAA/yB,UAAA,sBAAX,WACI,OAAOS,KAAK6yB,qBAGhB,SAA0Bj0B,GAClBoB,KAAK6yB,kBAAoBj0B,IAI7BoB,KAAK6yB,gBAAkBj0B,EACvBoB,KAAK4E,iDAaC0tB,EAAA/yB,UAAAkF,aAAV,WACI,MAAO,UAGD6tB,EAAA/yB,UAAAyzB,mBAAV,SAA6B7mB,EAAc8mB,GACvC,IAAIC,EAAiB,EACrB,OAAQ/mB,GACJ,IAAK,SAEG+mB,EADAlzB,KAAKuyB,YAAY3sB,QACAkD,KAAKwC,IAAItL,KAAKuyB,YAAY1sB,SAAS7F,KAAK+E,OAAQkuB,GAGhDA,EAAmBjzB,KAAKuyB,YAAY1sB,SAAS7F,KAAK+E,OAEvE,MACJ,IAAK,YAEGmuB,EADAlzB,KAAKuyB,YAAY3sB,QACAkD,KAAKsC,IAAIpL,KAAKuyB,YAAY1sB,SAAS7F,KAAK+E,OAAQkuB,GAGhDA,EAAmBjzB,KAAKuyB,YAAY1sB,SAAS7F,KAAK+E,OAG/E,OAAOmuB,GAIJZ,EAAA/yB,UAAAuM,MAAP,SAAavB,EAAwBhB,GAIjC,GAHAA,EAAQ2K,OAERlU,KAAKiK,aAAaV,GACdvJ,KAAKsK,iBAAiBC,EAAehB,GAAU,CAE/C,IAAI4pB,EAAqB,EACrBhnB,EAAOnM,KAAKozB,cAAgB,SAAW,YACvCntB,EAAOjG,KAAKI,gBAAgB6F,KAC5BC,EAAMlG,KAAKI,gBAAgB8F,IAC3BhB,EAAQlF,KAAKI,gBAAgB8E,MAC7BC,EAASnF,KAAKI,gBAAgB+E,OAE9BkuB,EAAsBvqB,KAAKwC,IAAItL,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,QAChFmuB,EAAyBxqB,KAAKsC,IAAIpL,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,QAEnFouB,EAA0BvzB,KAAKgzB,mBAAmB7mB,EAAMmnB,GAC5DD,GAAuBE,EAEvB,IAAIjY,EAAS,EAIb,GAAKtb,KAAKiY,aAAejY,KAAKI,gBAAgB+E,OAASnF,KAAKI,gBAAgB8E,MAExE,YADAsuB,QAAQC,MAAM,uCAUlBH,GAAgD,GAN5CH,EADAnzB,KAAK2yB,WAAW/sB,QACKkD,KAAKsC,IAAIpL,KAAK2yB,WAAW9sB,SAAS7F,KAAK+E,OAAQuuB,GAG/CA,EAAyBtzB,KAAK2yB,WAAW9sB,SAAS7F,KAAK+E,QAK5E/E,KAAKiY,aACLhS,GAAQktB,EACHnzB,KAAK0zB,iBACNxtB,GAAQqtB,EAA0B,GAGtCpuB,EAASkuB,EACTnuB,EAAQouB,IAIRptB,GAAOitB,EACFnzB,KAAK0zB,iBACNztB,GAASstB,EAA0B,GAEvCpuB,EAASmuB,EACTpuB,EAAQmuB,GAGRrzB,KAAK0zB,gBAAkB1zB,KAAKozB,eACxBpzB,KAAKiY,YACL/R,GAAQqtB,EAA0B,EAElCttB,GAASstB,EAA0B,EAEvCjY,EAASgY,EAAyB,GAGlChY,GAAUiY,EAA0BJ,GAAsB,GAG1DnzB,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,eAGjC,IAAIiwB,EAAiB3zB,KAAgB,aAAMA,KAAKyyB,SAAWzyB,KAAKmQ,SAAWnQ,KAAKyyB,SAAWzyB,KAAKwyB,UAAaa,GAAwBrzB,KAAKmQ,OAASnQ,KAAKwyB,WAAaxyB,KAAKyyB,SAAWzyB,KAAKwyB,UAAaa,EACvM9pB,EAAQY,UAAYnK,KAAKsT,YAErBtT,KAAKiY,YACDjY,KAAK0zB,eACD1zB,KAAKozB,eACL7pB,EAAQ2B,YACR3B,EAAQsG,IAAI5J,EAAOqtB,EAAyB,EAAGptB,EAAKoV,EAAQxS,KAAKgH,GAAI,EAAIhH,KAAKgH,IAC9EvG,EAAQ2R,OACR3R,EAAQ0K,SAAShO,EAAMC,EAAKhB,EAAOC,IAGnCoE,EAAQ0K,SAAShO,EAAMC,EAAKhB,EAAOC,EAASouB,GAIhDhqB,EAAQ0K,SAAShO,EAAMC,EAAKhB,EAAOC,GAInCnF,KAAK0zB,eACD1zB,KAAKozB,eACL7pB,EAAQ2B,YACR3B,EAAQsG,IAAI5J,EAAOotB,EAAqBntB,EAAOotB,EAAyB,EAAIhY,EAAQ,EAAG,EAAIxS,KAAKgH,IAChGvG,EAAQ2R,OACR3R,EAAQ0K,SAAShO,EAAMC,EAAKhB,EAAOC,IAGnCoE,EAAQ0K,SAAShO,EAAMC,EAAKhB,EAAQquB,EAAyBpuB,GAIjEoE,EAAQ0K,SAAShO,EAAMC,EAAKhB,EAAOC,IAIvCnF,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ5F,WAAa,EACrB4F,EAAQ9F,cAAgB,EACxB8F,EAAQ7F,cAAgB,GAG5B6F,EAAQY,UAAYnK,KAAKmb,MACrBnb,KAAKiY,YACDjY,KAAK0zB,eACD1zB,KAAKozB,eACL7pB,EAAQ2B,YACR3B,EAAQsG,IAAI5J,EAAOqtB,EAAyB,EAAGptB,EAAMmtB,EAAqB/X,EAAQ,EAAG,EAAIxS,KAAKgH,IAC9FvG,EAAQ2R,OACR3R,EAAQ0K,SAAShO,EAAMC,EAAMytB,EAAezuB,EAAOC,EAASwuB,IAG5DpqB,EAAQ0K,SAAShO,EAAMC,EAAMytB,EAAezuB,EAAOlF,KAAKI,gBAAgB+E,OAASwuB,GAIrFpqB,EAAQ0K,SAAShO,EAAMC,EAAMytB,EAAezuB,EAAOC,EAASwuB,GAI5D3zB,KAAK0zB,gBACD1zB,KAAKozB,eACL7pB,EAAQ2B,YACR3B,EAAQsG,IAAI5J,EAAMC,EAAMotB,EAAyB,EAAGhY,EAAQ,EAAG,EAAIxS,KAAKgH,IACxEvG,EAAQ2R,OACR3R,EAAQ0K,SAAShO,EAAMC,EAAKytB,EAAexuB,IAO/CoE,EAAQ0K,SAAShO,EAAMC,EAAKytB,EAAexuB,IAK/CnF,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,eAE7B1D,KAAK4yB,gBACLrpB,EAAQ2B,YACJlL,KAAKiY,YACL1O,EAAQsG,IAAI5J,EAAOqtB,EAAyB,EAAGptB,EAAMytB,EAAerY,EAAQ,EAAG,EAAIxS,KAAKgH,IAGxFvG,EAAQsG,IAAI5J,EAAO0tB,EAAeztB,EAAOotB,EAAyB,EAAIhY,EAAQ,EAAG,EAAIxS,KAAKgH,IAE9FvG,EAAQ2R,QACJlb,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ5F,WAAa,EACrB4F,EAAQ9F,cAAgB,EACxB8F,EAAQ7F,cAAgB,GAE5B6F,EAAQwM,YAAc/V,KAAK0yB,aAC3BnpB,EAAQ6R,WAGJpb,KAAKiY,YACL1O,EAAQ0K,SAAShO,EAAOktB,EAAoBnzB,KAAKI,gBAAgB8F,IAAMytB,EAAe3zB,KAAKI,gBAAgB8E,MAAOquB,GAGlHhqB,EAAQ0K,SAASjU,KAAKI,gBAAgB6F,KAAO0tB,EAAe3zB,KAAKI,gBAAgB8F,IAAKqtB,EAAyBvzB,KAAKI,gBAAgB+E,SAEpInF,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ5F,WAAa,EACrB4F,EAAQ9F,cAAgB,EACxB8F,EAAQ7F,cAAgB,GAE5B6F,EAAQwM,YAAc/V,KAAK0yB,aACvB1yB,KAAKiY,YACL1O,EAAQ8R,WAAWpV,EAAOktB,EAAoBnzB,KAAKI,gBAAgB8F,IAAMytB,EAAe3zB,KAAKI,gBAAgB8E,MAAOquB,GAGpHhqB,EAAQ8R,WAAWrb,KAAKI,gBAAgB6F,KAAO0tB,EAAe3zB,KAAKI,gBAAgB8F,IAAKqtB,EAAyBvzB,KAAKI,gBAAgB+E,SAIlJoE,EAAQiL,WAOJ8d,EAAA/yB,UAAAq0B,wBAAR,SAAgCltB,EAAWC,GAClB,GAAjB3G,KAAK6zB,WACL7zB,KAAKuC,uBAAuByJ,qBAAqBtF,EAAGC,EAAG3G,KAAKwC,sBAC5DkE,EAAI1G,KAAKwC,qBAAqBkE,EAC9BC,EAAI3G,KAAKwC,qBAAqBmE,GAG9B3G,KAAKiY,YACLjY,KAAKpB,MAAQoB,KAAKwyB,UAAY,GAAM7rB,EAAI3G,KAAKI,gBAAgB8F,KAAOlG,KAAKI,gBAAgB+E,SAAYnF,KAAKyyB,SAAWzyB,KAAKwyB,UAG1HxyB,KAAKpB,MAAQoB,KAAKwyB,UAAa9rB,EAAI1G,KAAKI,gBAAgB6F,MAAQjG,KAAKI,gBAAgB8E,OAAUlF,KAAKyyB,SAAWzyB,KAAKwyB,WAIrHF,EAAA/yB,UAAAsN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAAhS,UAAMsN,eAAc/O,KAAAkC,KAACyM,EAAQC,EAAaN,EAAWC,KAI1DrM,KAAK+yB,gBAAiB,EAEtB/yB,KAAK4zB,wBAAwBlnB,EAAYhG,EAAGgG,EAAY/F,GACxD3G,KAAK+E,MAAMuZ,kBAAkBlS,GAAapM,MAEnC,IAGJsyB,EAAA/yB,UAAAiN,eAAP,SAAsBC,EAAiBC,GAC/B1M,KAAK+yB,gBACL/yB,KAAK4zB,wBAAwBlnB,EAAYhG,EAAGgG,EAAY/F,GAG5D4K,EAAAhS,UAAMiN,eAAc1O,KAAAkC,KAACyM,EAAQC,IAG1B4lB,EAAA/yB,UAAAwN,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmBC,EAAqBW,GAC/FhN,KAAK+yB,gBAAiB,SAEf/yB,KAAK+E,MAAMuZ,kBAAkBlS,GACpCmF,EAAAhS,UAAMwN,aAAYjP,KAAAkC,KAACyM,EAAQC,EAAaN,EAAWC,EAAaW,IAExEslB,EAvcA,CAA4Brf,EAAAlT,SAAf9C,EAAAq1B,wFCRb,IAAA1yB,EAAAnC,EAAA,GAEAkC,EAAAlC,EAAA,GAMAwjB,EAAA,WAkBI,SAAAA,EAAmB5X,GAjBXrJ,KAAAO,YAAc,QACdP,KAAAQ,WAAa,GACbR,KAAAS,YAAc,GAIfT,KAAAU,UAAY,IAAIf,EAAAgB,aAAa,GAAIhB,EAAAgB,aAAaC,gBAAgB,GAK9DZ,KAAAsF,oBAAsB,IAAI1F,EAAAqE,WAO7BjE,KAAK+E,MAAQsE,EAsErB,OAhEIhL,OAAAC,eAAW2iB,EAAA1hB,UAAA,gBAAX,WACI,OAAOS,KAAKU,UAAUoE,SAAS9E,KAAK+E,YAGxC,SAAoBnG,GACZoB,KAAKU,UAAUoE,SAAS9E,KAAK+E,SAAWnG,GAIxCoB,KAAKU,UAAUsE,WAAWpG,IAC1BoB,KAAKsF,oBAAoByF,gBAAgB/K,uCAOjD3B,OAAAC,eAAW2iB,EAAA1hB,UAAA,kBAAX,WACI,OAAOS,KAAKO,iBAGhB,SAAsB3B,GACdoB,KAAKO,cAAgB3B,IAIzBoB,KAAKO,YAAc3B,EACnBoB,KAAKsF,oBAAoByF,gBAAgB/K,wCAM7C3B,OAAAC,eAAW2iB,EAAA1hB,UAAA,iBAAX,WACI,OAAOS,KAAKQ,gBAGhB,SAAqB5B,GACboB,KAAKQ,aAAe5B,IAIxBoB,KAAKQ,WAAa5B,EAClBoB,KAAKsF,oBAAoByF,gBAAgB/K,wCAI7C3B,OAAAC,eAAW2iB,EAAA1hB,UAAA,kBAAX,WACI,OAAOS,KAAKS,iBAGhB,SAAsB7B,GACdoB,KAAKS,cAAgB7B,IAIzBoB,KAAKS,YAAc7B,EACnBoB,KAAKsF,oBAAoByF,gBAAgB/K,wCAItCihB,EAAA1hB,UAAA0O,QAAP,WACIjO,KAAKsF,oBAAoB4I,SAEjC+S,EAzFA,GAAahkB,EAAAgkB,4bCRb,IAAA5P,EAAA5T,EAAA,IACAmC,EAAAnC,EAAA,GAKAwrB,EAAA,SAAA1X,GAKI,SAAA0X,EAAY/qB,UACRqT,EAAAzT,KAAAkC,KAAM9B,IAAK8B,KAWnB,OAjBsC2R,EAAAsX,EAAA1X,GASxB0X,EAAA1pB,UAAAkF,aAAV,WACI,MAAO,oBAIDwkB,EAAA1pB,UAAA+S,YAAV,SAAsBvL,GAClB,OAAO,IAAInH,EAAA2S,cAAc,SAAWvS,KAAK9B,OAEjD+qB,EAjBA,CAAsC5X,EAAA2B,WAAzB/V,EAAAgsB,ucCNb,IAKA5B,EAAA,SAAA9V,GAMI,SAAA8V,EAAmB1W,EAERtE,QAAA,IAAAA,MAAA,GAFX,IAAAhH,EAGIkM,EAAAzT,KAAAkC,KAAM2Q,EAAOjK,EAAGiK,EAAOhK,EAAGgK,EAAO9I,IAAE7H,YAD5BqF,EAAAgH,gBAGf,OAXqCsF,EAAA0V,EAAA9V,GAWrC8V,EAXA,CALA5pB,EAAA,GAKqC+J,SAAxBvK,EAAAoqB,myBCLb,IAAAznB,EAAAnC,EAAA,GAEAA,EAAA,IAGAq2B,iBAGA,IAAAC,EAAA,SAAAxiB,GAMI,SAAAwiB,IAAA,IAAA1uB,EACIkM,EAAAzT,KAAAkC,OAAOA,YANJqF,EAAA2uB,WAAY,EACZ3uB,EAAA4uB,QAAS,EACT5uB,EAAA6uB,YAAa,EACb7uB,EAAA8uB,SAAU,EAIb9uB,EAAK+uB,YAEb,OAV2CziB,EAAAoiB,EAAAxiB,GAU3CwiB,EAVA,CAA2Cn0B,EAAAy0B,iBAA9Bp3B,EAAA82B,wBAeb,IAAAO,EAAA,SAAA/iB,GAyFI,SAAA+iB,EAAYp2B,EAAc6I,GAA1B,IAAA1B,EACIkM,EAAAzT,KAAAkC,KAAM9B,EAAM6I,IAAM/G,YAnFfqF,EAAAkvB,wBAA0B,GAM1BlvB,EAAAmvB,eAAiB,IAAI50B,EAAAwlB,OAAO,EAAK,EAAK,GAMtC/f,EAAAgF,MAAQ,EAMRhF,EAAAovB,YAAc,IAAI70B,EAAAwlB,OAAO,GAAK,IAAM,IAOpC/f,EAAAqvB,eAAgB,EAMhBrvB,EAAAsvB,YAAc,GAMdtvB,EAAAuvB,mBAAqB,IAMrBvvB,EAAAwvB,eAAiB,GAOjBxvB,EAAAyvB,kBAAmB,EAMnBzvB,EAAA0vB,YAAc,EAMd1vB,EAAA2vB,WAAa,IAAIp1B,EAAAq1B,OAAO,GAAK,GAAK,GAAK,GAMvC5vB,EAAA6vB,cAAgBt1B,EAAA4H,QAAQ9E,SA4MnC,OAvRoCiP,EAAA2iB,EAAA/iB,GA6FzB+iB,EAAA/0B,UAAA41B,kBAAP,WACI,OAAsB,IAAfn1B,KAAKqK,OAGTiqB,EAAA/0B,UAAA61B,iBAAP,WACI,OAAO,GAGJd,EAAA/0B,UAAA81B,oBAAP,WACI,OAAO,MAGJf,EAAA/0B,UAAA+1B,kBAAP,SAAyBptB,EAAoBqtB,EAAkBC,GAC3D,GAAIx1B,KAAKy1B,UACDz1B,KAAK01B,qBAAuBH,EAAQI,OACpC,OAAO,EAIVJ,EAAQK,mBACTL,EAAQK,iBAAmB,IAAI7B,GAGnC,IAAIhtB,EAAQ/G,KAAKif,WACb4W,EAAiCN,EAAQK,iBAC7C,IAAK51B,KAAK81B,uBAAyBP,EAAQI,QACnCE,EAAQE,YAAchvB,EAAMivB,cAC5B,OAAO,EAIf,GAAIH,EAAQI,kBAKR,GAJAJ,EAAQ7B,UAAYh0B,KAAKu0B,wBAA0B,EACnDsB,EAAQ5B,OAASj0B,KAAK00B,cACtBmB,EAAQ3B,WAAal0B,KAAK80B,iBAEtB90B,KAAKk2B,eAAgB,CACrB,IAAKl2B,KAAKk2B,eAAeC,uBACrB,OAAO,EAEPN,EAAQ1B,SAAU,OAGtB0B,EAAQ1B,SAAU,EAI1B,IAAI1S,EAAS1a,EAAMqY,YAEnB,GAAIyW,EAAQnT,QAAS,CACjBmT,EAAQO,kBACRrvB,EAAMsvB,sBAGN,IAAIC,GAAW12B,EAAA22B,aAAaC,cAC5BF,EAAQ9tB,KAAK5I,EAAA22B,aAAaE,YAC1BH,EAAQ9tB,KAAK5I,EAAA22B,aAAaG,QAE1B,IAEIC,GAAY,QAAS,iBAAkB,iBAAkB,cAAe,cAAe,qBAAsB,cAAe,iBAC5H,aAAc,gBAAiB,eAG/BC,GAAY,iBACZC,EAAiB,IAAInlB,MAEzB9R,EAAAk3B,eAAeC,gCACXC,cAAeL,EACfM,oBAAqBJ,EACrBD,SAAUA,EACVf,QAASA,EACTqB,sBAAuB,IAG3B,IAAIC,EAAOtB,EAAQ/wB,WACnBywB,EAAQ6B,UAAUrwB,EAAMqY,YAAYiY,aAlBnB,UAoBTC,WAAYhB,EACZU,cAAeL,EACfM,oBAAqBJ,EACrBD,SAAUA,EACVf,QAASsB,EACTI,UAAW,KACXC,WAAYx3B,KAAKw3B,WACjBC,QAASz3B,KAAKy3B,QACdC,iBAAmBR,sBAAuB,IAC3CzV,IAIX,SAAK8T,EAAQI,SAAWJ,EAAQI,OAAOpV,aAIvCsV,EAAQE,UAAYhvB,EAAMivB,cAC1Bh2B,KAAK01B,qBAAsB,GAEpB,IAGJpB,EAAA/0B,UAAAo4B,eAAP,SAAsBC,EAAe1vB,EAAYqtB,GAC7C,IAAIxuB,EAAQ/G,KAAKif,WAEb4W,EAAiCN,EAAQK,iBAC7C,GAAKC,EAAL,CAIA,IAAIF,EAASJ,EAAQI,OAChBA,IAGL31B,KAAK63B,cAAgBlC,EAGrB31B,KAAK83B,oBAAoBF,GACzB53B,KAAK63B,cAAcE,UAAU,iBAAkBhxB,EAAMY,sBAGjD3H,KAAKg4B,YAAYjxB,EAAO4uB,KACxB31B,KAAK63B,cAAcI,UAAU,cAAej4B,KAAKy0B,YAAaz0B,KAAKqK,OAE/DwrB,EAAQ7B,WACRh0B,KAAK63B,cAAcI,UAAU,iBAAkBj4B,KAAKw0B,eAAgBx0B,KAAKu0B,yBAGzEsB,EAAQ5B,SACRj0B,KAAK63B,cAAcK,SAAS,cAAel4B,KAAK20B,aAChD30B,KAAK63B,cAAcK,SAAS,qBAAsBl4B,KAAK40B,oBACvD50B,KAAK63B,cAAcK,SAAS,iBAAkBl4B,KAAK60B,gBAEnD3sB,EAAKoa,kBAAkBzI,YAAYE,WAAWuR,cAAcpjB,EAAKie,QAASvmB,EAAAoa,IAAIxS,QAAQ,IACtFxH,KAAK63B,cAAcM,WAAW,cAAev4B,EAAAoa,IAAIxS,QAAQ,KAGzDquB,EAAQ3B,aACRl0B,KAAK63B,cAAcO,gBAAgB,aAAcp4B,KAAKg1B,YACtDh1B,KAAK63B,cAAcK,SAAS,cAAel4B,KAAK+0B,aAChD/0B,KAAK63B,cAAcM,WAAW,gBAAiBn4B,KAAKk1B,gBAGpDW,EAAQ1B,SACRn0B,KAAK63B,cAAcQ,WAAW,gBAAiBr4B,KAAKk2B,iBAI5Dl2B,KAAKs4B,WAAWpwB,EAAMlI,KAAK63B,kBAGxBvD,EAAA/0B,UAAAg5B,kBAAP,WAGI,OAFqBhnB,EAAAhS,UAAMg5B,kBAAiBz6B,KAAAkC,OAKzCs0B,EAAA/0B,UAAAi5B,WAAP,SAAkBhX,GACd,QAAIjQ,EAAAhS,UAAMi5B,WAAU16B,KAAAkC,KAACwhB,IAOlB8S,EAAA/0B,UAAA0O,QAAP,SAAewqB,GACXlnB,EAAAhS,UAAM0O,QAAOnQ,KAAAkC,KAACy4B,IAGXnE,EAAA/0B,UAAAm5B,MAAP,SAAax6B,GAAb,IAAAmH,EAAArF,KACI,OAAOJ,EAAA+4B,oBAAoBC,MAAM,WAAM,WAAItE,EAAep2B,EAAMmH,EAAK4Z,aAAajf,OAG/Es0B,EAAA/0B,UAAAs5B,UAAP,WACI,IAAIC,EAAsBl5B,EAAA+4B,oBAAoBI,UAAU/4B,MAExD,OADA84B,EAAoBE,WAAa,6BAC1BF,GAGJxE,EAAA/0B,UAAA05B,aAAP,WACI,MAAO,kBAIG3E,EAAA4E,MAAd,SAAoBvoB,EAAa5J,EAAcoyB,GAC3C,OAAOv5B,EAAA+4B,oBAAoBO,MAAM,WAAM,WAAI5E,EAAe3jB,EAAOzS,KAAM6I,IAAQ4J,EAAQ5J,EAAOoyB,IA9QlGC,GAFCx5B,EAAAi5B,YACAj5B,EAAAy5B,iBAAiB,mFAOlBD,GADCx5B,EAAA05B,0DAODF,GADCx5B,EAAAi5B,yCAODO,GADCx5B,EAAA05B,uDAQDF,GAFCx5B,EAAAi5B,YACAj5B,EAAAy5B,iBAAiB,yEAOlBD,GADCx5B,EAAAi5B,+CAODO,GADCx5B,EAAAi5B,sDAODO,GADCx5B,EAAAi5B,kDAQDO,GAFCx5B,EAAAi5B,YACAj5B,EAAAy5B,iBAAiB,4EAOlBD,GADCx5B,EAAAi5B,+CAODO,GADCx5B,EAAA25B,sDAODH,GADCx5B,EAAA45B,0DAIDJ,GADCx5B,EAAA65B,mBAAmB,uDAKpBL,GADCx5B,EAAAy5B,iBAAiB,gFAsMtB/E,EAvRA,CAAoC10B,EAAA85B,cAAvBz8B,EAAAq3B,6GCvBb,IAAAqF,EAAAl8B,EAAA,IAQIm8B,OAAkC,IAAXC,EAA0BA,EAA6B,oBAAXv8B,OAA0BA,YAAS40B,OAC9E,IAAjB0H,IACDA,EAAcE,QAAgBF,EAAcE,YAC5CF,EAAcE,QAAQH,IAAMA,+DAGtC9e,CAAApd,EAAA,uCCdA,IAAAs8B,EAGAA,EAAA,WACA,OAAA/5B,KADA,GAIA,IAEA+5B,KAAAC,SAAA,cAAAA,KAAA,EAAAC,MAAA,QACC,MAAAC,GAED,iBAAA58B,SAAAy8B,EAAAz8B,QAOAJ,EAAAD,QAAA88B,+ICnBAlf,EAAApd,EAAA,IAEAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,IACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,wbCPA,IAAAwV,EAAAxV,EAAA,GACAmC,EAAAnC,EAAA,GAIA08B,EAAA,SAAA5oB,GAkFI,SAAA4oB,EAAmBj8B,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OA/EXmH,EAAA8K,OAAiBvQ,EAAAwlB,OAAO6C,MACxB5iB,EAAA+0B,UAAY,IAAIx6B,EAAAwlB,OAEhB/f,EAAAg1B,yBAA0B,EAC1Bh1B,EAAAi1B,wBAAyB,EAEzBj1B,EAAAk1B,YAAc,EACdl1B,EAAAm1B,WAAa,EACbn1B,EAAAo1B,YAAc,EAEdp1B,EAAAq1B,GAAK,IACLr1B,EAAAs1B,GAAK,EACLt1B,EAAAu1B,GAAK,EAKNv1B,EAAAytB,yBAA2B,IAAIlzB,EAAAqE,WAkT9BoB,EAAA0tB,gBAAiB,EAlPrB1tB,EAAKzG,MAAQ,IAAIgB,EAAAwlB,OAAO,IAAK,GAAI,IACjC/f,EAAKkf,KAAO,QACZlf,EAAK9B,kBAAmB,IAgVhC,OAtaiCoO,EAAAwoB,EAAA5oB,GAuB7BlT,OAAAC,eAAW67B,EAAA56B,UAAA,aAAX,WACI,OAAOS,KAAKmQ,YAGhB,SAAiBvR,GACToB,KAAKmQ,OAAO0qB,OAAOj8B,KAIvBoB,KAAKmQ,OAAO1F,SAAS7L,GAErBoB,KAAK86B,UAAU96B,KAAKmQ,OAAQnQ,KAAKo6B,WAEjCp6B,KAAK06B,GAAK16B,KAAKo6B,UAAU37B,EACzBuB,KAAK26B,GAAK7xB,KAAKwC,IAAItL,KAAKo6B,UAAUL,EAAG,MACrC/5B,KAAK46B,GAAK9xB,KAAKwC,IAAItL,KAAKo6B,UAAUW,EAAG,MAErC/6B,KAAK4E,eAEL5E,KAAK8yB,yBAAyB/nB,gBAAgB/K,KAAKmQ,0CAIvD9R,OAAAC,eAAW67B,EAAA56B,UAAA,aAAX,SAAiBX,GACToB,KAAKa,OAAOiE,SAAS9E,KAAK+E,SAAWnG,GAIrCoB,KAAKa,OAAOmE,WAAWpG,KACvBoB,KAAKe,QAAQiE,WAAWpG,GACxBoB,KAAK4E,iDAKbvG,OAAAC,eAAW67B,EAAA56B,UAAA,cAAX,SAAkBX,GACVoB,KAAKe,QAAQ+D,SAAS9E,KAAK+E,SAAWnG,GAItCoB,KAAKe,QAAQiE,WAAWpG,KACxBoB,KAAKa,OAAOmE,WAAWpG,GACvBoB,KAAK4E,iDAKbvG,OAAAC,eAAW67B,EAAA56B,UAAA,YAAX,WACI,OAAOS,KAAKkF,WAGhB,SAAgBtG,GACZoB,KAAKkF,MAAQtG,mCAcPu7B,EAAA56B,UAAAkF,aAAV,WACI,MAAO,eAGH01B,EAAA56B,UAAAy7B,mBAAR,WACI,IAAI1f,EAA6E,GAApExS,KAAKsC,IAAIpL,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,QAGnE81B,EAD4C,GAA3B3f,EADS,GAATA,GAEaxS,KAAKoyB,KAAK,GACxCv2B,EAAS2W,EAAsB,GAAb2f,EAEtBj7B,KAAKu6B,YAAcv6B,KAAKI,gBAAgB6F,KAAOtB,EAC/C3E,KAAKw6B,WAAax6B,KAAKI,gBAAgB8F,IAAMvB,EAC7C3E,KAAKy6B,YAAcQ,GAGfd,EAAA56B,UAAA47B,oBAAR,SAA4BC,EAAkBn1B,EAAcC,EAAahB,EAAeC,EAAgBoE,GACpG,IAAI8xB,EAAM9xB,EAAQ+xB,qBAAqBr1B,EAAMC,EAAKhB,EAAQe,EAAMC,GAChEm1B,EAAIE,aAAa,EAAG,QACpBF,EAAIE,aAAa,EAAG,OAASH,EAAW,gBAExC7xB,EAAQY,UAAYkxB,EACpB9xB,EAAQ0K,SAAShO,EAAMC,EAAKhB,EAAOC,GAEnC,IAAIq2B,EAAMjyB,EAAQ+xB,qBAAqBr1B,EAAMC,EAAKD,EAAMd,EAASe,GACjEs1B,EAAID,aAAa,EAAG,iBACpBC,EAAID,aAAa,EAAG,QAEpBhyB,EAAQY,UAAYqxB,EACpBjyB,EAAQ0K,SAAShO,EAAMC,EAAKhB,EAAOC,IAG/Bg1B,EAAA56B,UAAAk8B,YAAR,SAAoB9d,EAAiBC,EAAiBtC,EAAgB/R,GAClEA,EAAQ2B,YACR3B,EAAQsG,IAAI8N,EAASC,EAAStC,EAAS,EAAG,EAAG,EAAIxS,KAAKgH,IAAI,GAC1DvG,EAAQuM,UAAY,EACpBvM,EAAQwM,YAAc,UACtBxM,EAAQ6R,SACR7R,EAAQ2B,YACR3B,EAAQsG,IAAI8N,EAASC,EAAStC,EAAQ,EAAG,EAAIxS,KAAKgH,IAAI,GACtDvG,EAAQuM,UAAY,EACpBvM,EAAQwM,YAAc,UACtBxM,EAAQ6R,UAGJ+e,EAAA56B,UAAAm8B,wBAAR,SAAgCpgB,EAAgBgO,GAC5C,IAAIqS,EAAS/sB,SAASC,cAAc,UACpC8sB,EAAOz2B,MAAiB,EAAToW,EACfqgB,EAAOx2B,OAAkB,EAATmW,EAUhB,IATA,IAAI/R,EAAoCoyB,EAAO7jB,WAAW,MACtD8jB,EAAQryB,EAAQsyB,aAAa,EAAG,EAAY,EAATvgB,EAAqB,EAATA,GAC/CwgB,EAAOF,EAAME,KAEb3gB,EAAQnb,KAAKo6B,UACb2B,EAAYzgB,EAASA,EACrB0gB,EAAc1gB,EAASgO,EACvB2S,EAAYD,EAAcA,EAErBt1B,GAAK4U,EAAQ5U,EAAI4U,EAAQ5U,IAC9B,IAAK,IAAIC,GAAK2U,EAAQ3U,EAAI2U,EAAQ3U,IAAK,CAEnC,IAAIu1B,EAASx1B,EAAIA,EAAIC,EAAIA,EAEzB,KAAIu1B,EAASH,GAAaG,EAASD,GAAnC,CAIA,IAAIE,EAAOrzB,KAAKoyB,KAAKgB,GACjBE,EAAMtzB,KAAKuzB,MAAM11B,EAAGD,GAExB1G,KAAKs8B,UAAgB,IAANF,EAAYtzB,KAAKgH,GAAK,IAAKqsB,EAAO7gB,EAAQ,EAAGH,GAE5D,IAAIhT,EAAuD,GAA7CzB,EAAI4U,EAA0B,GAAd3U,EAAI2U,GAAcA,GAEhDwgB,EAAK3zB,GAAmB,IAAVgT,EAAM1c,EACpBq9B,EAAK3zB,EAAQ,GAAe,IAAVgT,EAAM4e,EACxB+B,EAAK3zB,EAAQ,GAAe,IAAVgT,EAAM4f,EACxB,IAGIwB,EAAc,GAOdA,EADAjhB,EAHc,GAFH,GAOJA,EAJO,IAFH,KASG,KAAyBA,EARzB,IAQiD,IAVpD,GAaf,IAAIkhB,GAAcL,EAAOH,IAAgB1gB,EAAS0gB,GAG9CF,EAAK3zB,EAAQ,GADbq0B,EAAaD,EACYC,EAAaD,EAApB,IACXC,EAAa,EAAID,EACN,KAAO,GAAQC,GAAc,EAAID,IAAgBA,GAEjD,KAQ9B,OAFAhzB,EAAQkzB,aAAab,EAAO,EAAG,GAExBD,GAGHxB,EAAA56B,UAAAu7B,UAAR,SAAkB3f,EAAe3U,GAC7B,IAAI/H,EAAI0c,EAAM1c,EACVs7B,EAAI5e,EAAM4e,EACVgB,EAAI5f,EAAM4f,EAEVzvB,EAAMxC,KAAKwC,IAAI7M,EAAGs7B,EAAGgB,GACrB3vB,EAAMtC,KAAKsC,IAAI3M,EAAGs7B,EAAGgB,GACrB2B,EAAI,EACJh9B,EAAI,EACJi9B,EAAIrxB,EAEJsxB,EAAKtxB,EAAMF,EAEH,IAARE,IACA5L,EAAIk9B,EAAKtxB,GAGTA,GAAOF,IACHE,GAAO7M,GACPi+B,GAAK3C,EAAIgB,GAAK6B,EACV7C,EAAIgB,IACJ2B,GAAK,IAEFpxB,GAAOyuB,EACd2C,GAAK3B,EAAIt8B,GAAKm+B,EAAK,EACZtxB,GAAOyvB,IACd2B,GAAKj+B,EAAIs7B,GAAK6C,EAAK,GAEvBF,GAAK,IAGTl2B,EAAO/H,EAAIi+B,EACXl2B,EAAOuzB,EAAIr6B,EACX8G,EAAOu0B,EAAI4B,GAGPxC,EAAA56B,UAAA+8B,UAAR,SAAkBO,EAAaC,EAAoBl+B,EAAe4H,GAC9D,IAAIu2B,EAASn+B,EAAQk+B,EACjBJ,EAAIG,EAAM,GACVn2B,EAAIq2B,GAAU,EAAIj0B,KAAKC,IAAK2zB,EAAI,EAAK,IACrCj+B,EAAI,EACJs7B,EAAI,EACJgB,EAAI,EAEJ2B,GAAK,GAAKA,GAAK,GACfj+B,EAAIs+B,EACJhD,EAAIrzB,GACGg2B,GAAK,GAAKA,GAAK,GACtBj+B,EAAIiI,EACJqzB,EAAIgD,GACGL,GAAK,GAAKA,GAAK,GACtB3C,EAAIgD,EACJhC,EAAIr0B,GACGg2B,GAAK,GAAKA,GAAK,GACtB3C,EAAIrzB,EACJq0B,EAAIgC,GACGL,GAAK,GAAKA,GAAK,GACtBj+B,EAAIiI,EACJq0B,EAAIgC,GACGL,GAAK,GAAKA,GAAK,IACtBj+B,EAAIs+B,EACJhC,EAAIr0B,GAGR,IAAI3I,EAAIa,EAAQm+B,EAChBv2B,EAAOw2B,IAAKv+B,EAAIV,EAAKg8B,EAAIh8B,EAAKg9B,EAAIh9B,IAI/Bo8B,EAAA56B,UAAAuM,MAAP,SAAavB,EAAwBhB,GAIjC,GAHAA,EAAQ2K,OAERlU,KAAKiK,aAAaV,GACdvJ,KAAKsK,iBAAiBC,EAAehB,GAAU,CAE/C,IAAI+R,EAA6E,GAApExS,KAAKsC,IAAIpL,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,QACnE83B,EAA0B,GAAT3hB,EACjBrV,EAAOjG,KAAKI,gBAAgB6F,KAC5BC,EAAMlG,KAAKI,gBAAgB8F,IAE1BlG,KAAKk9B,mBAAqBl9B,KAAKk9B,kBAAkBh4B,OAAkB,EAAToW,IAC3Dtb,KAAKk9B,kBAAoBl9B,KAAK07B,wBAAwBpgB,EAAQ2hB,IAGlEj9B,KAAKg7B,sBAEDh7B,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,cAE7B6F,EAAQ0K,SAASjU,KAAKu6B,YAAav6B,KAAKw6B,WAAYx6B,KAAKy6B,YAAaz6B,KAAKy6B,cAG/ElxB,EAAQ+T,UAAUtd,KAAKk9B,kBAAmBj3B,EAAMC,IAE5ClG,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ5F,WAAa,EACrB4F,EAAQ9F,cAAgB,EACxB8F,EAAQ7F,cAAgB,GAG5B1D,KAAKm7B,oBAAoBn7B,KAAK06B,GAC1B16B,KAAKu6B,YACLv6B,KAAKw6B,WACLx6B,KAAKy6B,YACLz6B,KAAKy6B,YACLlxB,GAEJ,IAAI4zB,EAAKn9B,KAAKu6B,YAAcv6B,KAAKy6B,YAAcz6B,KAAK26B,GAChDyC,EAAKp9B,KAAKw6B,WAAax6B,KAAKy6B,aAAe,EAAIz6B,KAAK46B,IAExD56B,KAAKy7B,YAAY0B,EAAIC,EAAa,IAAT9hB,EAAc/R,GAEvC,IAAI4yB,EAAO7gB,EAA0B,GAAjB2hB,EACpBE,EAAKl3B,EAAOqV,EAASxS,KAAKojB,KAAKlsB,KAAK06B,GAAK,KAAO5xB,KAAKgH,GAAK,KAAOqsB,EACjEiB,EAAKl3B,EAAMoV,EAASxS,KAAKmjB,KAAKjsB,KAAK06B,GAAK,KAAO5xB,KAAKgH,GAAK,KAAOqsB,EAChEn8B,KAAKy7B,YAAY0B,EAAIC,EAAqB,IAAjBH,EAAsB1zB,GAGnDA,EAAQiL,WAMJ2lB,EAAA56B,UAAAq0B,wBAAR,SAAgCltB,EAAWC,GACvC,GAAI3G,KAAKs6B,uBAAwB,CAC7B,IAAIhf,EAA6E,GAApExS,KAAKsC,IAAIpL,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,QACnEwY,EAAUrC,EAAStb,KAAKI,gBAAgB6F,KACxC2X,EAAUtC,EAAStb,KAAKI,gBAAgB8F,IAC5ClG,KAAK06B,GAA4C,IAAvC5xB,KAAKuzB,MAAM11B,EAAIiX,EAASlX,EAAIiX,GAAiB7U,KAAKgH,GAAK,SAE5D9P,KAAKq6B,0BACVr6B,KAAKg7B,qBACLh7B,KAAK26B,IAAMj0B,EAAI1G,KAAKu6B,aAAev6B,KAAKy6B,YACxCz6B,KAAK46B,GAAK,GAAKj0B,EAAI3G,KAAKw6B,YAAcx6B,KAAKy6B,YAC3Cz6B,KAAK26B,GAAK7xB,KAAKsC,IAAIpL,KAAK26B,GAAI,GAC5B36B,KAAK26B,GAAK7xB,KAAKwC,IAAItL,KAAK26B,GAAI,MAC5B36B,KAAK46B,GAAK9xB,KAAKsC,IAAIpL,KAAK46B,GAAI,GAC5B56B,KAAK46B,GAAK9xB,KAAKwC,IAAItL,KAAK46B,GAAI,OAGhC56B,KAAKs8B,UAAUt8B,KAAK06B,GAAI16B,KAAK26B,GAAI36B,KAAK46B,GAAI56B,KAAKo6B,WAE/Cp6B,KAAKpB,MAAQoB,KAAKo6B,WAGdD,EAAA56B,UAAA89B,iBAAR,SAAyB3wB,GACrB1M,KAAKg7B,qBAEL,IAAI/0B,EAAOjG,KAAKu6B,YACZr0B,EAAMlG,KAAKw6B,WACXjW,EAAOvkB,KAAKy6B,YAEhB,OAAI/tB,EAAYhG,GAAKT,GAAQyG,EAAYhG,GAAKT,EAAOse,GACjD7X,EAAY/F,GAAKT,GAAOwG,EAAY/F,GAAKT,EAAMqe,GAO/C4V,EAAA56B,UAAA+9B,gBAAR,SAAwB5wB,GACpB,IAAI4O,EAA6E,GAApExS,KAAKsC,IAAIpL,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,QACnEwY,EAAUrC,EAAStb,KAAKI,gBAAgB6F,KACxC2X,EAAUtC,EAAStb,KAAKI,gBAAgB8F,IAExC81B,EAAc1gB,EADY,GAATA,EAEjBiiB,EAAWjiB,EAASA,EACpBkiB,EAAgBxB,EAAcA,EAE9ByB,EAAK/wB,EAAYhG,EAAIiX,EACrB+f,EAAKhxB,EAAY/F,EAAIiX,EAErBse,EAASuB,EAAKA,EAAKC,EAAKA,EAE5B,OAAIxB,GAAUqB,GAAYrB,GAAUsB,GAOjCrD,EAAA56B,UAAAsN,eAAP,SAAsBJ,EAAiBC,EAAsBN,EAAmBC,GAC5E,QAAKkF,EAAAhS,UAAMsN,eAAc/O,KAAAkC,KAACyM,EAAQC,EAAaN,EAAWC,KAI1DrM,KAAK+yB,gBAAiB,EAEtB/yB,KAAKq6B,yBAA0B,EAC/Br6B,KAAKs6B,wBAAyB,EAE1Bt6B,KAAKq9B,iBAAiB3wB,GACtB1M,KAAKq6B,yBAA0B,EACxBr6B,KAAKs9B,gBAAgB5wB,KAC5B1M,KAAKs6B,wBAAyB,GAGlCt6B,KAAK4zB,wBAAwBlnB,EAAYhG,EAAGgG,EAAY/F,GACxD3G,KAAK+E,MAAMuZ,kBAAkBlS,GAAapM,MAEnC,IAGJm6B,EAAA56B,UAAAiN,eAAP,SAAsBC,EAAiBC,GAC/B1M,KAAK+yB,gBACL/yB,KAAK4zB,wBAAwBlnB,EAAYhG,EAAGgG,EAAY/F,GAG5D4K,EAAAhS,UAAMiN,eAAc1O,KAAAkC,KAACyM,EAAQC,IAG1BytB,EAAA56B,UAAAwN,aAAP,SAAoBN,EAAiBC,EAAsBN,EAAmBC,EAAqBW,GAC/FhN,KAAK+yB,gBAAiB,SAEf/yB,KAAK+E,MAAMuZ,kBAAkBlS,GACpCmF,EAAAhS,UAAMwN,aAAYjP,KAAAkC,KAACyM,EAAQC,EAAaN,EAAWC,EAAaW,IAExEmtB,EAtaA,CAAiClnB,EAAAlT,SAApB9C,EAAAk9B,kcCLb,IAAApiB,EAAAta,EAAA,GACAwV,EAAAxV,EAAA,GAIAkgC,EAAA,SAAApsB,GAqBI,SAAAosB,EAAmBz/B,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OApBXmH,EAAA0V,WAAa,IAgFzB,OAjF6BpJ,EAAAgsB,EAAApsB,GAIzBlT,OAAAC,eAAWq/B,EAAAp+B,UAAA,iBAAX,WACI,OAAOS,KAAK+a,gBAGhB,SAAqBnc,GACboB,KAAK+a,aAAenc,IAIxBoB,KAAK+a,WAAanc,EAClBoB,KAAK4E,iDAWC+4B,EAAAp+B,UAAAkF,aAAV,WACI,MAAO,WAGDk5B,EAAAp+B,UAAAyU,WAAV,SAAqBzK,GACjBA,EAAQ2K,QAEJlU,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,eAGjCuP,EAAAlT,QAAQ6P,YAAY5P,KAAKI,gBAAgB6F,KAAOjG,KAAKI,gBAAgB8E,MAAQ,EAAGlF,KAAKI,gBAAgB8F,IAAMlG,KAAKI,gBAAgB+E,OAAS,EACrInF,KAAKI,gBAAgB8E,MAAQ,EAAIlF,KAAK+a,WAAa,EAAG/a,KAAKI,gBAAgB+E,OAAS,EAAInF,KAAK+a,WAAa,EAAGxR,GAE7GvJ,KAAKsT,cACL/J,EAAQY,UAAYnK,KAAKsT,YAEzB/J,EAAQ2R,SAGRlb,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ5F,WAAa,EACrB4F,EAAQ9F,cAAgB,EACxB8F,EAAQ7F,cAAgB,GAGxB1D,KAAK+a,aACD/a,KAAKmb,QACL5R,EAAQwM,YAAc/V,KAAKmb,OAE/B5R,EAAQuM,UAAY9V,KAAK+a,WAEzBxR,EAAQ6R,UAGZ7R,EAAQiL,WAGFmpB,EAAAp+B,UAAAsL,sBAAV,SAAgCN,EAAwBhB,GACpDgI,EAAAhS,UAAMsL,sBAAqB/M,KAAAkC,KAACuK,EAAehB,GAE3CvJ,KAAKmT,oBAAoBjO,OAAS,EAAIlF,KAAK+a,WAC3C/a,KAAKmT,oBAAoBhO,QAAU,EAAInF,KAAK+a,WAC5C/a,KAAKmT,oBAAoBlN,MAAQjG,KAAK+a,WACtC/a,KAAKmT,oBAAoBjN,KAAOlG,KAAK+a,YAG/B4iB,EAAAp+B,UAAA4U,iBAAV,SAA2B5K,GAEvB0J,EAAAlT,QAAQ6P,YAAY5P,KAAKI,gBAAgB6F,KAAOjG,KAAKI,gBAAgB8E,MAAQ,EAAGlF,KAAKI,gBAAgB8F,IAAMlG,KAAKI,gBAAgB+E,OAAS,EAAGnF,KAAKI,gBAAgB8E,MAAQ,EAAGlF,KAAKI,gBAAgB+E,OAAS,EAAGoE,GAE7MA,EAAQ0B,QAEhB0yB,EAjFA,CAA6B5lB,EAAA7E,WAAhBjW,EAAA0gC,8bCLb,IAAA5lB,EAAAta,EAAA,GACAkC,EAAAlC,EAAA,GACAwV,EAAAxV,EAAA,GAMAmgC,EAAA,SAAArsB,GAiPI,SAAAqsB,EAAmB1/B,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OAhPXmH,EAAAw4B,gBAAkB,IAAInsB,MACtBrM,EAAAy4B,mBAAqB,IAAIpsB,MACzBrM,EAAA04B,UACA14B,EAAA24B,eAAiB,IAAItsB,QAkVjC,OAtV0BC,EAAAisB,EAAArsB,GAOtBlT,OAAAC,eAAWs/B,EAAAr+B,UAAA,gBAAX,WACI,OAAOS,KAAKg+B,gDASTJ,EAAAr+B,UAAA0+B,iBAAP,SAAwB94B,EAAgBS,GAKpC,YALoC,IAAAA,OAAA,GACpC5F,KAAK69B,gBAAgBr1B,KAAK,IAAI7I,EAAAgB,aAAawE,EAAQS,EAAUjG,EAAAgB,aAAaC,eAAiBjB,EAAAgB,aAAaG,sBAExGd,KAAK4E,eAEE5E,MASJ49B,EAAAr+B,UAAA2+B,oBAAP,SAA2Bh5B,EAAeU,GAKtC,YALsC,IAAAA,OAAA,GACtC5F,KAAK89B,mBAAmBt1B,KAAK,IAAI7I,EAAAgB,aAAauE,EAAOU,EAAUjG,EAAAgB,aAAaC,eAAiBjB,EAAAgB,aAAaG,sBAE1Gd,KAAK4E,eAEE5E,MAUJ49B,EAAAr+B,UAAA4+B,iBAAP,SAAwBh2B,EAAehD,EAAgBS,GACnD,YADmD,IAAAA,OAAA,GAC/CuC,EAAQ,GAAKA,GAASnI,KAAK69B,gBAAgB9sB,OACpC/Q,MAGXA,KAAK69B,gBAAgB11B,GAAS,IAAIxI,EAAAgB,aAAawE,EAAQS,EAAUjG,EAAAgB,aAAaC,eAAiBjB,EAAAgB,aAAaG,qBAE5Gd,KAAK4E,eAEE5E,OAUJ49B,EAAAr+B,UAAA6+B,oBAAP,SAA2Bj2B,EAAejD,EAAeU,GACrD,YADqD,IAAAA,OAAA,GACjDuC,EAAQ,GAAKA,GAASnI,KAAK89B,mBAAmB/sB,OACvC/Q,MAGXA,KAAK89B,mBAAmB31B,GAAS,IAAIxI,EAAAgB,aAAauE,EAAOU,EAAUjG,EAAAgB,aAAaC,eAAiBjB,EAAAgB,aAAaG,qBAE9Gd,KAAK4E,eAEE5E,OAGH49B,EAAAr+B,UAAA8+B,YAAR,SAAoBC,EAAiBp/B,GACjC,GAAKo/B,EAAL,CAIA/sB,EAAAhS,UAAM4O,cAAarQ,KAAAkC,KAACs+B,GAEpB,IAAoB,IAAA7rB,EAAA,EAAAC,EAAA4rB,EAAK9qB,SAALf,EAAAC,EAAA3B,OAAA0B,IAAe,CAA9B,IAAIV,EAAOW,EAAAD,GACR8rB,EAAav+B,KAAKg+B,eAAe31B,QAAQ0J,IAEzB,IAAhBwsB,GACAv+B,KAAKg+B,eAAez1B,OAAOg2B,EAAY,UAIxCv+B,KAAK+9B,OAAO7+B,KAGf0+B,EAAAr+B,UAAAi/B,YAAR,SAAoBC,EAAqBv/B,GACrC,GAAKc,KAAK+9B,OAAO7+B,GAAjB,CAIAc,KAAK+9B,OAAOU,GAAez+B,KAAK+9B,OAAO7+B,GAEvC,IAAoB,IAAAuT,EAAA,EAAAC,EAAA1S,KAAK+9B,OAAOU,GAAajrB,SAAzBf,EAAAC,EAAA3B,OAAA0B,IAAmC,CAAvCC,EAAAD,GACJisB,KAAOD,SAGZz+B,KAAK+9B,OAAO7+B,KAQhB0+B,EAAAr+B,UAAAo/B,uBAAP,SAA8Bx2B,GAC1B,GAAIA,EAAQ,GAAKA,GAASnI,KAAK89B,mBAAmB/sB,OAC9C,OAAO/Q,KAGX,IAAK,IAAI0G,EAAI,EAAGA,EAAI1G,KAAK69B,gBAAgB9sB,OAAQrK,IAAK,CAClD,IAAIxH,EAASwH,EAAC,IAAIyB,EACdm2B,EAAOt+B,KAAK+9B,OAAO7+B,GAEvBc,KAAKq+B,YAAYC,EAAMp/B,GAG3B,IAASwH,EAAI,EAAGA,EAAI1G,KAAK69B,gBAAgB9sB,OAAQrK,IAC7C,IAAK,IAAIC,EAAIwB,EAAQ,EAAGxB,EAAI3G,KAAK89B,mBAAmB/sB,OAAQpK,IAAK,CAC7D,IAAI83B,EAAiB/3B,EAAC,KAAIC,EAAI,GAC1BzH,EAASwH,EAAC,IAAIC,EAElB3G,KAAKw+B,YAAYC,EAAav/B,GAQtC,OAJAc,KAAK89B,mBAAmBv1B,OAAOJ,EAAO,GAEtCnI,KAAK4E,eAEE5E,MAQJ49B,EAAAr+B,UAAAq/B,oBAAP,SAA2Bz2B,GACvB,GAAIA,EAAQ,GAAKA,GAASnI,KAAK69B,gBAAgB9sB,OAC3C,OAAO/Q,KAGX,IAAK,IAAI2G,EAAI,EAAGA,EAAI3G,KAAK89B,mBAAmB/sB,OAAQpK,IAAK,CACrD,IAAIzH,EAASiJ,EAAK,IAAIxB,EAClB23B,EAAOt+B,KAAK+9B,OAAO7+B,GAEvBc,KAAKq+B,YAAYC,EAAMp/B,GAG3B,IAASyH,EAAI,EAAGA,EAAI3G,KAAK89B,mBAAmB/sB,OAAQpK,IAChD,IAAK,IAAID,EAAIyB,EAAQ,EAAGzB,EAAI1G,KAAK69B,gBAAgB9sB,OAAQrK,IAAK,CAC1D,IAAI+3B,EAAiB/3B,EAAI,EAAC,IAAIC,EAC1BzH,EAASwH,EAAC,IAAIC,EAElB3G,KAAKw+B,YAAYC,EAAav/B,GAQtC,OAJAc,KAAK69B,gBAAgBt1B,OAAOJ,EAAO,GAEnCnI,KAAK4E,eAEE5E,MAUJ49B,EAAAr+B,UAAAyS,WAAP,SAAkBD,EAAkBoL,EAAiBD,QAAjB,IAAAC,MAAA,QAAiB,IAAAD,MAAA,GACb,IAAhCld,KAAK69B,gBAAgB9sB,QAErB/Q,KAAKi+B,iBAAiB,GAAG,GAGU,IAAnCj+B,KAAK89B,mBAAmB/sB,QAExB/Q,KAAKk+B,oBAAoB,GAAG,GAGhC,IAEIh/B,EAFI4J,KAAKsC,IAAI+R,EAAKnd,KAAK69B,gBAAgB9sB,OAAS,GAEtC,IADNjI,KAAKsC,IAAI8R,EAAQld,KAAK89B,mBAAmB/sB,OAAS,GAEtD8tB,EAAgB7+B,KAAK+9B,OAAO7+B,GAgBhC,OAdK2/B,IACDA,EAAgB,IAAI9mB,EAAA7E,UAAUhU,GAC9Bc,KAAK+9B,OAAO7+B,GAAO2/B,EACnBA,EAAc53B,oBAAsBgM,EAAAlT,QAAQmH,0BAC5C23B,EAAc13B,kBAAoB8L,EAAAlT,QAAQqH,uBAC1CmK,EAAAhS,UAAMyS,WAAUlU,KAAAkC,KAAC6+B,IAGrBA,EAAc7sB,WAAWD,GACzB/R,KAAKg+B,eAAex1B,KAAKuJ,GACzBA,EAAQ2sB,KAAOx/B,EAEfc,KAAK4E,eAEE5E,MAQJ49B,EAAAr+B,UAAA4O,cAAP,SAAqB4D,GACjB,IAAI5J,EAAQnI,KAAKg+B,eAAe31B,QAAQ0J,IAEzB,IAAX5J,GACAnI,KAAKg+B,eAAez1B,OAAOJ,EAAO,GAGtC,IAAIm2B,EAAOt+B,KAAK+9B,OAAOhsB,EAAQ2sB,MAO/B,OALIJ,GACAA,EAAKnwB,cAAc4D,GAGvB/R,KAAK4E,eACE5E,MAWD49B,EAAAr+B,UAAAkF,aAAV,WACI,MAAO,QAGDm5B,EAAAr+B,UAAAsL,sBAAV,SAAgCN,EAAwBhB,GAapD,IAZA,IAAIu1B,KACAC,KACAC,KACAC,KAEA7O,EAAiBpwB,KAAKI,gBAAgB8E,MACtCg6B,EAAwB,EACxBC,EAAkBn/B,KAAKI,gBAAgB+E,OACvCi6B,EAAyB,EAGzBj3B,EAAQ,EACMsK,EAAA,EAAAC,EAAA1S,KAAK69B,gBAALprB,EAAAC,EAAA3B,OAAA0B,IAAsB,CACpC,IADK7T,EAAK8T,EAAAD,IACA7M,QAENu5B,GADIh6B,EAASvG,EAAMiH,SAAS7F,KAAK+E,OAEjCg6B,EAAQ52B,GAAShD,OAEjBi6B,GAA0BxgC,EAAM2Y,cAEpCpP,IAGJ,IAAIjC,EAAM,EACViC,EAAQ,EACR,IAAkB,IAAAoO,EAAA,EAAAmE,EAAA1a,KAAK69B,gBAALtnB,EAAAmE,EAAA3J,OAAAwF,IAAsB,CAAnC,IAIOpR,EAJHvG,EAAK8b,EAAAnE,GAGV,GAFA0oB,EAAKz2B,KAAKtC,GAELtH,EAAMgH,QAKPM,GAAOtH,EAAMiH,SAAS7F,KAAK+E,YAH3BmB,GADIf,EAAUvG,EAAM2Y,cAAgB6nB,EAA0BD,EAE9DJ,EAAQ52B,GAAShD,EAIrBgD,IAIJA,EAAQ,EACR,IAAkB,IAAAk3B,EAAA,EAAAC,EAAAt/B,KAAK89B,mBAALuB,EAAAC,EAAAvuB,OAAAsuB,IAAyB,CACvC,IADKzgC,EAAK0gC,EAAAD,IACAz5B,QAENwqB,GADIlrB,EAAQtG,EAAMiH,SAAS7F,KAAK+E,OAEhC+5B,EAAO32B,GAASjD,OAEhBg6B,GAAyBtgC,EAAM2Y,cAEnCpP,IAGJ,IAAIlC,EAAO,EACXkC,EAAQ,EACR,IAAkB,IAAAo3B,EAAA,EAAAC,EAAAx/B,KAAK89B,mBAALyB,EAAAC,EAAAzuB,OAAAwuB,IAAyB,CAAtC,IAGOr6B,EAHHtG,EAAK4gC,EAAAD,GAEV,GADAP,EAAMx2B,KAAKvC,GACNrH,EAAMgH,QAKPK,GAAQrH,EAAMiH,SAAS7F,KAAK+E,YAH5BkB,GADIf,EAAStG,EAAM2Y,cAAgB2nB,EAAyB9O,EAE5D0O,EAAO32B,GAASjD,EAIpBiD,IAIJ,IAAK,IAAIjJ,KAAOc,KAAK+9B,OACjB,GAAK/9B,KAAK+9B,OAAOv+B,eAAeN,GAAhC,CAGA,IAAIkX,EAAQlX,EAAIkX,MAAM,KAClB1P,EAAI+4B,SAASrpB,EAAM,IACnBzP,EAAI84B,SAASrpB,EAAM,IACnBkoB,EAAOt+B,KAAK+9B,OAAO7+B,GAEvBo/B,EAAKr4B,KAAO+4B,EAAMr4B,GAAK,KACvB23B,EAAKp4B,IAAM+4B,EAAKv4B,GAAK,KACrB43B,EAAKp5B,MAAQ45B,EAAOn4B,GAAK,KACzB23B,EAAKn5B,OAAS45B,EAAQr4B,GAAK,KAG/B6K,EAAAhS,UAAMsL,sBAAqB/M,KAAAkC,KAACuK,EAAehB,IAIxCq0B,EAAAr+B,UAAA0O,QAAP,WACIsD,EAAAhS,UAAM0O,QAAOnQ,KAAAkC,MAEb,IAAoB,IAAAyS,EAAA,EAAAC,EAAA1S,KAAKg+B,eAALvrB,EAAAC,EAAA3B,OAAA0B,IAAqB,CAAzBC,EAAAD,GACJxE,YAGpB2vB,EAtVA,CAA0B7lB,EAAA7E,WAAbjW,EAAA2gC,2bCRb,IAKA8B,EAAA,SAAAnuB,GAAA,SAAAmuB,mDAQA,OARmC/tB,EAAA+tB,EAAAnuB,GACrBmuB,EAAAngC,UAAA0wB,kBAAV,SAA4BthB,GAExB,IADA,IAAIgxB,EAAM,GACDhiC,EAAI,EAAGA,EAAIgR,EAAKoC,OAAQpT,IAC7BgiC,GAAO,IAEX,OAAOA,GAEfD,EARA,CALAjiC,EAAA,IAKmCqwB,WAAtB7wB,EAAAyiC,ocCLb,IAAAzsB,EAAAxV,EAAA,GACAkC,EAAAlC,EAAA,GACAmC,EAAAnC,EAAA,GAIAmiC,EAAA,SAAAruB,GA+II,SAAAquB,EAAmB1hC,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OA9IXmH,EAAAw6B,WAAa,EACbx6B,EAAAy6B,IAAM,IAAIngC,EAAAgB,aAAa,GACvB0E,EAAA06B,IAAM,IAAIpgC,EAAAgB,aAAa,GACvB0E,EAAA26B,IAAM,IAAIrgC,EAAAgB,aAAa,GACvB0E,EAAA46B,IAAM,IAAItgC,EAAAgB,aAAa,GACvB0E,EAAA66B,MAAQ,IAAIxuB,MA4IhBrM,EAAK/B,kBAAmB,EACxB+B,EAAKnE,qBAAuB+R,EAAAlT,QAAQmH,0BACpC7B,EAAKjE,mBAAqB6R,EAAAlT,QAAQqH,yBA0F1C,OA9O0BuK,EAAAiuB,EAAAruB,GAWtBlT,OAAAC,eAAWshC,EAAArgC,UAAA,YAAX,WACI,OAAOS,KAAKkgC,WAGhB,SAAgBthC,GACRoB,KAAKkgC,QAAUthC,IAInBoB,KAAKkgC,MAAQthC,EACboB,KAAK4E,iDAITvG,OAAAC,eAAWshC,EAAArgC,UAAA,wBAAX,WACI,OAAOS,KAAKmgC,uBAGhB,SAA4BvhC,GAA5B,IAAAyG,EAAArF,KACQA,KAAKmgC,oBAAsBvhC,IAI3BoB,KAAKogC,gCAAkCpgC,KAAKmgC,oBAC5CngC,KAAKmgC,kBAAkB57B,kBAAkBgB,OAAOvF,KAAKogC,gCACrDpgC,KAAKogC,+BAAiC,MAGtCxhC,IACAoB,KAAKogC,+BAAiCxhC,EAAM2F,kBAAkBkB,IAAI,WAAM,OAAAJ,EAAKT,kBAGjF5E,KAAKmgC,kBAAoBvhC,EACzBoB,KAAK4E,iDAITvG,OAAAC,eAAWshC,EAAArgC,UAAA,UAAX,WACI,OAAOS,KAAK8/B,IAAIh7B,SAAS9E,KAAK+E,YAGlC,SAAcnG,GACNoB,KAAK8/B,IAAIh7B,SAAS9E,KAAK+E,SAAWnG,GAIlCoB,KAAK8/B,IAAI96B,WAAWpG,IACpBoB,KAAK4E,gDAKbvG,OAAAC,eAAWshC,EAAArgC,UAAA,UAAX,WACI,OAAOS,KAAK+/B,IAAIj7B,SAAS9E,KAAK+E,YAGlC,SAAcnG,GACNoB,KAAK+/B,IAAIj7B,SAAS9E,KAAK+E,SAAWnG,GAIlCoB,KAAK+/B,IAAI/6B,WAAWpG,IACpBoB,KAAK4E,gDAKbvG,OAAAC,eAAWshC,EAAArgC,UAAA,UAAX,WACI,OAAOS,KAAKggC,IAAIl7B,SAAS9E,KAAK+E,YAGlC,SAAcnG,GACNoB,KAAKggC,IAAIl7B,SAAS9E,KAAK+E,SAAWnG,GAIlCoB,KAAKggC,IAAIh7B,WAAWpG,IACpBoB,KAAK4E,gDAKbvG,OAAAC,eAAWshC,EAAArgC,UAAA,UAAX,WACI,OAAOS,KAAKigC,IAAIn7B,SAAS9E,KAAK+E,YAGlC,SAAcnG,GACNoB,KAAKigC,IAAIn7B,SAAS9E,KAAK+E,SAAWnG,GAIlCoB,KAAKigC,IAAIj7B,WAAWpG,IACpBoB,KAAK4E,gDAKbvG,OAAAC,eAAWshC,EAAArgC,UAAA,iBAAX,WACI,OAAOS,KAAK6/B,gBAGhB,SAAqBjhC,GACboB,KAAK6/B,aAAejhC,IAIxBoB,KAAK6/B,WAAajhC,EAClBoB,KAAK4E,iDAITvG,OAAAC,eAAWshC,EAAArgC,UAAA,2BAAX,SAA+BX,qCAK/BP,OAAAC,eAAWshC,EAAArgC,UAAA,yBAAX,SAA6BX,qCAI7BP,OAAAC,eAAYshC,EAAArgC,UAAA,oBAAZ,WACI,OAAQS,KAAKmgC,kBAAoBngC,KAAKmgC,kBAAkBxiB,QAAU,GAAK3d,KAAKggC,IAAIn6B,SAAS7F,KAAK+E,wCAGlG1G,OAAAC,eAAYshC,EAAArgC,UAAA,oBAAZ,WACI,OAAQS,KAAKmgC,kBAAoBngC,KAAKmgC,kBAAkBviB,QAAU,GAAK5d,KAAKigC,IAAIp6B,SAAS7F,KAAK+E,wCAexF66B,EAAArgC,UAAAkF,aAAV,WACI,MAAO,QAGJm7B,EAAArgC,UAAAuM,MAAP,SAAavB,EAAwBhB,GACjCA,EAAQ2K,QAEJlU,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,eAGjC1D,KAAKiK,aAAaV,GACdvJ,KAAKsK,iBAAiBC,EAAehB,KACrCA,EAAQwM,YAAc/V,KAAKmb,MAC3B5R,EAAQuM,UAAY9V,KAAK6/B,WACzBt2B,EAAQ82B,YAAYrgC,KAAKkgC,OAEzB32B,EAAQ2B,YACR3B,EAAQgS,OAAOvb,KAAK8/B,IAAIj6B,SAAS7F,KAAK+E,OAAQ/E,KAAK+/B,IAAIl6B,SAAS7F,KAAK+E,QAErEwE,EAAQiS,OAAOxb,KAAKsgC,aAActgC,KAAKugC,cAEvCh3B,EAAQ6R,UAGZ7R,EAAQiL,WAGLorB,EAAArgC,UAAAoL,SAAP,WAEI3K,KAAKI,gBAAgB8E,MAAQ4D,KAAKC,IAAI/I,KAAK8/B,IAAIj6B,SAAS7F,KAAK+E,OAAS/E,KAAKsgC,cAAgBtgC,KAAK6/B,WAChG7/B,KAAKI,gBAAgB+E,OAAS2D,KAAKC,IAAI/I,KAAK+/B,IAAIl6B,SAAS7F,KAAK+E,OAAS/E,KAAKugC,cAAgBvgC,KAAK6/B,YAG3FD,EAAArgC,UAAAqL,kBAAV,SAA4BL,EAAwBhB,GAChDvJ,KAAKI,gBAAgB6F,KAAO6C,KAAKsC,IAAIpL,KAAK8/B,IAAIj6B,SAAS7F,KAAK+E,OAAQ/E,KAAKsgC,cAAgBtgC,KAAK6/B,WAAa,EAC3G7/B,KAAKI,gBAAgB8F,IAAM4C,KAAKsC,IAAIpL,KAAK+/B,IAAIl6B,SAAS7F,KAAK+E,OAAQ/E,KAAKugC,cAAgBvgC,KAAK6/B,WAAa,GASvGD,EAAArgC,UAAAsH,cAAP,SAAqBC,EAAmBC,EAAcy5B,GAClD,QADkD,IAAAA,OAAA,GAC7CxgC,KAAK+E,OAAS/E,KAAK+F,QAAU/F,KAAK+E,MAAMiC,eAA7C,CAKA,IAAIK,EAAiBrH,KAAK+E,MAAMuC,mBAAmBP,GAC/CQ,EAAoB3H,EAAA4H,QAAQC,QAAQX,EAAUlH,EAAA8H,OAAOpF,WAAYyE,EAAMY,qBAAsBN,GAEjGrH,KAAK4H,yBAAyBL,EAAmBi5B,GAE7Cj5B,EAAkBM,EAAI,GAAKN,EAAkBM,EAAI,EACjD7H,KAAK8H,eAAgB,EAGzB9H,KAAK8H,eAAgB,OAbjBlI,EAAAmI,MAAMC,MAAM,2EAqBb43B,EAAArgC,UAAAqI,yBAAP,SAAgCL,EAA4Bi5B,QAAA,IAAAA,OAAA,GACxD,IAAI95B,EAAaa,EAAkBb,EAAI1G,KAAK8D,aAAa+B,SAAS7F,KAAK+E,OAAU,KAC7E4B,EAAaY,EAAkBZ,EAAI3G,KAAK+D,aAAa8B,SAAS7F,KAAK+E,OAAU,KAE7Ey7B,GACAxgC,KAAKygC,GAAK/5B,EACV1G,KAAK0gC,GAAK/5B,EACV3G,KAAKggC,IAAIn3B,uBAAwB,EACjC7I,KAAKigC,IAAIp3B,uBAAwB,IAEjC7I,KAAK2gC,GAAKj6B,EACV1G,KAAK4gC,GAAKj6B,EACV3G,KAAK8/B,IAAIj3B,uBAAwB,EACjC7I,KAAK+/B,IAAIl3B,uBAAwB,IAG7C+2B,EA9OA,CAA0B3sB,EAAAlT,SAAb9C,EAAA2iC,2bCNb,IAAA3sB,EAAAxV,EAAA,GACAojC,EAAApjC,EAAA,IACAmC,EAAAnC,EAAA,GAOAqjC,EAAA,SAAAvvB,GAeI,SAAAuvB,EAAmB5iC,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OAbXmH,EAAAw6B,WAAqB,EAoDtBx6B,EAAAisB,cAAgB,WACnBjsB,EAAKT,gBArCLS,EAAK/B,kBAAmB,EACxB+B,EAAKnE,qBAAuB+R,EAAAlT,QAAQmH,0BACpC7B,EAAKjE,mBAAqB6R,EAAAlT,QAAQqH,uBAElC/B,EAAK66B,SACL76B,EAAK07B,aAwNb,OA/O+BpvB,EAAAmvB,EAAAvvB,GA2B3BlT,OAAAC,eAAWwiC,EAAAvhC,UAAA,YAAX,WACI,OAAOS,KAAKkgC,WAGhB,SAAgBthC,GACRoB,KAAKkgC,QAAUthC,IAInBoB,KAAKkgC,MAAQthC,EACboB,KAAK4E,iDAQFk8B,EAAAvhC,UAAAyhC,MAAP,SAAa74B,GAKT,OAJKnI,KAAK+gC,QAAQ54B,KACdnI,KAAK+gC,QAAQ54B,GAAS,IAAI04B,EAAA/P,eAAe9wB,OAGtCA,KAAK+gC,QAAQ54B,IAajB24B,EAAAvhC,UAAAkG,IAAP,mBAAAJ,EAAArF,KAAWihC,KAAAxuB,EAAA,EAAAA,EAAAyuB,UAAAnwB,OAAA0B,IAAAwuB,EAAAxuB,GAAAyuB,UAAAzuB,GACP,OAAOwuB,EAAME,IAAI,SAAAC,GAAQ,OAAA/7B,EAAKmD,KAAK44B,MAQhCN,EAAAvhC,UAAAiJ,KAAP,SAAY44B,GACR,IAAIC,EAAwBrhC,KAAKghC,MAAMhhC,KAAK+gC,QAAQhwB,QAEpD,OAAY,MAARqwB,EAAqBC,GAErBD,aAAgBxhC,EAAAknB,aAChBua,EAAMn5B,KAAOk5B,EAERA,aAAgBnuB,EAAAlT,QACrBshC,EAAMtvB,QAAUqvB,EAED,MAAVA,EAAK16B,GAAuB,MAAV06B,EAAKz6B,IAC5B06B,EAAM36B,EAAI06B,EAAK16B,EACf26B,EAAM16B,EAAIy6B,EAAKz6B,GAGZ06B,IAOJP,EAAAvhC,UAAAgG,OAAP,SAAc3G,GACV,IAAIuJ,EAEJ,GAAIvJ,aAAiBiiC,EAAA/P,gBAGjB,IAAe,KAFf3oB,EAAQnI,KAAK+gC,QAAQ14B,QAAQzJ,IAGzB,YAIJuJ,EAAQvJ,EAGZ,IAAIyiC,EAAkCrhC,KAAK+gC,QAAQ54B,GAE9Ck5B,IAILA,EAAMpzB,UAENjO,KAAK+gC,QAAQx4B,OAAOJ,EAAO,KAI/B9J,OAAAC,eAAWwiC,EAAAvhC,UAAA,iBAAX,WACI,OAAOS,KAAK6/B,gBAGhB,SAAqBjhC,GACboB,KAAK6/B,aAAejhC,IAIxBoB,KAAK6/B,WAAajhC,EAClBoB,KAAK4E,iDAGTvG,OAAAC,eAAWwiC,EAAAvhC,UAAA,2BAAX,SAA+BX,qCAI/BP,OAAAC,eAAWwiC,EAAAvhC,UAAA,yBAAX,SAA6BX,qCAInBkiC,EAAAvhC,UAAAkF,aAAV,WACI,MAAO,aAGJq8B,EAAAvhC,UAAAuM,MAAP,SAAavB,EAAwBhB,GAYjC,GAXAA,EAAQ2K,QAEJlU,KAAK2D,YAAc3D,KAAKyD,eAAiBzD,KAAK0D,iBAC9C6F,EAAQ3F,YAAc5D,KAAK4D,YAC3B2F,EAAQ5F,WAAa3D,KAAK2D,WAC1B4F,EAAQ9F,cAAgBzD,KAAKyD,cAC7B8F,EAAQ7F,cAAgB1D,KAAK0D,eAGjC1D,KAAKiK,aAAaV,GAEdvJ,KAAKsK,iBAAiBC,EAAehB,GAAU,CAC/CA,EAAQwM,YAAc/V,KAAKmb,MAC3B5R,EAAQuM,UAAY9V,KAAK6/B,WACzBt2B,EAAQ82B,YAAYrgC,KAAKkgC,OAEzB32B,EAAQ2B,YAER,IAAIo2B,GAAiB,EAErBthC,KAAK+gC,QAAQQ,QAAQ,SAAAF,GACZA,IAIDC,GACA/3B,EAAQgS,OAAO8lB,EAAMlQ,OAAOzqB,EAAG26B,EAAMlQ,OAAOxqB,GAE5C26B,GAAQ,GAGR/3B,EAAQiS,OAAO6lB,EAAMlQ,OAAOzqB,EAAG26B,EAAMlQ,OAAOxqB,MAIpD4C,EAAQ6R,SAGZ7R,EAAQiL,WAGFssB,EAAAvhC,UAAAsL,sBAAV,SAAgCN,EAAwBhB,GAAxD,IAAAlE,EAAArF,KACIA,KAAKwhC,MAAQ,KACbxhC,KAAKyhC,MAAQ,KACbzhC,KAAK0hC,MAAQ,KACb1hC,KAAK2hC,MAAQ,KAEb3hC,KAAK+gC,QAAQQ,QAAQ,SAACF,EAAOl5B,GACpBk5B,IAILA,EAAM33B,aAEY,MAAdrE,EAAKm8B,OAAiBH,EAAMlQ,OAAOzqB,EAAIrB,EAAKm8B,SAAOn8B,EAAKm8B,MAAQH,EAAMlQ,OAAOzqB,IAC/D,MAAdrB,EAAKo8B,OAAiBJ,EAAMlQ,OAAOxqB,EAAItB,EAAKo8B,SAAOp8B,EAAKo8B,MAAQJ,EAAMlQ,OAAOxqB,IAC/D,MAAdtB,EAAKq8B,OAAiBL,EAAMlQ,OAAOzqB,EAAIrB,EAAKq8B,SAAOr8B,EAAKq8B,MAAQL,EAAMlQ,OAAOzqB,IAC/D,MAAdrB,EAAKs8B,OAAiBN,EAAMlQ,OAAOxqB,EAAItB,EAAKs8B,SAAOt8B,EAAKs8B,MAAQN,EAAMlQ,OAAOxqB,MAGnE,MAAd3G,KAAKwhC,QAAexhC,KAAKwhC,MAAQ,GACnB,MAAdxhC,KAAKyhC,QAAezhC,KAAKyhC,MAAQ,GACnB,MAAdzhC,KAAK0hC,QAAe1hC,KAAK0hC,MAAQ,GACnB,MAAd1hC,KAAK2hC,QAAe3hC,KAAK2hC,MAAQ,IAGlCb,EAAAvhC,UAAAoL,SAAP,WACsB,MAAd3K,KAAKwhC,OAA+B,MAAdxhC,KAAK0hC,OAA+B,MAAd1hC,KAAKyhC,OAA+B,MAAdzhC,KAAK2hC,QAI3E3hC,KAAKI,gBAAgB8E,MAAQ4D,KAAKC,IAAI/I,KAAK0hC,MAAQ1hC,KAAKwhC,OAASxhC,KAAK6/B,WACtE7/B,KAAKI,gBAAgB+E,OAAS2D,KAAKC,IAAI/I,KAAK2hC,MAAQ3hC,KAAKyhC,OAASzhC,KAAK6/B,aAGjEiB,EAAAvhC,UAAAqL,kBAAV,SAA4BL,EAAwBhB,GAC9B,MAAdvJ,KAAKwhC,OAA+B,MAAdxhC,KAAKyhC,QAI/BzhC,KAAKI,gBAAgB6F,KAAOjG,KAAKwhC,MAAQxhC,KAAK6/B,WAAa,EAC3D7/B,KAAKI,gBAAgB8F,IAAMlG,KAAKyhC,MAAQzhC,KAAK6/B,WAAa,IAGvDiB,EAAAvhC,UAAA0O,QAAP,WACI,KAAOjO,KAAK+gC,QAAQhwB,OAAS,GACzB/Q,KAAKuF,OAAOvF,KAAK+gC,QAAQhwB,OAAS,GAGtCQ,EAAAhS,UAAM0O,QAAOnQ,KAAAkC,OAGrB8gC,EA/OA,CAA+B7tB,EAAAlT,SAAlB9C,EAAA6jC,gcCTb,IAAA5X,EAAAzrB,EAAA,IACAovB,EAAApvB,EAAA,GACAwV,EAAAxV,EAAA,GACA0rB,EAAA1rB,EAAA,GACAmkC,EAAAnkC,EAAA,IACAokC,EAAApkC,EAAA,IACAqkC,EAAArkC,EAAA,IAKAskC,EAAA,WASI,SAAAA,EAEW7jC,GAAA8B,KAAA9B,OAVH8B,KAAAgiC,YAAc,IAAInV,EAAA7U,WAClBhY,KAAAiiC,WAA2B,IAAIvwB,MAWnC1R,KAAKgiC,YAAY76B,kBAAoB8L,EAAAlT,QAAQqH,uBAC7CpH,KAAKgiC,YAAY/6B,oBAAsBgM,EAAAlT,QAAQmH,0BAC/ClH,KAAKkiC,aAAeliC,KAAKmiC,gBAAgBjkC,GA2DjD,OAvDIG,OAAAC,eAAWyjC,EAAAxiC,UAAA,kBAAX,WACI,OAAOS,KAAKgiC,6CAIhB3jC,OAAAC,eAAWyjC,EAAAxiC,UAAA,iBAAX,WACI,OAAOS,KAAKiiC,4CAIhB5jC,OAAAC,eAAWyjC,EAAAxiC,UAAA,cAAX,WACI,OAAOS,KAAKkiC,aAAavzB,UAG7B,SAAkByzB,GACgB,UAA3BpiC,KAAKkiC,aAAavzB,OAIrB3O,KAAKkiC,aAAavzB,KAAOyzB,oCAIrBL,EAAAxiC,UAAA4iC,gBAAR,SAAwBxzB,GACpB,IAAI0zB,EAAe,IAAIlZ,EAAAxU,UAAU,YAAahG,GAS9C,OARA0zB,EAAan9B,MAAQ,GACrBm9B,EAAal9B,OAAS,OACtBk9B,EAAa3Y,cAAe,EAC5B2Y,EAAalnB,MAAQ,QACrBknB,EAAap7B,oBAAsBgM,EAAAlT,QAAQmH,0BAC3Cm7B,EAAa1Y,wBAA0B1W,EAAAlT,QAAQmH,0BAC/Cm7B,EAAap8B,KAAO,MACpBjG,KAAKgiC,YAAYhwB,WAAWqwB,GACrBA,GAIJN,EAAAxiC,UAAA+iC,aAAP,SAAoBC,GAChB,KAAGA,EAAa,GAAKA,GAAcviC,KAAKiiC,WAAWlxB,QAGnD,OAAO/Q,KAAKiiC,WAAWM,IAMpBR,EAAAxiC,UAAAijC,eAAP,SAAsBD,GACfA,EAAa,GAAKA,GAAcviC,KAAKiiC,WAAWlxB,SAGnD/Q,KAAKgiC,YAAY7zB,cAAcnO,KAAKiiC,WAAWM,IAC/CviC,KAAKiiC,WAAW15B,OAAOg6B,EAAY,KAG3CR,EA1EA,GAAa9kC,EAAA8kC,gBA+Eb,IAAAU,EAAA,SAAAlxB,GAAA,SAAAkxB,mDAsDA,OAtDmC9wB,EAAA8wB,EAAAlxB,GAMxBkxB,EAAAljC,UAAAmjC,YAAP,SAAmB/zB,EAAcmS,EAAyB6hB,QAAzB,IAAA7hB,MAAA,SAAQphB,WAAiB,IAAAijC,OAAA,GAClDA,EAAUA,IAAW,EAAzB,IACI7e,EAAS,IAAI8d,EAAA9U,SACjBhJ,EAAO5e,MAAQ,OACf4e,EAAO3e,OAAS,OAChB2e,EAAO3I,MAAQ,UACf2I,EAAO8e,WAAa,UACpB9e,EAAO7c,oBAAsBgM,EAAAlT,QAAQmH,0BAErC4c,EAAOmJ,6BAA6BxnB,IAAI,SAAS6d,GAC7CxC,EAAKwC,KAGT,IAAIuf,EAAY5vB,EAAAlT,QAAQiQ,UAAU8T,EAAQnV,EAAM,SAAWm0B,cAAc,EAAMC,cAAc,IAC7FF,EAAU19B,OAAS,OACnB09B,EAAU57B,oBAAsBgM,EAAAlT,QAAQmH,0BACxC27B,EAAU58B,KAAO,MAEjBjG,KAAKgjC,WAAWhxB,WAAW6wB,GAC3B7iC,KAAKijC,UAAUz6B,KAAKq6B,GACpB/e,EAAOwJ,UAAYqV,EAEhB3iC,KAAKgjC,WAAW38B,QAAUrG,KAAKgjC,WAAW38B,OAAOA,SAChDyd,EAAO3I,MAAyBnb,KAAKgjC,WAAW38B,OAAOA,OAAQ68B,YAC/Dpf,EAAO8e,WAA8B5iC,KAAKgjC,WAAW38B,OAAOA,OAAQ88B,mBAKrEV,EAAAljC,UAAA6jC,kBAAP,SAAyBb,EAAoBH,GAC7BpiC,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAI7E,KAAOyzB,GAIxDK,EAAAljC,UAAA8jC,uBAAP,SAA8Bd,EAAoBpnB,GAClCnb,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAI2H,MAAQA,GAKzDsnB,EAAAljC,UAAA+jC,wBAAP,SAA+Bf,EAAoBpnB,GAC/Cnb,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAG2H,MAAQA,GAI5CsnB,EAAAljC,UAAAgkC,6BAAP,SAAoChB,EAAoBpnB,GACzCnb,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAIovB,WAAaznB,GAExEsnB,EAtDA,CAAmCV,GAAtB9kC,EAAAwlC,gBA2Db,IAAAe,EAAA,SAAAjyB,GAAA,SAAAiyB,IAAA,IAAAn+B,EAAA,OAAAkM,KAAAqF,MAAA5W,KAAAkhC,YAAAlhC,YACYqF,EAAAo+B,UAAY,IAyDxB,OA1DgC9xB,EAAA6xB,EAAAjyB,GAQrBiyB,EAAAjkC,UAAAmkC,SAAP,SAAgBtB,EAAethB,EAA0B6hB,QAA1B,IAAA7hB,MAAA,SAAQ1hB,WAAkB,IAAAujC,OAAA,GACrD,IAAIgB,EAAK3jC,KAAKyjC,YACV3f,EAAS,IAAI+d,EAAA7P,YACjBlO,EAAO5lB,KAAOkkC,EACdte,EAAO5e,MAAQ,OACf4e,EAAO3e,OAAS,OAChB2e,EAAO3I,MAAQ,UACf2I,EAAO8e,WAAa,UACpB9e,EAAOmO,MAAQjyB,KAAK9B,KACpB4lB,EAAO7c,oBAAsBgM,EAAAlT,QAAQmH,0BAErC4c,EAAOmJ,6BAA6BxnB,IAAI,SAAS6d,GAC1CA,GACCxC,EAAK6iB,KAIb,IAAId,EAAY5vB,EAAAlT,QAAQiQ,UAAU8T,EAAQse,EAAO,SAAWU,cAAc,EAAMC,cAAc,IAC9FF,EAAU19B,OAAS,OACnB09B,EAAU57B,oBAAsBgM,EAAAlT,QAAQmH,0BACxC27B,EAAU58B,KAAO,MACjBjG,KAAKgjC,WAAWhxB,WAAW6wB,GAC3B7iC,KAAKijC,UAAUz6B,KAAKq6B,GACpB/e,EAAOwJ,UAAYqV,EAEhB3iC,KAAKgjC,WAAW38B,QAAUrG,KAAKgjC,WAAW38B,OAAOA,SAChDyd,EAAO3I,MAAyBnb,KAAKgjC,WAAW38B,OAAOA,OAAQ68B,YAC/Dpf,EAAO8e,WAA8B5iC,KAAKgjC,WAAW38B,OAAOA,OAAQ88B,mBAKrEK,EAAAjkC,UAAA6jC,kBAAP,SAAyBb,EAAoBH,GAC7BpiC,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAI7E,KAAOyzB,GAIxDoB,EAAAjkC,UAAA8jC,uBAAP,SAA8Bd,EAAoBpnB,GAClCnb,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAI2H,MAAQA,GAIzDqoB,EAAAjkC,UAAA+jC,wBAAP,SAA+Bf,EAAoBpnB,GAC/Cnb,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAG2H,MAAQA,GAI5CqoB,EAAAjkC,UAAAgkC,6BAAP,SAAoChB,EAAoBpnB,GACtCnb,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAIovB,WAAaznB,GAE3EqoB,EA1DA,CAAgCzB,GAAnB9kC,EAAAumC,aA+Db,IAAAI,EAAA,SAAAryB,GAAA,SAAAqyB,mDAiEA,OAjEiCjyB,EAAAiyB,EAAAryB,GAWtBqyB,EAAArkC,UAAAskC,UAAP,SAAiBzB,EAAethB,EAAyB7Q,EAAwB7E,EAAiBE,EAAiB1M,EAAmBklC,QAAtG,IAAAhjB,MAAA,SAAQ6b,WAAiB,IAAA1sB,MAAA,cAAwB,IAAA7E,MAAA,QAAiB,IAAAE,MAAA,QAAiB,IAAA1M,MAAA,QAAmB,IAAAklC,MAAA,SAAiBnH,GAAY,OAAW,EAAJA,IACtK,IAAI7Y,EAAS,IAAIge,EAAAxP,OACjBxO,EAAO5lB,KAAO+R,EACd6T,EAAOllB,MAAQA,EACfklB,EAAOigB,QAAU34B,EACjB0Y,EAAOkgB,QAAU14B,EACjBwY,EAAO5e,MAAQ,GACf4e,EAAO3e,OAAS,OAChB2e,EAAO3I,MAAQ,UACf2I,EAAO8e,WAAa,UACpB9e,EAAOmgB,YAAc,QACrBngB,EAAO7c,oBAAsBgM,EAAAlT,QAAQmH,0BACrC4c,EAAO7d,KAAO,MACd6d,EAAOogB,cAAgB,MAEvBpgB,EAAOgP,yBAAyBrtB,IAAI,SAAS7G,GAC7BklB,EAAOzd,OAAQmN,SAAS,GAAI7E,KAAOmV,EAAOzd,OAAQmN,SAAS,GAAGtV,KAAO,KAAO4lC,EAAcllC,GAAS,IAAMklB,EAAO5lB,KAC5H4iB,EAAKliB,KAGT,IAAIikC,EAAY5vB,EAAAlT,QAAQiQ,UAAU8T,EAAQse,EAAQ,KAAO0B,EAAcllC,GAAS,IAAMqR,EAAM,QAAU6yB,cAAc,EAAOC,cAAc,IACzIF,EAAU19B,OAAS,OACnB09B,EAAU57B,oBAAsBgM,EAAAlT,QAAQmH,0BACxC27B,EAAU58B,KAAO,MACjB48B,EAAUrvB,SAAS,GAAGtV,KAAOkkC,EAC7BpiC,KAAKgjC,WAAWhxB,WAAW6wB,GAC3B7iC,KAAKijC,UAAUz6B,KAAKq6B,GAEjB7iC,KAAKgjC,WAAW38B,QAAUrG,KAAKgjC,WAAW38B,OAAOA,SAChDyd,EAAO3I,MAAyBnb,KAAKgjC,WAAW38B,OAAOA,OAAQ68B,YAC/Dpf,EAAO8e,WAA8B5iC,KAAKgjC,WAAW38B,OAAOA,OAAQ88B,mBAKrES,EAAArkC,UAAA6jC,kBAAP,SAAyBb,EAAoBH,GACzCpiC,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAGtV,KAAOkkC,EAClCpiC,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAI7E,KAAOyzB,EAAQ,KAAgBpiC,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAI5U,MAAQ,IAAMoB,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAGtV,MAI7K0lC,EAAArkC,UAAA8jC,uBAAP,SAA8Bd,EAAoBpnB,GAClCnb,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAI2H,MAAQA,GAIzDyoB,EAAArkC,UAAA+jC,wBAAP,SAA+Bf,EAAoBpnB,GAC/Cnb,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAG2H,MAAQA,GAI5CyoB,EAAArkC,UAAAgkC,6BAAP,SAAoChB,EAAoBpnB,GAC3Cnb,KAAKijC,UAAUV,GAAY/uB,SAAS,GAAIovB,WAAaznB,GAEtEyoB,EAjEA,CAAiC7B,GAApB9kC,EAAA2mC,cAqEb,IAAAO,EAAA,SAAA5yB,GAgBI,SAAA4yB,EAEWjmC,EAEAkmC,QAAA,IAAAA,UAJX,IAAA/+B,EAKIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,KASX,GAZOqF,EAAAnH,OAEAmH,EAAA++B,SAlBH/+B,EAAAg/B,aAAuB,UACvBh/B,EAAAi/B,kBAA4B,UAC5Bj/B,EAAAk/B,aAAuB,QACvBl/B,EAAAm/B,UAAoB,QAGpBn/B,EAAAo/B,MAAe,IAAI/yB,MAcvBrM,EAAKq/B,QAAUN,EACf/+B,EAAKikB,UAAY,EACjBjkB,EAAKs/B,OAAS,IAAI9X,EAAA7U,WAClB3S,EAAKs/B,OAAOx9B,kBAAoB8L,EAAAlT,QAAQqH,uBACxC/B,EAAKs/B,OAAO19B,oBAAsBgM,EAAAlT,QAAQmH,0BAC1C7B,EAAKs/B,OAAOz+B,IAAM,EAClBb,EAAKs/B,OAAO1+B,KAAO,EACnBZ,EAAKs/B,OAAOz/B,MAAQ,IACjBk/B,EAAOrzB,OAAS,EAAG,CAClB,IAAI,IAAIpT,EAAI,EAAGA,EAAIymC,EAAOrzB,OAAS,EAAGpT,IAClC0H,EAAKs/B,OAAO3yB,WAAWoyB,EAAOzmC,GAAGqlC,YACjC39B,EAAKu/B,aAETv/B,EAAKs/B,OAAO3yB,WAAWoyB,EAAOA,EAAOrzB,OAAS,GAAGiyB,mBAErD39B,EAAK2M,WAAW3M,EAAKs/B,UAyP7B,OA9RoChzB,EAAAwyB,EAAA5yB,GAwCtB4yB,EAAA5kC,UAAAkF,aAAV,WACI,MAAO,kBAIXpG,OAAAC,eAAW6lC,EAAA5kC,UAAA,mBAAX,WACI,OAAOS,KAAKukC,kBAGhB,SAAuBppB,GAChBnb,KAAKukC,eAAiBppB,IAGzBnb,KAAKukC,aAAeppB,EACpBnb,KAAK6kC,oDAIDV,EAAA5kC,UAAAslC,gBAAR,WACI,IAAI,IAAIlnC,EAAI,EAAGA,EAAIqC,KAAK0kC,QAAQ3zB,OAAQpT,IACpCqC,KAAK0kC,QAAQ/mC,GAAGqlC,WAAWxvB,SAAS,GAAG2H,MAAQnb,KAAKukC,cAK5DlmC,OAAAC,eAAW6lC,EAAA5kC,UAAA,mBAAX,WACI,OAAOS,KAAKqkC,kBAGhB,SAAuBlpB,GAChBnb,KAAKqkC,eAAiBlpB,IAIzBnb,KAAKqkC,aAAelpB,EACpBnb,KAAK8kC,oDAIDX,EAAA5kC,UAAAulC,gBAAR,WACI,IAAI,IAAInnC,EAAI,EAAGA,EAAIqC,KAAK0kC,QAAQ3zB,OAAQpT,IACpC,IAAI,IAAIonC,EAAI,EAAGA,EAAI/kC,KAAK0kC,QAAQ/mC,GAAGslC,UAAUlyB,OAAQg0B,IACV/kC,KAAK0kC,QAAQ/mC,GAAI2lC,wBAAwByB,EAAG/kC,KAAKqkC,eAMpGhmC,OAAAC,eAAW6lC,EAAA5kC,UAAA,kBAAX,WACI,OAAOS,KAAKglC,iBAGhB,SAAsB7pB,GACfnb,KAAKglC,cAAgB7pB,IAGxBnb,KAAKglC,YAAc7pB,EACnBnb,KAAKilC,mDAGDd,EAAA5kC,UAAA0lC,eAAR,WACI,IAAI,IAAItnC,EAAI,EAAGA,EAAIqC,KAAK0kC,QAAQ3zB,OAAQpT,IACpC,IAAI,IAAIonC,EAAI,EAAGA,EAAI/kC,KAAK0kC,QAAQ/mC,GAAGslC,UAAUlyB,OAAQg0B,IACV/kC,KAAK0kC,QAAQ/mC,GAAI0lC,uBAAuB0B,EAAG/kC,KAAKglC,cAMnG3mC,OAAAC,eAAW6lC,EAAA5kC,UAAA,wBAAX,WACI,OAAOS,KAAKskC,uBAGhB,SAA4BnpB,GACrBnb,KAAKskC,oBAAsBnpB,IAI9Bnb,KAAKskC,kBAAoBnpB,EACzBnb,KAAKklC,yDAIDf,EAAA5kC,UAAA2lC,qBAAR,WACI,IAAI,IAAIvnC,EAAI,EAAGA,EAAIqC,KAAK0kC,QAAQ3zB,OAAQpT,IACpC,IAAI,IAAIonC,EAAI,EAAGA,EAAI/kC,KAAK0kC,QAAQ/mC,GAAGslC,UAAUlyB,OAAQg0B,IACV/kC,KAAK0kC,QAAQ/mC,GAAI4lC,6BAA6BwB,EAAG/kC,KAAKskC,oBAMzGjmC,OAAAC,eAAW6lC,EAAA5kC,UAAA,gBAAX,WACI,OAAOS,KAAKwkC,eAGhB,SAAoBrpB,GACdnb,KAAKwkC,YAAcrpB,IAItBnb,KAAKwkC,UAAYrpB,EACjBnb,KAAKmlC,iDAGAhB,EAAA5kC,UAAA4lC,aAAR,WACI,IAAI,IAAIxnC,EAAI,EAAGA,EAAIqC,KAAKykC,MAAM1zB,OAAQpT,IAClCqC,KAAKykC,MAAM9mC,GAAGilC,WAAa5iC,KAAKwkC,WAKhCL,EAAA5kC,UAAAqlC,WAAR,WACI,IAAIQ,EAAY,IAAIlc,EAAApO,UACpBsqB,EAAUlgC,MAAQ,EAClBkgC,EAAUjgC,OAAS,MACnBigC,EAAUn+B,oBAAsBgM,EAAAlT,QAAQmH,0BACxCk+B,EAAUxC,WAAa5iC,KAAKwkC,UAC5BY,EAAUjqB,MAAQ,cAClBnb,KAAK2kC,OAAO3yB,WAAWozB,GACvBplC,KAAKykC,MAAMj8B,KAAK48B,IAMbjB,EAAA5kC,UAAA8lC,SAAP,SAAgBpT,GACTjyB,KAAK0kC,QAAQ3zB,OAAS,GACrB/Q,KAAK4kC,aAET5kC,KAAK2kC,OAAO3yB,WAAWigB,EAAM+Q,YAC7BhjC,KAAK0kC,QAAQl8B,KAAKypB,GAClBA,EAAM+Q,WAAWxvB,SAAS,GAAG2H,MAAQnb,KAAKukC,aAC1C,IAAI,IAAIQ,EAAI,EAAGA,EAAI9S,EAAMgR,UAAUlyB,OAAQg0B,IACA9S,EAAOqR,wBAAwByB,EAAG/kC,KAAKqkC,cACvCpS,EAAOsR,6BAA6BwB,EAAG/kC,KAAKskC,oBAOpFH,EAAA5kC,UAAA+lC,YAAP,SAAmBC,GACf,KAAGA,EAAU,GAAKA,GAAWvlC,KAAK0kC,QAAQ3zB,QAA1C,CAGA,IAAIkhB,EAAQjyB,KAAK0kC,QAAQa,GACzBvlC,KAAK2kC,OAAOx2B,cAAc8jB,EAAM+Q,YAChChjC,KAAK0kC,QAAQn8B,OAAOg9B,EAAS,GAC1BA,EAAUvlC,KAAKykC,MAAM1zB,SACpB/Q,KAAK2kC,OAAOx2B,cAAcnO,KAAKykC,MAAMc,IACrCvlC,KAAKykC,MAAMl8B,OAAOg9B,EAAS,MAQ5BpB,EAAA5kC,UAAAimC,cAAP,SAAqBpD,EAAemD,GAC7BA,EAAU,GAAKA,GAAWvlC,KAAK0kC,QAAQ3zB,SAG9B/Q,KAAK0kC,QAAQa,GACPvC,WAAWxvB,SAAS,GAAI7E,KAAOyzB,IAS9C+B,EAAA5kC,UAAAkmC,QAAP,SAAerD,EAAemD,EAAiBhD,GAC3C,KAAGgD,EAAU,GAAKA,GAAWvlC,KAAK0kC,QAAQ3zB,QAA1C,CAGA,IAAIkhB,EAAQjyB,KAAK0kC,QAAQa,GACtBhD,EAAa,GAAKA,GAActQ,EAAMgR,UAAUlyB,QAGZkhB,EAAOmR,kBAAkBb,EAAYH,KAOzE+B,EAAA5kC,UAAAmmC,wBAAP,SAA+BH,EAAiBhD,GAC5C,KAAGgD,EAAU,GAAKA,GAAWvlC,KAAK0kC,QAAQ3zB,QAA1C,CAGA,IAAIkhB,EAAQjyB,KAAK0kC,QAAQa,GACtBhD,EAAa,GAAKA,GAActQ,EAAMgR,UAAUlyB,QAGnDkhB,EAAMuQ,eAAeD,KASlB4B,EAAA5kC,UAAAomC,mBAAP,SAA0BJ,EAAiBnD,EAAethB,EAAkB6hB,SAAlB,IAAA7hB,MAAA,mBAAkB,IAAA6hB,OAAA,GACrE4C,EAAU,GAAKA,GAAWvlC,KAAK0kC,QAAQ3zB,SAG9B/Q,KAAK0kC,QAAQa,GACF7C,YAAYN,EAAOthB,EAAM6hB,IAS7CwB,EAAA5kC,UAAAqmC,gBAAP,SAAuBL,EAAiBnD,EAAethB,EAAkB6hB,SAAlB,IAAA7hB,MAAA,mBAAkB,IAAA6hB,OAAA,GAClE4C,EAAU,GAAKA,GAAWvlC,KAAK0kC,QAAQ3zB,SAG9B/Q,KAAK0kC,QAAQa,GACL7B,SAAStB,EAAOthB,EAAM6hB,IAcvCwB,EAAA5kC,UAAAsmC,iBAAP,SAAwBN,EAAiBnD,EAAethB,EAAiB7Q,EAAwB7E,EAAiBE,EAAiB1M,EAAmBknC,SAA9F,IAAAhlB,MAAA,mBAAiB,IAAA7Q,MAAA,cAAwB,IAAA7E,MAAA,QAAiB,IAAAE,MAAA,QAAiB,IAAA1M,MAAA,QAAmB,IAAAknC,MAAA,SAASnJ,GAAY,OAAW,EAAJA,IAC3K4I,EAAU,GAAKA,GAAWvlC,KAAK0kC,QAAQ3zB,SAG9B/Q,KAAK0kC,QAAQa,GACJ1B,UAAUzB,EAAOthB,EAAM7Q,EAAM7E,EAAKE,EAAK1M,EAAOknC,IAG3E3B,EA9RA,CAAoCjb,EAAApO,WAAvB7d,EAAAknC,qcCzRb,IAAAtX,EAAApvB,EAAA,GACAmC,EAAAnC,EAAA,GACAsoC,EAAAtoC,EAAA,IASAuoC,EAAA,WAiBA,OAjBA,gBAAa/oC,EAAA+oC,iBA4Bb,IAAAC,EAAA,SAAA10B,GAAA,SAAA00B,IAAA,IAAA5gC,EAAA,OAAAkM,KAAAqF,MAAA5W,KAAAkhC,YAAAlhC,YAEWqF,EAAA6gC,qBAAuB,IAAItmC,EAAAqE,WAG3BoB,EAAA8gC,mBAAqB,OAErB9gC,EAAA+gC,oBAAsB,OAGtB/gC,EAAAghC,yBAA2B,MAE3BhhC,EAAAihC,0BAA4B,MAE5BjhC,EAAAkhC,wBAA0B,MAE1BlhC,EAAAmhC,2BAA6B,MAG7BnhC,EAAAohC,mBAAqB,OAErBphC,EAAAqhC,wBAA0B,UAG1BrhC,EAAAshC,iBAAmB,UAEnBthC,EAAAuhC,uBAAyB,EAGzBvhC,EAAAwhC,WAAa,EA2FZxhC,EAAAyhC,6BAAoD,KACpDzhC,EAAA0hC,wBACA1hC,EAAA2hC,oBAAkD,OA2I9D,OArQqCr1B,EAAAs0B,EAAA10B,GA+BvB00B,EAAA1mC,UAAAkF,aAAV,WACI,MAAO,mBAGHwhC,EAAA1mC,UAAA0nC,WAAR,SAAmB/nC,EAAagoC,GAAhC,IAAA7hC,EAAArF,KACQ8jB,EAASiiB,EAAA1c,OAAOW,mBAAmB9qB,EAAKA,GAuB5C,OArBA4kB,EAAO5e,MAAQgiC,GAAeA,EAAYhiC,MAAQgiC,EAAYhiC,MAAQlF,KAAKmmC,mBAC3EriB,EAAO3e,OAAS+hC,GAAeA,EAAY/hC,OAAS+hC,EAAY/hC,OAASnF,KAAKomC,oBAC9EtiB,EAAO3I,MAAQ+rB,GAAeA,EAAY/rB,MAAQ+rB,EAAY/rB,MAAQnb,KAAKymC,mBAC3E3iB,EAAO8e,WAAasE,GAAeA,EAAYtE,WAAasE,EAAYtE,WAAa5iC,KAAK0mC,wBAC1F5iB,EAAO8F,YAAcsd,GAAeA,EAAYtd,YAAcsd,EAAYtd,YAAc5pB,KAAKqmC,yBAC7FviB,EAAOqjB,aAAeD,GAAeA,EAAYC,aAAeD,EAAYC,aAAennC,KAAKsmC,0BAChGxiB,EAAOsjB,WAAaF,GAAeA,EAAYE,WAAaF,EAAYE,WAAapnC,KAAKumC,wBAC1FziB,EAAOogB,cAAgBgD,GAAeA,EAAYhD,cAAgBgD,EAAYhD,cAAgBlkC,KAAKwmC,2BAEnG1iB,EAAOwF,UAAY,EACnBxF,EAAOtgB,kBAAmB,EAE1BsgB,EAAOlgB,YAAc5D,KAAK4D,YAC1BkgB,EAAOngB,WAAa3D,KAAK2D,WACzBmgB,EAAOrgB,cAAgBzD,KAAKyD,cAC5BqgB,EAAOpgB,cAAgB1D,KAAK0D,cAE5BogB,EAAO1f,sBAAsBqB,IAAI,WAC7BJ,EAAK6gC,qBAAqBn7B,gBAAgB7L,KAGvC4kB,GAQJmiB,EAAA1mC,UAAA8nC,WAAP,SAAkBC,EAAqBC,GACnC,IAAI7Z,EAAQ,IAAIb,EAAA7U,WAChB0V,EAAMC,YAAa,EACnBD,EAAMlqB,kBAAmB,EAEzB,IAAK,IAAI7F,EAAI,EAAGA,EAAI2pC,EAAKv2B,OAAQpT,IAAK,CAClC,IAAI6pC,EAAa,KAEbD,GAAgBA,EAAax2B,SAAWu2B,EAAKv2B,SAC7Cy2B,EAAaD,EAAa5pC,IAG9B+vB,EAAM1b,WAAWhS,KAAKinC,WAAWK,EAAK3pC,GAAI6pC,IAG9CxnC,KAAKgS,WAAW0b,IAObuY,EAAA1mC,UAAAkoC,gBAAP,SAAuBZ,GACnB,GAAK7mC,KAAKwT,SAIV,IAAK,IAAI7V,EAAI,EAAGA,EAAIqC,KAAKwT,SAASzC,OAAQpT,IAAK,CAC3C,IAAIwf,EAAMnd,KAAKwT,SAAS7V,GACxB,GAAKwf,GAAoBA,EAAK3J,SAK9B,IADA,IAAIk0B,EAA0BvqB,EACrB4nB,EAAI,EAAGA,EAAI2C,EAAal0B,SAASzC,OAAQg0B,IAAK,CACnD,IAAIjhB,EAAS4jB,EAAal0B,SAASuxB,GAEnC,GAAKjhB,GAAWA,EAAOtQ,SAAS,GAAhC,CAIA,IAAIm0B,EAAgB7jB,EAAOtQ,SAAS,GAET,MAAvBm0B,EAAch5B,OACdmV,EAAO3I,MAAS0rB,EAAa7mC,KAAK2mC,iBAAmB3mC,KAAKymC,mBAC1D3iB,EAAOwF,UAAaud,EAAa,EAAI7mC,KAAK4mC,uBAAyB,GAGvEe,EAAch5B,KAAQk4B,EAAa,EAAIc,EAAch5B,KAAKi5B,cAAgBD,EAAch5B,KAAKk5B,kBAUzGxpC,OAAAC,eAAW2nC,EAAA1mC,UAAA,0BAAX,WACI,OAAOS,KAAK8mC,8DAQTb,EAAA1mC,UAAAuoC,QAAP,SAAeC,GAAf,IAAA1iC,EAAArF,KAEI,IADkCA,KAAK+mC,qBAAqBiB,KAAK,SAAAC,GAAK,OAAAA,EAAEF,QAAUA,IAClF,CAIiC,OAA7B/nC,KAAKgnC,sBACLhnC,KAAKgnC,oBAAsBhnC,KAAKkmC,qBAAqBzgC,IAAI,SAACvG,GACtD,GAAKmG,EAAKyhC,6BAAV,CAMA,OAFAzhC,EAAKyhC,6BAA6B/hC,MAAMyf,eAAiBnf,EAAKyhC,6BAEtD5nC,GACJ,IAAK,IAMD,OALAmG,EAAKwhC,aACDxhC,EAAKwhC,WAAa,IAClBxhC,EAAKwhC,WAAa,QAEtBxhC,EAAKoiC,gBAAgBpiC,EAAKwhC,YAE9B,IAAK,IAED,YADAxhC,EAAKyhC,6BAA6BrX,WAAW,GAEjD,IAAK,IAED,YADApqB,EAAKyhC,6BAA6BrX,WAAW,IAGrDpqB,EAAKyhC,6BAA6BrX,YAAY,EAAIpqB,EAAKwhC,WAAa3nC,EAAI0oC,cAAgB1oC,GAEhE,IAApBmG,EAAKwhC,aACLxhC,EAAKwhC,WAAa,EAClBxhC,EAAKoiC,gBAAgBpiC,EAAKwhC,iBAKtC7mC,KAAKsM,WAAY,EACjBtM,KAAK8mC,6BAA+BiB,EACpCA,EAAMxY,0BAA4BvvB,KAGlC,IAAMkoC,EAAiDH,EAAMlZ,kBAAkBppB,IAAI,WAC/EJ,EAAKyhC,6BAA+BiB,EACpCA,EAAMxY,0BAA4BlqB,EAClCA,EAAKiH,WAAY,IAGf67B,EAAgDJ,EAAMjZ,iBAAiBrpB,IAAI,WAC7EsiC,EAAMxY,0BAA4B,KAClClqB,EAAKyhC,6BAA+B,KACpCzhC,EAAKiH,WAAY,IAGrBtM,KAAK+mC,qBAAqBv+B,MACtBu/B,MAAKA,EACLI,eAAcA,EACdD,gBAAeA,MAShBjC,EAAA1mC,UAAA6oC,WAAP,SAAkBL,GAAlB,IAAA1iC,EAAArF,KACI,GAAI+nC,EAAO,CAEP,IAAIM,EAAWroC,KAAK+mC,qBAAqBuB,OAAO,SAAAL,GAAK,OAAAA,EAAEF,QAAUA,IACzC,IAApBM,EAASt3B,SACT/Q,KAAKuoC,iCAAiCF,EAAS,IAE/CroC,KAAK+mC,qBAAuB/mC,KAAK+mC,qBAAqBuB,OAAO,SAAAL,GAAK,OAAAA,EAAEF,QAAUA,IAC1E/nC,KAAK8mC,+BAAiCiB,IACtC/nC,KAAK8mC,6BAA+B,YAI5C9mC,KAAK+mC,qBAAqBxF,QAAQ,SAACiH,GAC/BnjC,EAAKkjC,iCAAiCC,KAE1CxoC,KAAK+mC,wBAGgC,IAArC/mC,KAAK+mC,qBAAqBh2B,SAC1B/Q,KAAK8mC,6BAA+B,KACpC9mC,KAAKkmC,qBAAqB3gC,OAAOvF,KAAKgnC,qBACtChnC,KAAKgnC,oBAAsB,OAI3Bf,EAAA1mC,UAAAgpC,iCAAR,SAAyCC,GACrCA,EAAmBT,MAAMxY,0BAA4B,KACrDiZ,EAAmBT,MAAMlZ,kBAAkBtpB,OAAOijC,EAAmBN,iBACrEM,EAAmBT,MAAMjZ,iBAAiBvpB,OAAOijC,EAAmBL,iBAMjElC,EAAA1mC,UAAA0O,QAAP,WACIsD,EAAAhS,UAAM0O,QAAOnQ,KAAAkC,MAEbA,KAAKooC,cAWKnC,EAAAwC,oBAAd,SAAkCvqC,GAC9B,IAAIwqC,EAAc,IAAIzC,EAAgB/nC,GAQtC,OANAwqC,EAAYrB,YAAY,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC1EqB,EAAYrB,YAAY,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACrEqB,EAAYrB,YAAY,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC/EqB,EAAYrB,YAAY,IAAU,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC/EqB,EAAYrB,YAAY,OAASniC,MAAO,WAEjCwjC,GAEfzC,EArQA,CAAqCpZ,EAAA7U,YAAxB/a,EAAAgpC,scCtCb,IAIA0C,EAAA,SAAAp3B,GA4II,SAAAo3B,EAAmBzqC,GAAnB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YADIqF,EAAAnH,OA3IXmH,EAAAgU,WAAa,GACbhU,EAAAiU,YAAc,GAEdjU,EAAAujC,mBAAqB,EACrBvjC,EAAAwjC,gBAAkB,WAElBxjC,EAAAyjC,mBAAqB,EACrBzjC,EAAA0jC,gBAAkB,QAElB1jC,EAAA2jC,oBAAsB,EAEtB3jC,EAAAiO,YAAc,QAEdjO,EAAA4jC,oBAAqB,EACrB5jC,EAAA6jC,oBAAqB,IA0MjC,OAzNiCv3B,EAAAg3B,EAAAp3B,GAkB7BlT,OAAAC,eAAWqqC,EAAAppC,UAAA,yBAAX,WACI,OAAOS,KAAKkpC,wBAGhB,SAA6BtqC,GACrBoB,KAAKkpC,qBAAuBtqC,IAIhCoB,KAAKkpC,mBAAqBtqC,EAC1BoB,KAAK4E,iDAITvG,OAAAC,eAAWqqC,EAAAppC,UAAA,yBAAX,WACI,OAAOS,KAAKipC,wBAGhB,SAA6BrqC,GACrBoB,KAAKipC,qBAAuBrqC,IAIhCoB,KAAKipC,mBAAqBrqC,EAC1BoB,KAAK4E,iDAITvG,OAAAC,eAAWqqC,EAAAppC,UAAA,kBAAX,WACI,OAAOS,KAAKsT,iBAGhB,SAAsB1U,GACdoB,KAAKsT,cAAgB1U,IAIzBoB,KAAKsT,YAAc1U,EACnBoB,KAAK4E,iDAITvG,OAAAC,eAAWqqC,EAAAppC,UAAA,iBAAX,WACI,OAAOS,KAAKqZ,gBAGhB,SAAqBza,GACjBoB,KAAKqZ,WAAaza,EAElBoB,KAAK4E,gDAITvG,OAAAC,eAAWqqC,EAAAppC,UAAA,kBAAX,WACI,OAAOS,KAAKsZ,iBAGhB,SAAsB1a,GAClBoB,KAAKsZ,YAAc1a,EAEnBoB,KAAK4E,gDAITvG,OAAAC,eAAWqqC,EAAAppC,UAAA,yBAAX,WACI,OAAOS,KAAK4oC,wBAGhB,SAA6BhqC,GACzBoB,KAAK4oC,mBAAqBhqC,EAE1BoB,KAAK4E,gDAITvG,OAAAC,eAAWqqC,EAAAppC,UAAA,sBAAX,WACI,OAAOS,KAAK6oC,qBAGhB,SAA0BjqC,GACtBoB,KAAK6oC,gBAAkBjqC,EAEvBoB,KAAK4E,gDAITvG,OAAAC,eAAWqqC,EAAAppC,UAAA,yBAAX,WACI,OAAOS,KAAK8oC,wBAGhB,SAA6BlqC,GACzBoB,KAAK8oC,mBAAqBlqC,EAE1BoB,KAAK4E,gDAITvG,OAAAC,eAAWqqC,EAAAppC,UAAA,sBAAX,WACI,OAAOS,KAAK+oC,qBAGhB,SAA0BnqC,GACtBoB,KAAK+oC,gBAAkBnqC,EAEvBoB,KAAK4E,gDAITvG,OAAAC,eAAWqqC,EAAAppC,UAAA,0BAAX,WACI,OAAOS,KAAKgpC,yBAGhB,SAA8BpqC,GAC1BoB,KAAKgpC,oBAAsBpqC,EAE3BoB,KAAK4E,gDAWF+jC,EAAAppC,UAAAuM,MAAP,SAAavB,EAAwBhB,GAKjC,GAJAA,EAAQ2K,OAERlU,KAAKiK,aAAaV,GAEdvJ,KAAKoD,YAAcpD,KAAKsK,iBAAiBC,EAAehB,GAAU,CAE9DvJ,KAAKsT,cACL/J,EAAQY,UAAYnK,KAAKsT,YACzB/J,EAAQ0K,SAASjU,KAAKI,gBAAgB6F,KAAMjG,KAAKI,gBAAgB8F,IAAKlG,KAAKI,gBAAgB8E,MAAOlF,KAAKI,gBAAgB+E,SAG3H,IAAIgkC,EAAanpC,KAAKI,gBAAgB8E,MAAQlF,KAAKqZ,WAC/C+vB,EAAappC,KAAKI,gBAAgB+E,OAASnF,KAAKsZ,YAG9CrT,EAAOjG,KAAKI,gBAAgB6F,KAAOjG,KAAKI,gBAAgB8E,MAAQ,EAChEmkC,EAAMrpC,KAAKI,gBAAgB8F,IAAMlG,KAAKI,gBAAgB+E,OAAS,EAErE,GAAInF,KAAKkpC,mBAAoB,CACzB3/B,EAAQwM,YAAc/V,KAAK6oC,gBAC3Bt/B,EAAQuM,UAAY9V,KAAK4oC,mBAEzB,IAAK,IAAIliC,GAAKyiC,EAAa,EAAGziC,EAAIyiC,EAAa,EAAGziC,IAAK,CACnD,IAAM4iC,EAAQrjC,EAAOS,EAAI1G,KAAKid,UAE9B1T,EAAQ2B,YACR3B,EAAQgS,OAAO+tB,EAAOtpC,KAAKI,gBAAgB8F,KAC3CqD,EAAQiS,OAAO8tB,EAAOtpC,KAAKI,gBAAgB8F,IAAMlG,KAAKI,gBAAgB+E,QAEtEoE,EAAQ6R,SAGZ,IAAK,IAAIzU,GAAKyiC,EAAa,EAAGziC,EAAIyiC,EAAa,EAAGziC,IAAK,CACnD,IAAM4iC,EAAQF,EAAM1iC,EAAI3G,KAAKod,WAE7B7T,EAAQ2B,YACR3B,EAAQgS,OAAOvb,KAAKI,gBAAgB6F,KAAMsjC,GAC1ChgC,EAAQiS,OAAOxb,KAAKI,gBAAgB6F,KAAOjG,KAAKI,gBAAgB8E,MAAOqkC,GACvEhgC,EAAQ6R,UAKhB,GAAIpb,KAAKipC,mBAAoB,CACzB1/B,EAAQwM,YAAc/V,KAAK+oC,gBAC3Bx/B,EAAQuM,UAAY9V,KAAK8oC,mBAEzB,IAASpiC,GAAKyiC,EAAa,EAAInpC,KAAKgpC,oBAAqBtiC,EAAIyiC,EAAa,EAAGziC,GAAK1G,KAAKgpC,oBAAqB,CACpGM,EAAQrjC,EAAOS,EAAI1G,KAAKid,UAE5B1T,EAAQ2B,YACR3B,EAAQgS,OAAO+tB,EAAOtpC,KAAKI,gBAAgB8F,KAC3CqD,EAAQiS,OAAO8tB,EAAOtpC,KAAKI,gBAAgB8F,IAAMlG,KAAKI,gBAAgB+E,QACtEoE,EAAQ6R,SAGZ,IAASzU,GAAKyiC,EAAa,EAAIppC,KAAKgpC,oBAAqBriC,EAAIyiC,EAAa,EAAGziC,GAAK3G,KAAKgpC,oBAAqB,CACpGO,EAAQF,EAAM1iC,EAAI3G,KAAKod,WAC3B7T,EAAQgS,OAAOvb,KAAKI,gBAAgB6F,KAAMsjC,GAC1ChgC,EAAQiS,OAAOxb,KAAKI,gBAAgB6F,KAAOjG,KAAKI,gBAAgB8E,MAAOqkC,GACvEhgC,EAAQwG,YACRxG,EAAQ6R,WAKpB7R,EAAQiL,WAGFm0B,EAAAppC,UAAAkF,aAAV,WACI,MAAO,eAEfkkC,EAzNA,CAJAlrC,EAAA,GAIiCsC,SAApB9C,EAAA0rC,6FCLb,IAAA11B,EAAAxV,EAAA,GACAovB,EAAApvB,EAAA,GACA0rB,EAAA1rB,EAAA,GAQSR,EAAAiB,KAFI,UAYb+U,EAAAlT,QAAQiQ,UAAY,SAAU+B,EAAkBpD,EAAc4V,EAAuBilB,GACjF,IAAI9b,EAAQ,IAAIb,EAAA7U,WAAW,SACvB8qB,GAAe0G,GAAUA,EAAQ1G,aACjCC,GAAeyG,GAAUA,EAAQzG,aAErCrV,EAAMC,YAAcmV,EAEpB,IAAIjV,EAAS,IAAI1E,EAAAxU,UAAU,UAwB3B,OAvBAkZ,EAAOlf,KAAOA,EACdkf,EAAOlE,wBAA0B1W,EAAAlT,QAAQmH,0BACrC47B,EACAjV,EAAO3oB,MAAQqf,EAEfsJ,EAAO1oB,OAASof,EAGhBwe,GACArV,EAAM1b,WAAWD,GACjB2b,EAAM1b,WAAW6b,GACjBA,EAAOjE,YAAc,QAErB8D,EAAM1b,WAAW6b,GACjBH,EAAM1b,WAAWD,GACjB8b,EAAOsZ,aAAe,OAG1BtZ,EAAOlqB,WAAaoO,EAAQpO,WAC5BkqB,EAAOjqB,YAAcmO,EAAQnO,YAC7BiqB,EAAOpqB,cAAgBsO,EAAQtO,cAC/BoqB,EAAOnqB,cAAgBqO,EAAQrO,cAExBgqB,gJCnDX7S,EAAApd,EAAA,KACAod,EAAApd,EAAA,KAEAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,kJCJAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,IACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,KACAod,EAAApd,EAAA,wbCXA,IAAAgsC,EAAAhsC,EAAA,GACAmC,EAAAnC,EAAA,GAEAob,EAAApb,EAAA,GAKAisC,EAAA,SAAAn4B,GAAA,SAAAm4B,IAAA,IAAArkC,EAAA,OAAAkM,KAAAqF,MAAA5W,KAAAkhC,YAAAlhC,YACYqF,EAAAskC,QAAU,IAsDtB,OAvDmCh4B,EAAA+3B,EAAAn4B,GAM/BlT,OAAAC,eAAWorC,EAAAnqC,UAAA,cAAX,WACI,OAAOS,KAAK2pC,aAGhB,SAAkB/qC,GAAlB,IAAAyG,EAAArF,KACQA,KAAK2pC,UAAY/qC,IAIrBoB,KAAK2pC,QAAU/qC,EAEfgB,EAAAmI,MAAMqR,aAAa,WACf/T,EAAKuM,uDAIH83B,EAAAnqC,UAAAob,aAAV,SAAuB5I,EAAoB63B,GACvC,IAAI1hC,EAAO6J,EAAQ7J,KAEnB,GAAKA,EAAL,CAGA,IAAI2hC,EAAS7pC,KAAK8pC,oBAAoBF,GAGtC,OAFA73B,EAAQjL,SAAW+iC,EAEX7pC,KAAK+pC,aACT,KAAKlxB,EAAAvH,YAAYsB,uBACb1K,EAAK8hC,OAAO,IAAIlQ,QAAQtyB,SAASqiC,EAAOnjC,EAAGmjC,EAAOljC,GAAIkjC,EAAOhiC,IAC7D,MACJ,KAAKgR,EAAAvH,YAAYuB,+BACb3K,EAAK8hC,OAAO,IAAIlQ,QAAQtyB,QAAQ,EAAIqiC,EAAOnjC,EAAGmjC,EAAOljC,EAAG,EAAIkjC,EAAOhiC,IACnE,MACJ,KAAKgR,EAAAvH,YAAYwB,wBACb,MACJ,KAAK+F,EAAAvH,YAAYyB,gCACb7K,EAAKyB,OAAOmwB,QAAQmQ,KAAKC,EAAGphC,KAAKgH,GAAIgqB,QAAQqQ,MAAMC,UAKvDV,EAAAnqC,UAAAuqC,oBAAR,SAA4Bn5B,GACxB,IAAIk5B,EAAS,IAAIjqC,EAAA4H,QAAQ,EAAGmJ,EAAOhK,EAAG3G,KAAK2pC,SAEvCU,EAAU15B,EAAOjK,EAAI1G,KAAK2pC,QAI9B,OAFA/pC,EAAA8H,OAAO4iC,0BAA0BD,EAAQ,EAAG,EAAGzqC,EAAAoa,IAAItS,OAAO,IAEnD9H,EAAA4H,QAAQ+iC,gBAAgBV,EAAQjqC,EAAAoa,IAAItS,OAAO,KAE1DgiC,EAvDA,CAAmCD,EAAA3wB,kBAAtB7b,EAAAysC,ocCRb,IAAAc,EAAA/sC,EAAA,IACAmC,EAAAnC,EAAA,GACAgtC,EAAAhtC,EAAA,IACAovB,EAAApvB,EAAA,GACA2rB,EAAA3rB,EAAA,IACA0rB,EAAA1rB,EAAA,GACAkqB,EAAAlqB,EAAA,IAMAitC,EAAA,SAAAn5B,GA8JI,SAAAm5B,EAAYxsC,EAAeysC,QAAA,IAAAA,OAAA,GAA3B,IAAAtlC,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YAzJPqF,EAAAulC,iBAAkB,EA2JtBvlC,EAAKulC,gBAAkBD,EAGvBtlC,EAAK8hB,sBAAwB,WACpB9hB,EAAK6C,MAGV7C,EAAKwlC,YAAYhkB,YAAW,IAGhCxhB,EAAK+hB,oBAAsB,WAClB/hB,EAAK6C,MAGV7C,EAAKwlC,YAAYhkB,YAAW,MAgJxC,OA/TuClV,EAAA+4B,EAAAn5B,GAoB3Bm5B,EAAAnrC,UAAAurC,gBAAR,WACI9qC,KAAK+qC,aAAe,KACjB/qC,KAAKgrC,mBACJhrC,KAAKgrC,kBAAkB/8B,UAExBjO,KAAKirC,iBACJjrC,KAAKirC,gBAAgBh9B,UAEtBjO,KAAKkrC,cACJlrC,KAAKkrC,aAAaj9B,UAEtBjO,KAAKsE,yBAAyBiB,OAAOvF,KAAKmrC,uBAC1CnrC,KAAKkE,uBAAuBqB,OAAOvF,KAAKorC,sBAM5C/sC,OAAAC,eAAWosC,EAAAnrC,UAAA,mBAiDX,WACI,OAAGS,KAAKgrC,kBACGhrC,KAAKgrC,kBAAkBr8B,KAE3B,UArDX,SAAuBA,GAAvB,IAAAtJ,EAAArF,KACI,GAAI2O,EAAJ,CAIA,IAAI3O,KAAK+qC,aAAa,CAElB/qC,KAAKkrC,aAAepR,QAAQhR,YAAYuiB,YAAY,IAAK9mB,KAAM,GAAIvkB,KAAKsrC,WAAWC,QACnF,IAAIC,EAAoB1R,QAAQhR,YAAYuiB,YAAY,IAAK9mB,KAAM,EAAGknB,gBAAiB3R,QAAQ4R,KAAKC,YAAa3rC,KAAKsrC,WAAWC,QAC7HK,EAAM,IAAIhsC,EAAAqlB,iBAAiB,GAAIjlB,KAAKsrC,WAAWC,QACnDK,EAAIzmB,aAAe2U,QAAQ1U,OAAOymB,cAAc,WAChDL,EAAkBxmB,SAAW4mB,EAC7BJ,EAAkBvkB,YAAa,EAC/BjnB,KAAKkrC,aAAaY,SAASN,GAC3BA,EAAkB1kC,SAASe,EAAI,IAC/B7H,KAAKkrC,aAAa/kB,QAAQxf,EAAI,EAAE,EAChC3G,KAAKkrC,aAAapkC,SAASH,EAAI,GAC/B3G,KAAKkrC,aAAapkC,SAASe,GAAK,IAChC7H,KAAKkrC,aAAajkB,YAAa,EAC/BjnB,KAAKkrC,aAAa7kC,OAASrG,KAAKsrC,WAGhCtrC,KAAKirC,gBAAkBtjB,EAAA5J,uBAAuB8G,cAAc7kB,KAAKkrC,cACjElrC,KAAKgrC,kBAAoB,IAAI7hB,EAAAxU,UAC7B3U,KAAKgrC,kBAAkBviB,OAAS,EAChCzoB,KAAKgrC,kBAAkB7vB,MAAQ,QAC/Bnb,KAAKgrC,kBAAkBe,SAAW,IAClC/rC,KAAKirC,gBAAgBj5B,WAAWhS,KAAKgrC,mBAGrChrC,KAAK+qC,aAAe,IAAIjR,QAAQkS,kBAChChsC,KAAK+qC,aAAakB,MAAQ,IAC1BjsC,KAAKkrC,aAAa9kB,YAAYpmB,KAAK+qC,cACnC/qC,KAAKmrC,sBAAwBnrC,KAAKsE,yBAAyBmB,IAAI,WACxDJ,EAAK0lC,cACJ1lC,EAAK0lC,aAAamB,QAAO,KAGjClsC,KAAKorC,oBAAsBprC,KAAKkE,uBAAuBuB,IAAI,WACpDJ,EAAK0lC,cACJ1lC,EAAK0lC,aAAamB,QAAO,KAIlClsC,KAAKgrC,oBACJhrC,KAAKgrC,kBAAkBr8B,KAAOA,QA3C9B3O,KAAK8qC,mDAyDbzsC,OAAAC,eAAWosC,EAAAnrC,UAAA,YAAX,WACI,OAAOS,KAAK4U,WAGhB,SAAgBhW,GACRoB,KAAK4U,QAAUhW,IAInBoB,KAAK4U,MAAQhW,EACboB,KAAKmsC,oDAMT9tC,OAAAC,eAAWosC,EAAAnrC,UAAA,gBAAX,WACI,OAAOS,KAAKosC,eAGhB,SAAoBxtC,GACZoB,KAAKosC,YAAcxtC,IAIvBoB,KAAKosC,UAAYxtC,EACjBoB,KAAKmsC,oDAMT9tC,OAAAC,eAAWosC,EAAAnrC,UAAA,oBAAX,WACI,OAAOS,KAAKqsC,+CAMhBhuC,OAAAC,eAAWosC,EAAAnrC,UAAA,qBAAX,WACI,OAAOS,KAAKssC,gDAMhBjuC,OAAAC,eAAWosC,EAAAnrC,UAAA,qBAAX,WACI,OAAOS,KAAKusC,gDAMhBluC,OAAAC,eAAWosC,EAAAnrC,UAAA,sBAAX,WACI,OAAOS,KAAK4qC,iDA4BNF,EAAAnrC,UAAAkF,aAAV,WACI,MAAO,qBAGHimC,EAAAnrC,UAAA4sC,gBAAR,WACInsC,KAAKmoB,wBAEL,IAAIuF,EAAQ,IAAIb,EAAA7U,WAGhB,GAFA0V,EAAMC,YAAa,EAEf3tB,KAAKosC,UAAW,CAChB,IAAIxQ,EAAQ,IAAIxS,EAAA1N,MAChBkgB,EAAMjrB,OAAS3Q,KAAKosC,UACpBxQ,EAAMwL,WAAa,OACnBxL,EAAMz2B,OAAS,QACfy2B,EAAM12B,MAAQ,QACd02B,EAAMsI,cAAgB,OACtBxW,EAAM1b,WAAW4pB,GAGrB,GAAI57B,KAAK4U,MAAO,CACZ,IAAIjG,EAAO,IAAIwa,EAAAxU,UACfhG,EAAKA,KAAO3O,KAAK4U,MACjBjG,EAAKwM,MAAQ,QACbxM,EAAKxJ,OAAS,OACdwJ,EAAKo9B,SAAW,GAChBre,EAAM1b,WAAWrD,GAGjB3O,KAAK6qC,cACL7qC,KAAKqoB,QAAUqF,IAKbgd,EAAAnrC,UAAA+S,YAAV,SAAsBvL,GAuBlB,OAtBA/G,KAAKsrC,WAAa1rC,EAAAkpB,YAAYC,UAAU/oB,KAAK9B,KAAO,YAChDgH,MAAO,EACPC,OAAQ,EACR6jB,MAAO,KACRjiB,GAEH/G,KAAK6qC,YAAcjrC,EAAAkpB,YAAYC,UAAU/oB,KAAK9B,KAAO,aACjDgH,MAAO,EACPC,OAAQ,EACR6jB,MAAO,KACRjiB,GAEH/G,KAAK6qC,YAAYxkC,OAASrG,KAAKsrC,WAC/BtrC,KAAK6qC,YAAY/jC,SAASe,GAAK,IAC/B7H,KAAK6qC,YAAY5jB,YAAa,EAC9BjnB,KAAK6qC,YAAYhkB,YAAW,GAE5B7mB,KAAKwsC,WAAmBj7B,EAAAhS,UAAM+S,YAAWxU,KAAAkC,KAAC+G,GAC1C/G,KAAKwsC,WAAWnmC,OAASrG,KAAKsrC,WAC9BtrC,KAAKwsC,WAAW1lC,SAASe,GAAK,IAC9B7H,KAAKwsC,WAAWvlB,YAAa,EAEtBjnB,KAAKsrC,YAGNZ,EAAAnrC,UAAAmpB,aAAV,SAAuBC,GACnB3oB,KAAKusC,eAAe/mB,gBAAkBmD,EACtC3oB,KAAKusC,eAAe9mB,eAAiBkD,GAGjC+hB,EAAAnrC,UAAAktC,oBAAR,SAA4BvkC,GAA5B,IAAA7C,EAAArF,KACIA,KAAKqsC,cAAgB,IAAI5B,EAAAnW,eAAet0B,KAAK9B,KAAO,gBAAiBgK,EAAK+W,YAC1Ejf,KAAKqsC,cAAcvX,kBAAmB,EACtC90B,KAAK0sC,qBAAuB1sC,KAAK+E,MAAM4nC,+BAA+BlnC,IAAI,SAAAgiB,GAClEA,GACApiB,EAAKgnC,cAAcnX,cAAgBzN,EACnCpiB,EAAKgnC,cAAcrX,WAAWiT,EAAI,GAElC5iC,EAAKgnC,cAAcrX,WAAWiT,EAAI,KAKtCyC,EAAAnrC,UAAAqtC,qBAAR,SAA6B1kC,GACzBlI,KAAKssC,eAAiB,IAAI7B,EAAAnW,eAAet0B,KAAK9B,KAAO,iBAAkBgK,EAAK+W,YAC5Ejf,KAAKssC,eAAe/X,wBAA0B,EAC9Cv0B,KAAKssC,eAAejiC,MAAQ,GAC5BrK,KAAKssC,eAAe5X,eAAgB,GAGhCgW,EAAAnrC,UAAAstC,qBAAR,SAA6B3kC,GACzBlI,KAAKusC,eAAiB,IAAI3sC,EAAAqlB,iBAAiBjlB,KAAK9B,KAAO,iBAAkBgK,EAAK+W,YAC9Ejf,KAAKusC,eAAejnB,cAAgB1lB,EAAAwlB,OAAOC,SAGrCqlB,EAAAnrC,UAAA2nB,gBAAV,SAA0Bhf,GAElBlI,KAAK4qC,iBACA5qC,KAAK+E,MAAM+nC,iBAAqC,mBAIjD9sC,KAAKqsC,cAAgBrsC,KAAK+E,MAAM+nC,iBAAqC,oBAHrE9sC,KAAKysC,oBAAoBvkC,GACzBlI,KAAK+E,MAAM+nC,iBAAqC,mBAAI9sC,KAAKqsC,eAMxDrsC,KAAK+E,MAAM+nC,iBAAsC,oBAIlD9sC,KAAKssC,eAAiBtsC,KAAK+E,MAAM+nC,iBAAsC,qBAHvE9sC,KAAK4sC,qBAAqB1kC,GAC1BlI,KAAK+E,MAAM+nC,iBAAsC,oBAAI9sC,KAAKssC,kBAK9DtsC,KAAKysC,oBAAoBvkC,GACzBlI,KAAK4sC,qBAAqB1kC,IAG9BlI,KAAK6sC,qBAAqB3kC,GAC1BlI,KAAKsrC,WAAWtmB,SAAWhlB,KAAKqsC,cAChCrsC,KAAK6qC,YAAY7lB,SAAWhlB,KAAKssC,eACjCtsC,KAAKwsC,WAAWxnB,SAAWhlB,KAAKusC,eAEhCvsC,KAAKmsC,mBAMFzB,EAAAnrC,UAAA0O,QAAP,WACIsD,EAAAhS,UAAM0O,QAAOnQ,KAAAkC,MAEbA,KAAK8qC,kBAEA9qC,KAAK2qC,iBACN3qC,KAAKqsC,cAAcp+B,UACnBjO,KAAKssC,eAAer+B,UACpBjO,KAAKusC,eAAet+B,UAEhBjO,KAAK0sC,uBACL1sC,KAAK+E,MAAM4nC,+BAA+BpnC,OAAOvF,KAAK0sC,sBACtD1sC,KAAK0sC,qBAAuB,QAI5ChC,EA/TA,CAAuCF,EAAA5iB,UAA1B3qB,EAAAytC,mGCZb,IAAA9qC,EAAAnC,EAAA,GAEMsvC,EAAUtvC,EAAQ,IASfR,EAAA8vC,UART,IAAMC,EAAUvvC,EAAQ,IAQNR,EAAA+vC,UANlB/vC,EAAA62B,eAAA,WAEIl0B,EAAAqtC,OAAOC,aAAiC,mBAAIF,EAC5CptC,EAAAqtC,OAAOC,aAAgC,kBAAIH,kBCR/C7vC,EAAAD,QAAA,imDCAAC,EAAAD,QAAA,o6DCCA,IAKAkwC,EAAA,SAAA57B,GASI,SAAA47B,EAAYjlC,EAAYhK,GAAxB,IAAAmH,EACIkM,EAAAzT,KAAAkC,KAAM9B,IAAK8B,YACXqF,EAAK+nC,aAAellC,EAMpB7C,EAAK8hB,sBAAwB,WACpB9hB,EAAK6C,MAGV7C,EAAK6C,KAAKie,QAAQhM,aAAa,MAGnC9U,EAAK+hB,oBAAsB,WAClB/hB,EAAK6C,MAGV7C,EAAK6C,KAAKie,QAAQhM,aAAa,EAAM,MAGzC9U,EAAKiiB,qBAAuB,WACnBjiB,EAAK6C,MAGV7C,EAAK6C,KAAKie,QAAQhM,aAAa,MAGnC9U,EAAKkiB,mBAAqB,WACjBliB,EAAK6C,MAGV7C,EAAK6C,KAAKie,QAAQhM,aAAa,EAAM,QAkBjD,OA5DkCxI,EAAAw7B,EAAA57B,GA8CpB47B,EAAA5tC,UAAAkF,aAAV,WACI,MAAO,gBAID0oC,EAAA5tC,UAAA+S,YAAV,SAAsBvL,GAAtB,IAAA1B,EAAArF,KAII,OAHAA,KAAKotC,aAAaC,iBAAiB9L,QAAQ,SAACr5B,GACxCA,EAAK8e,SAAW3hB,IAEbrF,KAAKotC,cAGND,EAAA5tC,UAAA2nB,gBAAV,SAA0Bhf,KAE9BilC,EA5DA,CALA1vC,EAAA,IAKkCmqB,UAArB3qB,EAAAkwC,mcCNb,IAAAvtC,EAAAnC,EAAA,GACAob,EAAApb,EAAA,GAOA6vC,EAAA,SAAA/7B,GAAA,SAAA+7B,mDA2BA,OA3BgC37B,EAAA27B,EAAA/7B,GAClB+7B,EAAA/tC,UAAAob,aAAV,SAAuB5I,EAAoB63B,GACvC,IAAI1hC,EAAO6J,EAAQ7J,KAEnB,GAAKA,EAAL,CAIA6J,EAAQjL,SAAW8iC,EAAalR,QAChC,IAAIjsB,EAAS7M,EAAAoa,IAAIxS,QAAQ,GAIzB,OAFAiF,EAAOhC,SAASm/B,GAER5pC,KAAK+pC,aACT,KAAKlxB,EAAAvH,YAAYsB,uBACjB,KAAKiG,EAAAvH,YAAYwB,wBACbrG,EAAO8gC,WAAW,IAAIzT,QAAQtyB,QAAQ,EAAG,GAAI,IAC7CU,EAAK8hC,OAAOv9B,GACZ,MACJ,KAAKoM,EAAAvH,YAAYyB,gCACjB,KAAK8F,EAAAvH,YAAYuB,+BACbpG,EAAO8gC,WAAW,IAAIzT,QAAQtyB,QAAQ,EAAG,EAAG,IAC5CU,EAAK8hC,OAAOv9B,MAK5B6gC,EA3BA,CALA7vC,EAAA,GAKgCqb,kBAAnB7b,EAAAqwC,icCRb,IAAA7D,EAAAhsC,EAAA,GACAmC,EAAAnC,EAAA,GAEAob,EAAApb,EAAA,GAKA+vC,EAAA,SAAAj8B,GAAA,SAAAi8B,IAAA,IAAAnoC,EAAA,OAAAkM,KAAAqF,MAAA5W,KAAAkhC,YAAAlhC,YACYqF,EAAAooC,WAAa,MAuGzB,OAxGkC97B,EAAA67B,EAAAj8B,GAM9BlT,OAAAC,eAAWkvC,EAAAjuC,UAAA,iBAAX,WACI,OAAOS,KAAKytC,gBAGhB,SAAqB7uC,GAArB,IAAAyG,EAAArF,KACQA,KAAKytC,aAAe7uC,IAIxBoB,KAAKytC,WAAa7uC,EAElBgB,EAAAmI,MAAMqR,aAAa,WACf/T,EAAKuM,uDAIH47B,EAAAjuC,UAAAob,aAAV,SAAuB5I,EAAoB63B,GACvC,IAAI1hC,EAAO6J,EAAQ7J,KACf2hC,EAAS7pC,KAAK0tC,gBAAgB9D,GAElC,GAAK1hC,EAAL,CAIA,OAAQlI,KAAK+pC,aACT,KAAKlxB,EAAAvH,YAAYsB,uBACjB,KAAKiG,EAAAvH,YAAYwB,wBACb5K,EAAK8hC,OAAO,IAAIpqC,EAAA4H,QAAQ,EAAG,GAAI,IAC/B,MACJ,KAAKqR,EAAAvH,YAAYyB,gCACjB,KAAK8F,EAAAvH,YAAYuB,+BACb3K,EAAK8hC,OAAO,IAAIpqC,EAAA4H,QAAQ,EAAG,EAAG,IAItCuK,EAAQjL,SAAW+iC,IAGf2D,EAAAjuC,UAAAmuC,gBAAR,SAAwB/8B,GAIpB,OAHAA,EAAOjK,GAAK,EAAsB,EAAhBoC,KAAK6kC,UAAkB3tC,KAAKqZ,WAC9C1I,EAAOhK,GAAK,EAAsB,EAAhBmC,KAAK6kC,UAAkB3tC,KAAKsZ,YAEvC3I,GAGD68B,EAAAjuC,UAAAqb,iBAAV,WAEI,IADA,IAAIgzB,KACcn7B,EAAA,EAAAC,EAAA1S,KAAKyR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAA7B,IAAIgB,EAAKf,EAAAD,GACLgB,EAAMvL,MAIX0lC,EAAOplC,KAAKiL,EAAMvL,MAGtB,IAAK,IAAI2lC,EAAQ,EAAGA,EAAQ7tC,KAAKytC,WAAYI,IAAS,CAClDD,EAAOE,KAAK,SAAC7F,EAAGlN,GACZ,IAAIgT,EAAY9F,EAAEnhC,SAASknC,gBACvBC,EAAYlT,EAAEj0B,SAASknC,gBAE3B,OAAID,EAAYE,EACL,EACAF,EAAYE,GACX,EAGL,IAQX,IALA,IAAIC,EAAuBplC,KAAKqlC,IAAInuC,KAAKmZ,OAAQ,GAC7Ci1B,EAAWtlC,KAAKwC,IAAItL,KAAKqZ,WAAYrZ,KAAKsZ,aAC1C+0B,EAAezuC,EAAAoa,IAAIvX,QAAQ,GAC3B6rC,EAAa1uC,EAAAoa,IAAIxS,QAAQ,GAEpB7J,EAAI,EAAGA,EAAIiwC,EAAO78B,OAAS,EAAGpT,IACnC,IAAK,IAAIonC,EAAIpnC,EAAI,EAAGonC,EAAI6I,EAAO78B,OAAQg0B,IACnC,GAAIpnC,GAAKonC,EAAG,CACR6I,EAAO7I,GAAGj+B,SAASoT,cAAc0zB,EAAOjwC,GAAGmJ,SAAUwnC,GAGrDD,EAAa3nC,EAAI4nC,EAAW5nC,EAC5B2nC,EAAa1nC,EAAI2nC,EAAW3nC,EAC5B,IAAI4nC,EAAiBH,EACjBI,EAAWH,EAAaL,gBAAkBE,GAE9CM,GADoB1lC,KAAKsC,IAAIojC,EAAUN,IAGvBplC,KAAKqlC,IAAII,EAAgB,KACrCF,EAAaI,YACbH,EAAWn0B,aAAsD,IAAxCo0B,EAAiBzlC,KAAKoyB,KAAKsT,KACpDZ,EAAO7I,GAAGj+B,SAASymC,WAAWe,GAC9BV,EAAOjwC,GAAGmJ,SAAS4nC,gBAAgBJ,OAO/Dd,EAxGA,CAAkC/D,EAAA3wB,kBAArB7b,EAAAuwC,mcCRb,IAAA/D,EAAAhsC,EAAA,GACAmC,EAAAnC,EAAA,GAEAob,EAAApb,EAAA,GAKAkxC,EAAA,SAAAp9B,GAAA,SAAAo9B,IAAA,IAAAtpC,EAAA,OAAAkM,KAAAqF,MAAA5W,KAAAkhC,YAAAlhC,YACYqF,EAAAskC,QAAU,IAwDtB,OAzDiCh4B,EAAAg9B,EAAAp9B,GAM7BlT,OAAAC,eAAWqwC,EAAApvC,UAAA,cAAX,WACI,OAAOS,KAAK2pC,aAGhB,SAAkB/qC,GAAlB,IAAAyG,EAAArF,KACQA,KAAK2pC,UAAY/qC,IAIrBoB,KAAK2pC,QAAU/qC,EAEfgB,EAAAmI,MAAMqR,aAAa,WACf/T,EAAKuM,uDAIH+8B,EAAApvC,UAAAob,aAAV,SAAuB5I,EAAoB63B,GACvC,IAAI1hC,EAAO6J,EAAQ7J,KAEnB,GAAKA,EAAL,CAIA,IAAI2hC,EAAS7pC,KAAK4uC,kBAAkBhF,GAGpC,OAFA73B,EAAQjL,SAAW+iC,EAEX7pC,KAAK+pC,aACT,KAAKlxB,EAAAvH,YAAYsB,uBACb1K,EAAK8hC,OAAO,IAAIlQ,QAAQtyB,SAASqiC,EAAOnjC,GAAImjC,EAAOljC,GAAIkjC,EAAOhiC,IAC9D,MACJ,KAAKgR,EAAAvH,YAAYuB,+BACb3K,EAAK8hC,OAAO,IAAIlQ,QAAQtyB,QAAQ,EAAIqiC,EAAOnjC,EAAG,EAAImjC,EAAOljC,EAAG,EAAIkjC,EAAOhiC,IACvE,MACJ,KAAKgR,EAAAvH,YAAYwB,wBACb,MACJ,KAAK+F,EAAAvH,YAAYyB,gCACb7K,EAAKyB,OAAOmwB,QAAQmQ,KAAKC,EAAGphC,KAAKgH,GAAIgqB,QAAQqQ,MAAMC,UAKvDuE,EAAApvC,UAAAqvC,kBAAR,SAA0Bj+B,GACtB,IAAIk5B,EAAS,IAAIjqC,EAAA4H,QAAQ,EAAG,EAAGxH,KAAK2pC,SAEhCkF,EAAUl+B,EAAOhK,EAAI3G,KAAK2pC,QAC1BU,GAAW15B,EAAOjK,EAAI1G,KAAK2pC,QAI/B,OAFA/pC,EAAA8H,OAAO4iC,0BAA0BD,EAAQwE,EAAQ,EAAGjvC,EAAAoa,IAAItS,OAAO,IAExD9H,EAAA4H,QAAQ+iC,gBAAgBV,EAAQjqC,EAAAoa,IAAItS,OAAO,KAE1DinC,EAzDA,CAAiClF,EAAA3wB,kBAApB7b,EAAA0xC,kcCRb,IAAA91B,EAAApb,EAAA,GACAmC,EAAAnC,EAAA,GAKAqxC,EAAA,SAAAv9B,GA+BI,SAAAu9B,EAAmBnhB,QAAA,IAAAA,OAAA,GAAnB,IAAAtoB,EACIkM,EAAAzT,KAAAkC,OAAOA,YA/BHqF,EAAA4S,aAAc,EAwBf5S,EAAA8T,OAAS,GASZ9T,EAAK4S,YAAc0V,IAmE3B,OArGkChc,EAAAm9B,EAAAv9B,GAM9BlT,OAAAC,eAAWwwC,EAAAvvC,UAAA,kBAAX,WACI,OAAOS,KAAKiY,iBAGhB,SAAsBrZ,GAAtB,IAAAyG,EAAArF,KACQA,KAAKiY,cAAgBrZ,IAIzBoB,KAAKiY,YAAcrZ,EAEnBgB,EAAAmI,MAAMqR,aAAa,WACf/T,EAAKuM,uDAmBHk9B,EAAAvvC,UAAAqS,iBAAV,WASI,IARA,IAmCIjN,EAnCAO,EAAQ,EACRC,EAAS,EACTsU,EAAe,EACfs1B,KAEAr1B,EAAsB9Z,EAAA8H,OAAOiS,OAAO3Z,KAAKoS,KAAMwH,oBAAmB,IAGpDnH,EAAA,EAAAC,EAAA1S,KAAKyR,UAALgB,EAAAC,EAAA3B,OAAA0B,IAAgB,CAC9B,IADKgB,EAAKf,EAAAD,IACCvK,KAAX,CAIAuR,IACAhG,EAAMvL,KAAK0R,oBAAmB,GAC9BnG,EAAMvL,KAAKua,iBAAiB6I,cAAc5R,EAAqB9Z,EAAAoa,IAAItS,OAAO,IAE1E,IAAImS,EAAcpG,EAAMvL,KAAKoa,kBAAkBzI,YAC3CE,EAAana,EAAA4H,QAAQ+iC,gBAAgB1wB,EAAYE,WAAYna,EAAAoa,IAAItS,OAAO,IAC5EqnC,EAAYvmC,KAAKuR,GAEb/Z,KAAKiY,YACL9S,GAAU4U,EAAWpT,EAErBzB,GAAS6U,EAAWrT,GAIxB1G,KAAKiY,YACL9S,IAAWsU,EAAe,GAAKzZ,KAAKmZ,OAAS,EAE7CjU,IAAUuU,EAAe,GAAKzZ,KAAKmZ,OAAS,EAM5CxU,EADA3E,KAAKiY,aACK9S,GAEAD,EAId,IADA,IAAIiD,EAAQ,EACMoO,EAAA,EAAAmE,EAAA1a,KAAKyR,UAAL8E,EAAAmE,EAAA3J,OAAAwF,IAAgB,CAA7B,IAAI9C,EACL,IADKA,EAAKiH,EAAAnE,IACCrO,KAAX,CAGAuR,IACIM,EAAag1B,EAAY5mC,KAEzBnI,KAAKiY,aACLxE,EAAM3M,SAASH,EAAIhC,EAASoV,EAAWpT,EACvC8M,EAAM3M,SAASJ,EAAI,EACnB/B,GAAyB,EAAfoV,EAAWpT,IAErB8M,EAAM3M,SAASJ,EAAI/B,EAASoV,EAAWrT,EACvC+M,EAAM3M,SAASH,EAAI,EACnBhC,GAAyB,EAAfoV,EAAWrT,GAGzB/B,GAAW8U,EAAe,EAAIzZ,KAAKmZ,OAAS,KAGxD21B,EArGA,CAAkCj2B,EAAAvH,aAArBrU,EAAA6xC,0JCNbj0B,CAAApd,EAAA,oFCAA,IAAAmC,EAAAnC,EAAA,GACAob,EAAApb,EAAA,GAOAuxC,EAAA,WAqCI,SAAAA,EAAmBjoC,GAAnB,IAAA1B,EAAArF,KA3BOA,KAAAuN,oBAEAvN,KAAAyN,oBAKAzN,KAAA2sC,+BAAiC,IAAI/sC,EAAAqE,WAIrCjE,KAAA8sC,oBAiBH9sC,KAAKurC,OAASxkC,GAASnH,EAAAwe,OAAO6wB,iBAC9BjvC,KAAKkvC,sBAAwBlvC,KAAKurC,OAAO4D,oBAAoB1pC,IAAI,WAC7DJ,EAAK6pC,sBAAwB,KAC7B7pC,EAAK+pC,cAAgB,KACrB/pC,EAAK4I,YAGTjO,KAAKovC,cAAgB,IAAIxvC,EAAAyvC,qBAAqBrvC,KAAKurC,QACnDvrC,KAAKovC,cAAcE,4BAA6B,EAChDtvC,KAAKovC,cAAcG,0BAA4B,SAACrnC,GAC5C,OAAOA,GAAQA,EAAK8e,UAAY9e,EAAK8e,SAASd,OAIlDlmB,KAAKgH,eAAiB,IAAI6R,EAAAvH,YAAY,iBACtCtR,KAAKgH,eAAejC,MAAQ/E,KAC5B,IAAImS,EAAoBnS,KAAKovC,cAAcj9B,kBAG3CnS,KAAKwvC,oBAAsBxvC,KAAKovC,cAAclrC,uBAAuBuB,IAAI,SAAC2G,GACtE/G,EAAKoqC,kBAAkBrjC,GAAW,KAGtCpM,KAAKohB,iBAAmBjP,EAAkBkP,oBAAoB5b,IAAI,SAAC4d,EAAIC,GACnEje,EAAK2d,WAAWK,KAIpBrjB,KAAKovC,cAAcj9B,kBAAkBu9B,WAAY,EACjD1vC,KAAKovC,cAAcj9B,kBAAkBw9B,0BAA2B,EAChE,IAAI/vC,EAAAgwC,iBAAiB,OAAQhwC,EAAA4H,QAAQqoC,KAAM7vC,KAAKovC,cAAcj9B,mBAgJtE,OA5LI9T,OAAAC,eAAW0wC,EAAAzvC,UAAA,aAAX,WACI,OAAOS,KAAKurC,wCAIhBltC,OAAAC,eAAW0wC,EAAAzvC,UAAA,oBAAX,WACI,OAAOS,KAAKovC,+CAyCRJ,EAAAzvC,UAAAkwC,kBAAR,SAA0BrjC,EAAmB0jC,GACzC,IAAIxiC,EAAsBtN,KAAKuN,iBAAiBnB,GAC5CkB,IACAA,EAAoBV,cAAcU,UAC3BtN,KAAKuN,iBAAiBnB,IAG7B0jC,GACI9vC,KAAKyN,iBAAiBrB,KACtBpM,KAAKyN,iBAAiBrB,GAAWob,wBAC1BxnB,KAAKyN,iBAAiBrB,IAIrCpM,KAAK2sC,+BAA+B5hC,gBAAgB,OAGhDikC,EAAAzvC,UAAAyjB,WAAR,SAAmBK,GACf,IAAKrjB,KAAKovC,gBAAkBpvC,KAAKovC,cAAcj9B,kBAAkBsR,aAC7D,OAAO,EAGX,IAAImB,EAA8BvB,EAAQ,MAEtCjX,EAAYwY,EAAaxY,WAAa,EACtCC,EAAcuY,EAAad,OAE3BisB,EAAc1sB,EAAGa,SACrB,IAAK6rB,IAAgBA,EAAY5rB,IAE7B,OADAnkB,KAAKyvC,kBAAkBrjC,EAAWiX,EAAGlX,OAASvM,EAAAwN,kBAAkBO,YACzD,EAGX,IAAIoE,EAAsBg+B,EAAY3rB,WAAoB,SA2B1D,OA1BI2rB,EAAYtoB,aACZznB,KAAK2sC,+BAA+B5hC,gBAAgBglC,EAAYtoB,aAG/D1V,EAAQxF,oBAAoB8W,EAAGlX,KAAM4jC,EAAYtoB,YAAcrb,EAAWC,IAEvEgX,EAAGlX,OAASvM,EAAAwN,kBAAkBC,cAC1BrN,KAAKuN,iBAAiBnB,IACtBpM,KAAKuN,iBAAiBnB,GAAWQ,cAAc5M,KAAKuN,iBAAiBnB,WAGlEpM,KAAKuN,iBAAiBnB,IAIjCiX,EAAGlX,OAASvM,EAAAwN,kBAAkBO,YAC1B3N,KAAKyN,iBAAiBmX,EAAaxY,aACnCpM,KAAKyN,iBAAiBmX,EAAaxY,WAAWob,wBACvCxnB,KAAKyN,iBAAiBmX,EAAaxY,YAGb,UAA7BwY,EAAaorB,aACbhwC,KAAKyvC,kBAAkBrjC,GAAW,KAInC,GAMX/N,OAAAC,eAAW0wC,EAAAzvC,UAAA,qBAAX,WACI,OAAOS,KAAKgH,gDAQTgoC,EAAAzvC,UAAAuS,gBAAP,SAAuBC,GACnB,OAAO/R,KAAKgH,eAAe8K,gBAAgBC,IAQxCi9B,EAAAzvC,UAAAyS,WAAP,SAAkBD,GAEd,OADA/R,KAAKgH,eAAegL,WAAWD,GACxB/R,MAQJgvC,EAAAzvC,UAAA4O,cAAP,SAAqB4D,GAEjB,OADA/R,KAAKgH,eAAemH,cAAc4D,GAC3B/R,MAMJgvC,EAAAzvC,UAAA0O,QAAP,WAGI,IAAK,IAAIgiC,KAFTjwC,KAAKgH,eAAeiH,UAEKjO,KAAK8sC,iBACrB9sC,KAAK8sC,iBAAiBttC,eAAeywC,IAI1CjwC,KAAK8sC,iBAAiBmD,GAAchiC,UAGxCjO,KAAK8sC,oBAED9sC,KAAKwvC,qBAAuBxvC,KAAKovC,gBACjCpvC,KAAKovC,cAAclrC,uBAAuBqB,OAAOvF,KAAKwvC,qBACtDxvC,KAAKwvC,oBAAsB,MAG/BxvC,KAAK2sC,+BAA+Bz+B,QAEpC,IAAIiE,EAAoBnS,KAAKovC,cAAgBpvC,KAAKovC,cAAcj9B,kBAAoB,KAEhFA,GACInS,KAAKohB,mBACLjP,EAAkBkP,oBAAoB9b,OAAOvF,KAAKohB,kBAClDphB,KAAKohB,iBAAmB,MAG5BphB,KAAKurC,QACDvrC,KAAKkvC,wBACLlvC,KAAKurC,OAAO4D,oBAAoB5pC,OAAOvF,KAAKkvC,uBAC5ClvC,KAAKkvC,sBAAwB,MAIjClvC,KAAKovC,eACLpvC,KAAKovC,cAAcnhC,WAG/B+gC,EApNA,GAAa/xC,EAAA+xC","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the horizontal alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the vertical alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control width \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control height \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if(this._isEnabled === value){\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if(this._disabledColor === value){\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public IsAscendant(container: Container): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.IsAscendant(container);\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in parent local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(): void {\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        this._clip(context);\r\n        context.clip();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerEnter(target);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if(!this._isEnabled){\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if(!this._isEnabled){\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index > -1) {\r\n            this.linkWithMesh(null);\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}  ","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added \r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        super._markMatrixAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(root, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            this._clipForChildren(context);\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}   ","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) maxLineWidth = line.width;\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets panel width */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets panel height */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}  ","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate \r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}   ","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default). \r\n     * The panel will automatically compute the number of rows based on number of child controls. \r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested. \r\n     * The panel will automatically compute the number of columns based on number of child controls. \r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./selector\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./slider\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./displayGrid\";\r\n\r\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n    \r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}    ","import { Control } from \"./control\";\r\nimport { Nullable, Tools } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        }\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell width to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell height to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to let the current focused control keeps the focus\r\n     * @param pointerId defines the unique id of the current pointer\r\n     * @returns a boolean indicating if the control wants to keep the focus\r\n     */\r\n    keepFocus(pointerId: number): boolean;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add(info => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n\r\n        this.executeOnAllControls((control) => {\r\n            if (control._isFontSizeInPercentage) {\r\n                control._resetFontCache();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n            \r\n            // Avoid overwriting a true skipOnPointerObservable to false \r\n            if(this._shouldBlockPointer){\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    if (!this.focusedControl.keepFocus(pointerId)) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;    \r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;   \r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n}    ","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1) \r\n     * @param m10 defines value for (1, 0) \r\n     * @param m11 defines value for (1, 1) \r\n     * @param m20 defines value for (2, 0) \r\n     * @param m21 defines value for (2, 1) \r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix \r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform \r\n     * @param result defines the target vector2 \r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation \r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling \r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix \r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation \r\n     * @param angle defines the rotation angle \r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling \r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix \r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}   ","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _text = \"\";\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n\r\n    /** @hidden */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    public promptMessage = \"Please enter text:\";\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        if(!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\r\n            let value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /**\r\n     * Function called to let the current focused control keeps the focus\r\n     * @param pointerId defines the unique id of the current pointer\r\n     * @returns a boolean indicating if the control wants to keep the focus\r\n     */\r\n    public keepFocus(pointerId: number): boolean {\r\n        if (!this._connectedVirtualKeyboard) {\r\n            return false;\r\n        }\r\n\r\n        // Same host, no need to keep the focus\r\n        if (this._host === this._connectedVirtualKeyboard._host) {\r\n            return false;\r\n        }\r\n\r\n        // Different hosts\r\n        const otherHost = this._connectedVirtualKeyboard._host;\r\n\r\n        if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].IsAscendant(this._connectedVirtualKeyboard)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKey(keyCode: number, key?: string) {\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._text && this._text.length > 0) {\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._text.substr(0, this._text.length - 1);\r\n                    } else {\r\n                        let deletePosition = this._text.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._text && this._text.length > 0) {\r\n                    let deletePosition = this._text.length - this._cursorOffset;\r\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\r\n                    this._cursorOffset--;\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._text.length;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._text.length) {\r\n                    this._cursorOffset = this._text.length;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                this.deadKey = true;\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key &&\r\n            ((keyCode === -1) ||                     // Direct access\r\n                (keyCode === 32) ||                     // Space\r\n                (keyCode > 47 && keyCode < 58) ||       // Numbers\r\n                (keyCode > 64 && keyCode < 91) ||       // Letters\r\n                (keyCode > 185 && keyCode < 193) ||     // Special characters\r\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\r\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    let insertPosition = this._text.length - this._cursorOffset;\r\n\r\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKeyboard(evt: KeyboardEvent): void {\r\n        this.processKey(evt.keyCode, evt.key);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Background\r\n            if (this._isFocused) {\r\n                if (this._focusedBackground) {\r\n                    context.fillStyle = this._isEnabled ?  this._focusedBackground : this._disabledColor;\r\n\r\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            } else if (this._background) {\r\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (!this._fontOffset) {\r\n                this._fontOffset = Control._GetFontOffset(context.font);\r\n            }\r\n\r\n            // Text\r\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\r\n            if (this.color) {\r\n                context.fillStyle = this.color;\r\n            }\r\n\r\n            let text = this._beforeRenderText(this._text);\r\n\r\n            if (!this._isFocused && !this._text && this._placeholderText) {\r\n                text = this._placeholderText;\r\n\r\n                if (this._placeholderColor) {\r\n                    context.fillStyle = this._placeholderColor;\r\n                }\r\n            }\r\n\r\n            this._textWidth = context.measureText(text).width;\r\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n            if (this._autoStretchWidth) {\r\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            }\r\n\r\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n            context.clip();\r\n\r\n            if (this._isFocused && this._textWidth > availableWidth) {\r\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n                if (!this._scrollLeft) {\r\n                    this._scrollLeft = textLeft;\r\n                }\r\n            } else {\r\n                this._scrollLeft = clipTextLeft;\r\n            }\r\n\r\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n            // Cursor\r\n            if (this._isFocused) {\r\n\r\n                // Need to move cursor\r\n                if (this._clickedCoordinate) {\r\n                    var rightPosition = this._scrollLeft + this._textWidth;\r\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                    var currentSize = 0;\r\n                    this._cursorOffset = 0;\r\n                    var previousDist = 0;\r\n                    do {\r\n                        if (this._cursorOffset) {\r\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                        }\r\n                        this._cursorOffset++;\r\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n\r\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                        this._cursorOffset--;\r\n                    }\r\n\r\n                    this._blinkIsEven = false;\r\n                    this._clickedCoordinate = null;\r\n                }\r\n\r\n                // Render cursor\r\n                if (!this._blinkIsEven) {\r\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\r\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                    if (cursorLeft < clipTextLeft) {\r\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\r\n                        cursorLeft = clipTextLeft;\r\n                        this._markAsDirty();\r\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\r\n                        cursorLeft = clipTextLeft + availableWidth;\r\n                        this._markAsDirty();\r\n                    }\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n\r\n                clearTimeout(this._blinkTimeout);\r\n                this._blinkTimeout = <any>setTimeout(() => {\r\n                    this._blinkIsEven = !this._blinkIsEven;\r\n                    this._markAsDirty();\r\n                }, 500);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            // Border\r\n            if (this._thickness) {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n                context.lineWidth = this._thickness;\r\n\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if(!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(text: string): string {\r\n        return text;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends Control {\r\n    private _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbCircle = false;\r\n    private _isThumbClamped = false;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getThumbThickness(type: string, backgroundLength: number): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Main bar\r\n            var effectiveBarOffset = 0;\r\n            var type = this.isThumbCircle ? \"circle\" : \"rectangle\";\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n            var width = this._currentMeasure.width;\r\n            var height = this._currentMeasure.height;\r\n\r\n            var backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n            var backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            var effectiveThumbThickness = this._getThumbThickness(type, backgroundBoxThickness);\r\n            backgroundBoxLength -= effectiveThumbThickness;\r\n\r\n            var radius = 0;\r\n\r\n\r\n            //throw error when height is less than width for vertical slider\r\n            if ((this._isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n                console.error(\"Height should be greater than width\");\r\n                return;\r\n            }\r\n            if (this._barOffset.isPixel) {\r\n                effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), backgroundBoxThickness);\r\n            }\r\n            else {\r\n                effectiveBarOffset = backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n            }\r\n\r\n            backgroundBoxThickness -= (effectiveBarOffset * 2);\r\n\r\n            if (this._isVertical) {\r\n                left += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    top += (effectiveThumbThickness / 2);\r\n                }\r\n\r\n                height = backgroundBoxLength;\r\n                width = backgroundBoxThickness;\r\n\r\n            }\r\n            else {\r\n                top += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    left += (effectiveThumbThickness / 2);\r\n                }\r\n                height = backgroundBoxThickness;\r\n                width = backgroundBoxLength;\r\n            }\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this._isVertical)\r\n                    top += (effectiveThumbThickness / 2);\r\n                else\r\n                    left += (effectiveThumbThickness / 2);\r\n\r\n                radius = backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (effectiveThumbThickness - effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            var thumbPosition = (this._isVertical) ? ((this._maximum - this._value) / (this._maximum - this._minimum)) * backgroundBoxLength : ((this._value - this._minimum) / (this._maximum - this._minimum)) * backgroundBoxLength;\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxLength, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top + backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, this._currentMeasure.height - thumbPosition);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this._isVertical) {\r\n                    context.arc(left + backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this._isVertical) {\r\n                    context.fillRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this._isVertical) {\r\n                    context.strokeRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style \r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}    ","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;    \r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect      \r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices        \r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture)\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n * \r\n * This is the entry point for the UMD module. \r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}  ","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}   ","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end)\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add \r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map(item => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add \r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) return point;\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach(point => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) this._minX = point._point.x;\r\n            if (this._minY == null || point._point.y < this._minY) this._minY = point._point.y;\r\n            if (this._maxX == null || point._point.x > this._maxX) this._maxX = point._point.x;\r\n            if (this._maxY == null || point._point.y > this._maxY) this._maxY = point._point.y;\r\n        });\r\n\r\n        if (this._minX == null) this._minX = 0;\r\n        if (this._minY == null) this._minY = 0;\r\n        if (this._maxX == null) this._maxX = 0;\r\n        if (this._maxY == null) this._maxY = 0;\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}    \r\n","import {Rectangle} from \"./rectangle\";\r\nimport {StackPanel} from \"./stackPanel\";\r\nimport {Control} from \"./control\";\r\nimport {TextBlock} from \"./textBlock\";\r\nimport {Checkbox} from \"./checkbox\";\r\nimport {RadioButton} from \"./radioButton\";\r\nimport {Slider} from \"./slider\";\r\n\r\n/** Class used to create a RadioGroup \r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string, ) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if(this._groupHeader.text === \"label\") {\r\n            return\r\n        }\r\n\r\n        this._groupHeader.text = label\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if(selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n     /** Removes the selector at the given position \r\n     * @param selectorNb the position of the selector within the group\r\n    */\r\n    public removeSelector(selectorNb: number) {\r\n        if(selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup \r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup{\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean)=>{}, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\"; \r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    \r\n        button.onIsCheckedChangedObservable.add(function(state) {\t\t\t\t\r\n            func(state);\t\r\n        }); \r\n    \r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n    \r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        } \r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup \r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup{\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n:number) => {} , checked = false): void {\t\t\t\t\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\"; \r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if(state) {\r\n                func(nb);\r\n            }\r\n        });\r\n        \r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n        \r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        } \r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup \r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup{\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v:number) => {}, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v:number)=>{return v | 0}): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\t\t\t\t\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n        \r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        \r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders */\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\"; \r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string, \r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 4;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if(groups.length > 0) {\r\n            for(var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\t\t\t\t\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n    \r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if(this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if(this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if(this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if(this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n       if(this._barColor === color) {\r\n           return;\r\n       }\r\n       \r\n       this._barColor = color;\r\n       this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for(var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Rectangle();\r\n        separator.width = 1;\r\n        separator.height = \"5px\";\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        separator.background = this._barColor;\r\n        separator.color = \"transparent\";\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if(this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for(var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if(groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n\r\n    /** Change selector label to the one given \r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */ \r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if(selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if(selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => {} , checked: boolean = false): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => {} , checked: boolean = false): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => {}, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v:number)=>{return v | 0}): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n    \r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n}\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     * \r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some(a => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n    \r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n        \r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     * \r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter(a => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n                \r\n                this._connectedInputTexts = this._connectedInputTexts.filter(a => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText)\r\n            });\r\n            this._connectedInputTexts = []\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n        \r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines    \r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;    \r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    \r\n                    context.stroke();                \r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;        \r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();    \r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}    ","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n}","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver:Nullable<Observer<Control3D>>\r\n    private _tooltipOutObserver:Nullable<Observer<Control3D>>\r\n\r\n    private _disposeTooltip(){\r\n        this._tooltipFade = null;\r\n        if(this._tooltipTextBlock){\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if(this._tooltipTexture){\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if(this._tooltipMesh){\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text:Nullable<string>){\r\n        if(!text){\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if(!this._tooltipFade){\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene)\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene)\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\")\r\n            tooltipBackground.material = mat\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground)\r\n            tooltipBackground.position.z = 0.05\r\n            this._tooltipMesh.scaling.y = 1/3\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh)\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(()=>{\r\n                if(this._tooltipFade){\r\n                    this._tooltipFade.fadeIn(true)\r\n                }\r\n            })\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(()=>{\r\n                if(this._tooltipFade){\r\n                    this._tooltipFade.fadeIn(false)\r\n                }\r\n            })\r\n        }\r\n        if(this._tooltipTextBlock){\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText(){\r\n        if(this._tooltipTextBlock){\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(pickedPoint => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical \r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0)\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene \r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        })\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        }\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}