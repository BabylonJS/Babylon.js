{"version":3,"sources":["webpack://BABYLON.GUI/webpack/universalModuleDefinition","webpack://BABYLON.GUI/webpack/bootstrap","webpack://BABYLON.GUI/external {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://BABYLON.GUI/./src/2D/controls/control.ts","webpack://BABYLON.GUI/./src/2D/valueAndUnit.ts","webpack://BABYLON.GUI/./src/3D/controls/container3D.ts","webpack://BABYLON.GUI/./src/2D/controls/container.ts","webpack://BABYLON.GUI/./src/2D/controls/textBlock.ts","webpack://BABYLON.GUI/./src/2D/controls/stackPanel.ts","webpack://BABYLON.GUI/./src/2D/measure.ts","webpack://BABYLON.GUI/./src/3D/controls/volumeBasedPanel.ts","webpack://BABYLON.GUI/./src/2D/controls/index.ts","webpack://BABYLON.GUI/./src/2D/controls/rectangle.ts","webpack://BABYLON.GUI/./src/2D/controls/image.ts","webpack://BABYLON.GUI/./src/2D/advancedDynamicTexture.ts","webpack://BABYLON.GUI/./src/3D/controls/control3D.ts","webpack://BABYLON.GUI/./src/3D/controls/button3D.ts","webpack://BABYLON.GUI/./src/index.ts","webpack://BABYLON.GUI/./src/2D/controls/button.ts","webpack://BABYLON.GUI/./src/2D/math2D.ts","webpack://BABYLON.GUI/./src/2D/controls/checkbox.ts","webpack://BABYLON.GUI/./src/2D/controls/inputText.ts","webpack://BABYLON.GUI/./src/2D/multiLinePoint.ts","webpack://BABYLON.GUI/./src/2D/controls/radioButton.ts","webpack://BABYLON.GUI/./src/2D/controls/slider.ts","webpack://BABYLON.GUI/./src/2D/style.ts","webpack://BABYLON.GUI/./src/3D/controls/abstractButton3D.ts","webpack://BABYLON.GUI/./src/3D/vector3WithInfo.ts","webpack://BABYLON.GUI/./src/3D/materials/fluentMaterial.ts","webpack://BABYLON.GUI/./src/legacy.ts","webpack://BABYLON.GUI/../Tools/gulp/node_modules/webpack/buildin/global.js","webpack://BABYLON.GUI/./src/2D/index.ts","webpack://BABYLON.GUI/./src/2D/controls/colorpicker.ts","webpack://BABYLON.GUI/./src/2D/controls/ellipse.ts","webpack://BABYLON.GUI/./src/2D/controls/grid.ts","webpack://BABYLON.GUI/./src/2D/controls/inputPassword.ts","webpack://BABYLON.GUI/./src/2D/controls/line.ts","webpack://BABYLON.GUI/./src/2D/controls/multiLine.ts","webpack://BABYLON.GUI/./src/2D/controls/selector.ts","webpack://BABYLON.GUI/./src/2D/controls/virtualKeyboard.ts","webpack://BABYLON.GUI/./src/2D/controls/displayGrid.ts","webpack://BABYLON.GUI/./src/2D/controls/statics.ts","webpack://BABYLON.GUI/./src/3D/index.ts","webpack://BABYLON.GUI/./src/3D/controls/index.ts","webpack://BABYLON.GUI/./src/3D/controls/cylinderPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/holographicButton.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.ts","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.fragment.fx","webpack://BABYLON.GUI/./src/3D/materials/shaders/fluent.vertex.fx","webpack://BABYLON.GUI/./src/3D/controls/meshButton3D.ts","webpack://BABYLON.GUI/./src/3D/controls/planePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/scatterPanel.ts","webpack://BABYLON.GUI/./src/3D/controls/spherePanel.ts","webpack://BABYLON.GUI/./src/3D/controls/stackPanel3D.ts","webpack://BABYLON.GUI/./src/3D/materials/index.ts","webpack://BABYLON.GUI/./src/3D/gui3DManager.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","valueAndUnit_1","babylonjs_1","measure_1","math2D_1","Control","this","_alpha","_alphaSet","_zIndex","_currentMeasure","Measure","Empty","_fontFamily","_fontStyle","_fontWeight","_fontSize","ValueAndUnit","UNITMODE_PIXEL","_width","UNITMODE_PERCENTAGE","_height","_color","_style","_horizontalAlignment","HORIZONTAL_ALIGNMENT_CENTER","_verticalAlignment","VERTICAL_ALIGNMENT_CENTER","_isDirty","_tempParentMeasure","_cachedParentMeasure","_paddingLeft","_paddingRight","_paddingTop","_paddingBottom","_left","_top","_scaleX","_scaleY","_rotation","_transformCenterX","_transformCenterY","_transformMatrix","Matrix2D","Identity","_invertTransformMatrix","_transformedPosition","Vector2","Zero","_onlyMeasureMode","_isMatrixDirty","_isVisible","_fontSet","_dummyVector2","_downCount","_enterCount","_doNotRender","_downPointerIds","_isEnabled","_disabledColor","isHitTestVisible","isPointerBlocker","isFocusInvisible","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","hoverCursor","_linkOffsetX","_linkOffsetY","onPointerMoveObservable","Observable","onPointerOutObservable","onPointerDownObservable","onPointerUpObservable","onPointerClickObservable","onPointerEnterObservable","onDirtyObservable","onAfterDrawObservable","_getTypeName","_fontOffset","offset","_markAsDirty","_markMatrixAsDirty","toString","_host","fromString","getValueInPixel","width","height","_resetFontCache","_this","onChangedObservable","remove","_styleObserver","add","isPercentage","fontSizeToUse","isPixel","getValue","zIndex","_root","_reOrderControl","_linkedMesh","left","top","isAscendant","container","parent","getLocalCoordinates","globalCoordinates","result","getLocalCoordinatesToRef","x","y","getParentLocalCoordinates","moveToVector3","position","scene","_rootContainer","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","verticalAlignment","VERTICAL_ALIGNMENT_TOP","globalViewport","_getGlobalViewport","projectedPosition","Vector3","Project","Matrix","getTransformMatrix","_moveToProjectedPosition","z","notRenderable","Tools","Error","linkWithMesh","mesh","index","_linkedControls","indexOf","splice","push","oldLeft","oldTop","newLeft","newTop","ignoreAdaptiveScaling","Math","abs","force","markAsDirty","_markAllAsDirty","_font","_prepareFont","_link","host","_transform","context","offsetX","offsetY","translate","rotate","scale","_cachedOffsetX","_cachedOffsetY","ComposeToRef","invertToRef","_applyStates","_isFontSizeInPercentage","font","fillStyle","globalAlpha","alpha","_processMeasures","parentMeasure","isEqualsTo","copyFrom","_preMeasure","_measure","_computeAlignment","_additionalProcessing","hasObservers","notifyObservers","_clip","clip","beginPath","leftShadowOffset","min","rightShadowOffset","max","topShadowOffset","bottomShadowOffset","rect","parentWidth","parentHeight","HORIZONTAL_ALIGNMENT_RIGHT","VERTICAL_ALIGNMENT_BOTTOM","_draw","contains","transformCoordinates","_shouldBlockPointer","_processPicking","type","pointerId","buttonIndex","isVisible","_processObservables","_onPointerMove","target","coordinates","_onPointerEnter","_onPointerOut","_onPointerDown","Vector2WithInfo","_onPointerUp","notifyClick","canNotifyClick","_forcePointerUp","copyFromFloats","PointerEventTypes","POINTERMOVE","previousControlOver","_lastControlOver","POINTERDOWN","_lastControlDown","_lastPickedControl","POINTERUP","fontStyle","fontWeight","fontSizeInPixels","fontFamily","_GetFontOffset","dispose","clear","removeControl","_HORIZONTAL_ALIGNMENT_LEFT","_HORIZONTAL_ALIGNMENT_RIGHT","_HORIZONTAL_ALIGNMENT_CENTER","_VERTICAL_ALIGNMENT_TOP","_VERTICAL_ALIGNMENT_BOTTOM","_VERTICAL_ALIGNMENT_CENTER","_FontHeightSizes","text","document","createElement","innerHTML","style","block","display","verticalAlign","div","appendChild","body","fontAscent","fontHeight","getBoundingClientRect","removeChild","ascent","descent","drawEllipse","arc","PI","closePath","AddHeader","unit","negativeValueAllowed","_value","refValue","idealWidth","getSize","idealHeight","useSmallestIdeal","innerWidth","innerHeight","source","match","_Regex","exec","length","sourceValue","parseFloat","sourceUnit","_UNITMODE_PERCENTAGE","_UNITMODE_PIXEL","control3D_1","Container3D","_super","_blockLayout","_children","Array","__extends","_arrangeChildren","updateLayout","containsControl","control","addControl","utilityLayer","_prepareNode","utilityLayerScene","node","blockLayout","_createNode","TransformNode","_disposeNode","_i","_a","UNSET_ORIENTATION","FACEORIGIN_ORIENTATION","FACEORIGINREVERSED_ORIENTATION","FACEFORWARD_ORIENTATION","FACEFORWARDREVERSED_ORIENTATION","Control3D","control_1","Container","_measureForChildren","_adaptWidthToChildren","_adaptHeightToChildren","_background","getChildByName","children","child","getChildByType","typeName","clearControls","children_1","slice","_cleanControlAfterRemoval","_localDraw","fillRect","save","_clipForChildren","computedWidth","computedHeight","adaptWidthToChildren","adaptHeightToChildren","restore","_changeCursor","TextWrapping","TextBlock","_text","_textWrapping","Clip","_textHorizontalAlignment","_textVerticalAlignment","_resizeToFit","_lineSpacing","_outlineWidth","_outlineColor","onTextChangedObservable","onLinesReadyObservable","_lines","_drawText","textWidth","outlineWidth","strokeText","fillText","_renderLines","lineWidth","strokeStyle","outlineColor","_breakLines","refWidth","lines","split","Ellipsis","WordWrap","_b","_lines_3","_line","_parseLine","_lines_2","apply","_parseLineWordWrap","_lines_1","_parseLineEllipsis","line","measureText","words","testLine","testWidth","rootY","maxLineWidth","internalValue","paddingLeftInPixels","paddingRightInPixels","paddingTopInPixels","paddingBottomInPixels","computeExpectedHeight","widthInPixels","getContext","container_1","StackPanel","_isVertical","_manualWidth","_manualHeight","_doNotTrackManualChanges","_tempMeasureStore","stackWidth","stackHeight","panelWidthChanged","panelHeightChanged","previousHeight","previousWidth","other","container3D_1","VolumeBasedPanel","_columns","_rows","_rowThenColum","_orientation","margin","SetImmediate","_cellWidth","_cellHeight","rows","columns","controlCount","currentInverseWorld","Invert","computeWorldMatrix","boundingBox","getHierarchyBoundingVectors","extendSize","Tmp","diff","subtractToRef","scaleInPlace","TransformNormalToRef","ceil","startOffsetX","startOffsetY","nodeGrid","cellCounter","_c","_mapGridNode","_finalProcessing","__export","Rectangle","_thickness","_cornerRadius","_drawRoundedRect","fill","color","stroke","strokeRect","radius","moveTo","lineTo","quadraticCurveTo","Image","url","_loaded","_stretch","STRETCH_FILL","_autoScale","_sourceLeft","_sourceTop","_sourceWidth","_sourceHeight","_cellId","synchronizeSizeWithContent","_domImage","_onImageLoaded","onload","_imageWidth","_imageHeight","_source","SetCorsBehavior","src","cellId","rowCount","naturalWidth","cellWidth","column","row","cellHeight","STRETCH_NONE","drawImage","STRETCH_UNIFORM","hRatio","vRatio","ratio","centerX","centerY","STRETCH_EXTEND","style_1","AdvancedDynamicTexture","generateMipMaps","samplingMode","Texture","NEAREST_SAMPLINGMODE","Engine","TEXTUREFORMAT_RGBA","_capturingControl","_isFullscreen","_fullscreenViewport","Viewport","_idealWidth","_idealHeight","_useSmallestIdeal","_renderAtIdealSize","_blockNextFocusCheck","_renderScale","premulAlpha","getScene","_texture","_rootCanvas","getEngine","getRenderingCanvas","_renderObserver","onBeforeCameraRenderObservable","camera","_checkUpdate","_preKeyboardObserver","onPreKeyboardObservable","info","_focusedControl","KeyboardEventTypes","KEYDOWN","processKeyboard","event","skipOnPointerObservable","hasAlpha","_resizeObserver","onResizeObservable","_onResize","isReady","_layerToDispose","onBlur","onFocus","layer","isBackground","executeOnAllControls","func","createStyle","Style","_pointerMoveObserver","onPrePointerObservable","_pointerObserver","onPointerObservable","_canvasPointerOutObserver","onCanvasPointerOutObservable","texture","engine","textureSize","renderWidth","getRenderWidth","renderHeight","getRenderHeight","scaleTo","toGlobal","getProjectedPosition","worldMatrix","renderScale","layerMask","isDisposed","getBoundingInfo","boundingSphere","center","getWorldMatrix","isDirty","_render","update","clearRect","measure","cursor","_doPicking","_manageFocus","_cleanControlAfterRemovalFromList","list","attach","pi","state","isPointerCaptured","cameraToUseForPointers","activeCamera","viewport","pointerX","getHardwareScalingLevel","pointerY","button","_attachToOnPointerOut","attachToMesh","supportPointerMove","pickInfo","hit","pickedMesh","uv","getTextureCoordinates","size","focusedControl","friendlyControls","keepsFocusWith","canMoveFocus","friendlyControls_1","otherHost","enablePointerMoveEvents","moveFocusToControl","pointerEvent","CreateForMesh","onlyAlphaTesting","TRILINEAR_SAMPLINGMODE","material","StandardMaterial","backFaceCulling","diffuseColor","Color3","Black","specularColor","diffuseTexture","emissiveTexture","opacityTexture","CreateFullscreenUI","foreground","sampling","BILINEAR_SAMPLINGMODE","Layer","DynamicTexture","vector3WithInfo_1","_behaviors","_node","scaling","addBehavior","behavior","init","isLoading","onDataLoadedObservable","addOnce","removeBehavior","detach","getBehaviorByName","setEnabled","AbstractMesh","linkToTransformNode","metadata","isPickable","_affectMaterial","pointerEnterAnimation","pointerOutAnimation","Vector3WithInfo","pointerDownAnimation","pointerUpAnimation","forcePointerUp","pickedPoint","abstractButton3D_1","advancedDynamicTexture_1","Button3D","_contentResolution","_contentScaleRatio","_currentMaterial","emissiveColor","Red","_resetContent","_disposeFacadeTexture","_facadeTexture","content","_content","rootContainer","scaleX","scaleY","_applyFacade","facadeTexture","faceUV","Vector4","MeshBuilder","CreateBox","depth","AbstractButton3D","rectangle_1","textBlock_1","image_1","Button","thickness","CreateImageButton","imageUrl","textBlock","textWrapping","textHorizontalAlignment","paddingLeft","iconImage","stretch","CreateImageOnlyButton","CreateSimpleButton","CreateImageWithCenterTextButton","m00","m01","m10","m11","m20","m21","Float32Array","fromValues","determinant","l0","l1","l2","l3","l4","l5","det","Epsilon","detDiv","det4","det5","multiplyToRef","r0","r1","r2","r3","r4","r5","TranslationToRef","ScalingToRef","RotationToRef","angle","sin","cos","tx","ty","parentMatrix","_TempPreTranslationMatrix","_TempScalingMatrix","_TempRotationMatrix","_TempPostTranslationMatrix","_TempCompose0","_TempCompose1","_TempCompose2","stackPanel_1","Checkbox","_isChecked","_checkSizeRatio","onIsCheckedChangedObservable","actualWidth","actualHeight","offsetWidth","offseHeight","isChecked","AddCheckBoxWithHeader","title","onValueChanged","panel","isVertical","checkbox","header","InputText","_placeholderText","_focusedBackground","_placeholderColor","_margin","_autoStretchWidth","_maxWidth","_isFocused","_blinkIsEven","_cursorOffset","_deadKey","_addKey","_currentKey","promptMessage","onBeforeKeyAddObservable","onFocusObservable","onBlurObservable","flag","autoStretchWidth","_scrollLeft","clearTimeout","_blinkTimeout","navigator","userAgent","prompt","_connectedVirtualKeyboard","processKey","keyCode","substr","deletePosition","deadKey","insertPosition","evt","clipTextLeft","_beforeRenderText","_textWidth","marginWidth","availableWidth","textLeft","_clickedCoordinate","absoluteCursorPosition","currentSize","previousDist","cursorOffsetText","cursorOffsetWidth","cursorLeft","setTimeout","MultiLinePoint","multiLine","_multiLine","_x","_y","_point","_control","_controlObserver","onPointUpdate","_mesh","_meshObserver","onAfterCameraRenderObservable","resetLinks","_translatePoint","xValue","Number","_canvas","yValue","_1","RadioButton","group","undefined","childRadio","AddRadioButtonWithHeader","radio","Slider","_thumbWidth","_minimum","_maximum","_borderColor","_barOffset","_isThumbCircle","_isThumbClamped","onValueChangedObservable","_pointerIsDown","_getThumbThickness","backgroundLength","thumbThickness","effectiveBarOffset","isThumbCircle","backgroundBoxLength","backgroundBoxThickness","effectiveThumbThickness","console","error","isThumbClamped","thumbPosition","_updateValueFromPointer","rotation","registerShader","FluentMaterialDefines","INNERGLOW","BORDER","HOVERLIGHT","TEXTURE","rebuild","MaterialDefines","FluentMaterial","innerGlowColorIntensity","innerGlowColor","albedoColor","renderBorders","borderWidth","edgeSmoothingValue","borderMinValue","renderHoverLight","hoverRadius","hoverColor","Color4","hoverPosition","needAlphaBlending","needAlphaTesting","getAlphaTestTexture","isReadyForSubMesh","subMesh","useInstances","isFrozen","_wasPreviouslyReady","effect","_materialDefines","defines","checkReadyOnEveryCall","_renderId","getRenderId","_areTexturesDirty","_albedoTexture","isReadyOrNotBlocking","markAsProcessed","resetCachedMaterial","attribs","VertexBuffer","PositionKind","NormalKind","UVKind","uniforms","samplers","uniformBuffers","MaterialHelper","PrepareUniformsAndSamplersList","uniformsNames","uniformBuffersNames","maxSimultaneousLights","join","setEffect","createEffect","attributes","fallbacks","onCompiled","onError","indexParameters","bindForSubMesh","world","_activeEffect","bindOnlyWorldMatrix","setMatrix","_mustRebind","setColor4","setFloat","setVector3","setDirectColor4","setTexture","_afterBind","getActiveTextures","hasTexture","forceDisposeEffect","clone","SerializationHelper","Clone","serialize","serializationObject","Serialize","customType","getClassName","Parse","rootUrl","__decorate","expandToProperty","serializeAsColor3","serializeAsColor4","serializeAsVector3","serializeAsTexture","PushMaterial","GUI","globalObject","global","BABYLON","g","Function","eval","e","ColorPicker","_tmpColor","_pointerStartedOnSquare","_pointerStartedOnWheel","_squareLeft","_squareTop","_squareSize","_h","_s","_v","equals","_RGBtoHSV","b","_updateSquareProps","squareSize","sqrt","_drawGradientSquare","hueValue","lgh","createLinearGradient","addColorStop","lgv","_drawCircle","_createColorWheelCanvas","canvas","image","getImageData","data","maxDistSq","innerRadius","minDistSq","distSq","dist","ang","atan2","_HSVtoRGB","alphaAmount","alphaRatio","putImageData","h","v","dm","hue","saturation","chroma","set","wheelThickness","_colorWheelCanvas","cx","cy","_isPointOnSquare","_isPointOnWheel","radiusSq","innerRadiusSq","dx","dy","Ellipse","Grid","_rowDefinitions","_columnDefinitions","_cells","_childControls","addRowDefinition","addColumnDefinition","setRowDefinition","setColumnDefinition","_removeCell","cell","childIndex","_offsetCell","previousKey","_tag","removeColumnDefinition","removeRowDefinition","goodContainer","widths","heights","lefts","tops","globalWidthPercentage","availableHeight","globalHeightPercentage","_d","_e","_f","_g","parseInt","InputPassword","txt","Line","_lineWidth","_x1","_y1","_x2","_y2","_dash","_connectedControl","_connectedControlDirtyObserver","setLineDash","_effectiveX2","_effectiveY2","end","x2","y2","x1","y1","multiLinePoint_1","MultiLine","_points","getAt","items","arguments","map","item","point","reset","forEach","first","_minX","_minY","_maxX","_maxY","checkbox_1","radioButton_1","slider_1","SelectorGroup","_groupPanel","_selectors","_groupHeader","_addGroupHeader","label","groupHeading","_getSelector","selectorNb","removeSelector","CheckboxGroup","addCheckbox","checked","background","_selector","isHorizontal","controlFirst","groupPanel","selectors","buttonColor","buttonBackground","_setSelectorLabel","_setSelectorLabelColor","_setSelectorButtonColor","_setSelectorButtonBackground","RadioGroup","_selectNb","addRadio","nb","SliderGroup","addSlider","onValueChange","minimum","maximum","borderColor","paddingBottom","SelectionPanel","groups","_buttonColor","_buttonBackground","_headerColor","_barColor","_barHeight","_spacerHeight","_bars","_groups","_panel","_addSpacer","_setHeaderColor","_setbuttonColor","j","_labelColor","_setLabelColor","_setButtonBackground","_setBarColor","_setBarHeight","_setSpacerHeight","separator","bar","addGroup","removeGroup","groupNb","setHeaderName","relabel","removeFromGroupSelector","addToGroupCheckbox","addToGroupRadio","addToGroupSlider","onVal","button_1","KeyPropertySet","VirtualKeyboard","onKeyPressObservable","defaultButtonWidth","defaultButtonHeight","defaultButtonPaddingLeft","defaultButtonPaddingRight","defaultButtonPaddingTop","defaultButtonPaddingBottom","defaultButtonColor","defaultButtonBackground","shiftButtonColor","selectedShiftThickness","shiftState","_currentlyConnectedInputText","_connectedInputTexts","_onKeyPressObserver","_createKey","propertySet","paddingRight","paddingTop","addKeysRow","keys","propertySets","properties","applyShiftState","rowContainer","button_tblock","toUpperCase","toLowerCase","connect","input","some","a","onFocusObserver","onBlurObserver","disconnect","filtered","filter","_removeConnectedInputObservables","connectedInputText","CreateDefaultLayout","returnValue","DisplayGrid","_minorLineTickness","_minorLineColor","_majorLineTickness","_majorLineColor","_majorLineFrequency","_displayMajorLines","_displayMinorLines","cellCountX","cellCountY","top_1","cellX","cellY","options","volumeBasedPanel_1","CylinderPanel","_radius","nodePosition","newPos","_cylindricalMapping","orientation","lookAt","Axis","Y","Space","LOCAL","yAngle","RotationYawPitchRollToRef","TransformNormal","button3D_1","fluentMaterial_1","HolographicButton","shareMaterials","_shareMaterials","_frontPlate","_disposeTooltip","_tooltipFade","_tooltipTextBlock","_tooltipTexture","_tooltipMesh","_tooltipHoverObserver","_tooltipOutObserver","CreatePlane","_backPlate","_scene","tooltipBackground","sideOrientation","Mesh","DOUBLESIDE","mat","FromHexString","addChild","fontSize","FadeInOutBehavior","delay","fadeIn","_rebuildContent","_imageUrl","_backMaterial","_frontMaterial","_plateMaterial","_textPlate","_createBackMaterial","_pickedPointObserver","onPickedPointChangedObservable","_createFrontMaterial","_createPlateMaterial","_sharedMaterials","fShader","vShader","Effect","ShadersStore","MeshButton3D","_currentMesh","getChildMeshes","PlanePanel","addInPlace","ScatterPanel","_iteration","_scatterMapping","random","meshes","count","sort","distance1","lengthSquared","distance2","radiusPaddingSquared","pow","cellSize","difference2D","difference","combinedRadius","distance","normalize","subtractInPlace","SpherePanel","_sphericalMapping","xAngle","StackPanel3D","extendSizes","GUI3DManager","LastCreatedScene","_sceneDisposeObserver","onDisposeObservable","_utilityLayer","UtilityLayerRenderer","onlyCheckPointerDownEvents","mainSceneTrackerPredicate","_pointerOutObserver","_handlePointerOut","autoClear","autoClearDepthAndStencil","HemisphericLight","Up","isPointerUp","pickingInfo","pointerType","materialName"],"mappings":"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","file":"babylon.gui.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-gui\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-gui\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"BABYLON\"] = root[\"BABYLON\"] || {}, root[\"BABYLON\"][\"GUI\"] = factory(root[\"BABYLON\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { Container } from \"./container\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector2, AbstractMesh, Observable, Vector3, Scene, Tools, Matrix, PointerEventTypes } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { Style } from \"../style\";\r\nimport { Matrix2D, Vector2WithInfo } from \"../math2D\";\r\n\r\n/**\r\n * Root class used for all 2D controls\r\n * @see http://doc.babylonjs.com/how_to/gui#controls\r\n */\r\nexport class Control {\r\n    private _alpha = 1;\r\n    private _alphaSet = false;\r\n    private _zIndex = 0;\r\n    /** @hidden */\r\n    public _root: Nullable<Container>;\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** Gets or sets the control parent */\r\n    public parent: Nullable<Container>;\r\n    /** @hidden */\r\n    public _currentMeasure = Measure.Empty();\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    private _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _font: string;\r\n    /** @hidden */\r\n    public _width = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    public _height = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    /** @hidden */\r\n    protected _fontOffset: { ascent: number, height: number, descent: number };\r\n    private _color = \"\";\r\n    private _style: Nullable<Style> = null;\r\n    private _styleObserver: Nullable<Observer<Style>>;\r\n    /** @hidden */\r\n    protected _horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    /** @hidden */\r\n    protected _verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _tempParentMeasure = Measure.Empty();\r\n    /** @hidden */\r\n    protected _cachedParentMeasure = Measure.Empty();\r\n    private _paddingLeft = new ValueAndUnit(0);\r\n    private _paddingRight = new ValueAndUnit(0);\r\n    private _paddingTop = new ValueAndUnit(0);\r\n    private _paddingBottom = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _left = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    public _top = new ValueAndUnit(0);\r\n    private _scaleX = 1.0;\r\n    private _scaleY = 1.0;\r\n    private _rotation = 0;\r\n    private _transformCenterX = 0.5;\r\n    private _transformCenterY = 0.5;\r\n    private _transformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _invertTransformMatrix = Matrix2D.Identity();\r\n    /** @hidden */\r\n    protected _transformedPosition = Vector2.Zero();\r\n    private _onlyMeasureMode = false;\r\n    private _isMatrixDirty = true;\r\n    private _cachedOffsetX: number;\r\n    private _cachedOffsetY: number;\r\n    private _isVisible = true;\r\n    /** @hidden */\r\n    public _linkedMesh: Nullable<AbstractMesh>;\r\n    private _fontSet = false;\r\n    private _dummyVector2 = Vector2.Zero();\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _doNotRender = false;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    protected _isEnabled = true;\r\n    protected _disabledColor = \"#9a9a9a\";\r\n    /** @hidden */\r\n    public _tag: any;\r\n\r\n    /** Gets or sets a boolean indicating if the control can be hit with pointer events */\r\n    public isHitTestVisible = true;\r\n    /** Gets or sets a boolean indicating if the control can block pointer events */\r\n    public isPointerBlocker = false;\r\n    /** Gets or sets a boolean indicating if the control can be focusable */\r\n    public isFocusInvisible = false;\r\n\r\n    /** Gets or sets a value indicating the offset to apply on X axis to render the shadow */\r\n    public shadowOffsetX = 0;\r\n    /** Gets or sets a value indicating the offset to apply on Y axis to render the shadow */\r\n    public shadowOffsetY = 0;\r\n    /** Gets or sets a value indicating the amount of blur to use to render the shadow */\r\n    public shadowBlur = 0;\r\n    /** Gets or sets a value indicating the color of the shadow (black by default ie. \"#000\") */\r\n    public shadowColor = '#000';\r\n\r\n    /** Gets or sets the cursor to use when the control is hovered */\r\n    public hoverCursor = \"\";\r\n\r\n    /** @hidden */\r\n    protected _linkOffsetX = new ValueAndUnit(0);\r\n    /** @hidden */\r\n    protected _linkOffsetY = new ValueAndUnit(0);\r\n\r\n    // Properties\r\n\r\n    /** Gets the control type name */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control.\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector2>();\r\n\r\n    /**\r\n    * An event triggered when the pointer move out of the control.\r\n    */\r\n    public onPointerOutObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the pointer taps the control\r\n    */\r\n    public onPointerDownObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer up\r\n    */\r\n    public onPointerUpObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when a control is clicked on\r\n    */\r\n    public onPointerClickObservable = new Observable<Vector2WithInfo>();\r\n\r\n    /**\r\n    * An event triggered when pointer enters the control\r\n    */\r\n    public onPointerEnterObservable = new Observable<Control>();\r\n\r\n    /**\r\n    * An event triggered when the control is marked as dirty\r\n    */\r\n    public onDirtyObservable = new Observable<Control>();\r\n\r\n    /**\r\n   * An event triggered after the control is drawn\r\n   */\r\n    public onAfterDrawObservable = new Observable<Control>();\r\n\r\n    /** Gets or set information about font offsets (used to render and align text) */\r\n    public get fontOffset(): { ascent: number, height: number, descent: number } {\r\n        return this._fontOffset;\r\n    }\r\n\r\n    public set fontOffset(offset: { ascent: number, height: number, descent: number }) {\r\n        this._fontOffset = offset;\r\n    }\r\n\r\n    /** Gets or sets alpha value for the control (1 means opaque and 0 means entirely transparent) */\r\n    public get alpha(): number {\r\n        return this._alpha;\r\n    }\r\n\r\n    public set alpha(value: number) {\r\n        if (this._alpha === value) {\r\n            return;\r\n        }\r\n        this._alphaSet = true;\r\n        this._alpha = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on X axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleX(): number {\r\n        return this._scaleX;\r\n    }\r\n\r\n    public set scaleX(value: number) {\r\n        if (this._scaleX === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating the scale factor on Y axis (1 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get scaleY(): number {\r\n        return this._scaleY;\r\n    }\r\n\r\n    public set scaleY(value: number) {\r\n        if (this._scaleY === value) {\r\n            return;\r\n        }\r\n\r\n        this._scaleY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the rotation angle (0 by default) \r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get rotation(): number {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(value: number) {\r\n        if (this._rotation === value) {\r\n            return;\r\n        }\r\n\r\n        this._rotation = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on Y axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterY(): number {\r\n        return this._transformCenterY;\r\n    }\r\n\r\n    public set transformCenterY(value: number) {\r\n        if (this._transformCenterY === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterY = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the transformation center on X axis (0 by default)\r\n     * @see http://doc.babylonjs.com/how_to/gui#rotation-and-scaling\r\n    */\r\n    public get transformCenterX(): number {\r\n        return this._transformCenterX;\r\n    }\r\n\r\n    public set transformCenterX(value: number) {\r\n        if (this._transformCenterX === value) {\r\n            return;\r\n        }\r\n\r\n        this._transformCenterX = value;\r\n        this._markAsDirty();\r\n        this._markMatrixAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the horizontal alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get horizontalAlignment(): number {\r\n        return this._horizontalAlignment;\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        if (this._horizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._horizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the vertical alignment \r\n     * @see http://doc.babylonjs.com/how_to/gui#alignments\r\n     */\r\n    public get verticalAlignment(): number {\r\n        return this._verticalAlignment;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        if (this._verticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._verticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control width \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control width in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get widthInPixels(): number {\r\n        return this._width.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets control height \r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /** \r\n     * Gets control height in pixel\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get heightInPixels(): number {\r\n        return this._height.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or set font family */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font style */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public get style(): Nullable<Style> {\r\n        return this._style;\r\n    }\r\n\r\n    public set style(value: Nullable<Style>) {\r\n        if (this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        this._style = value;\r\n\r\n        if (this._style) {\r\n            this._styleObserver = this._style.onChangedObservable.add(() => {\r\n                this._markAsDirty();\r\n                this._resetFontCache();\r\n            });\r\n        }\r\n\r\n        this._markAsDirty();\r\n        this._resetFontCache();\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _isFontSizeInPercentage(): boolean {\r\n        return this._fontSize.isPercentage;\r\n    }\r\n\r\n    /** Gets font size in pixels */\r\n    public get fontSizeInPixels(): number {\r\n        let fontSizeToUse = this._style ? this._style._fontSize : this._fontSize;\r\n\r\n        if (fontSizeToUse.isPixel) {\r\n            return fontSizeToUse.getValue(this._host);\r\n        }\r\n\r\n        return fontSizeToUse.getValueInPixel(this._host, this._tempParentMeasure.height || this._cachedParentMeasure.height);\r\n    }\r\n\r\n    /** Gets or sets font size */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this._markAsDirty();\r\n            this._resetFontCache();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets foreground color */\r\n    public get color(): string {\r\n        return this._color;\r\n    }\r\n\r\n    public set color(value: string) {\r\n        if (this._color === value) {\r\n            return;\r\n        }\r\n\r\n        this._color = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets z index which is used to reorder controls on the z axis */\r\n    public get zIndex(): number {\r\n        return this._zIndex;\r\n    }\r\n\r\n    public set zIndex(value: number) {\r\n        if (this.zIndex === value) {\r\n            return;\r\n        }\r\n\r\n        this._zIndex = value;\r\n\r\n        if (this._root) {\r\n            this._root._reOrderControl(this);\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can be rendered */\r\n    public get notRenderable(): boolean {\r\n        return this._doNotRender;\r\n    }\r\n\r\n    public set notRenderable(value: boolean) {\r\n        if (this._doNotRender === value) {\r\n            return;\r\n        }\r\n\r\n        this._doNotRender = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n        this._markAsDirty(true);\r\n    }\r\n\r\n    /** Gets a boolean indicating that the control needs to update its rendering */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Gets the current linked mesh (or null if none)\r\n     */\r\n    public get linkedMesh(): Nullable<AbstractMesh> {\r\n        return this._linkedMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeft(): string | number {\r\n        return this._paddingLeft.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the left of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingLeftInPixels(): number {\r\n        return this._paddingLeft.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingLeft(value: string | number) {\r\n        if (this._paddingLeft.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRight(): string | number {\r\n        return this._paddingRight.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the right of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingRightInPixels(): number {\r\n        return this._paddingRight.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set paddingRight(value: string | number) {\r\n        if (this._paddingRight.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTop(): string | number {\r\n        return this._paddingTop.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the top of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingTopInPixels(): number {\r\n        return this._paddingTop.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingTop(value: string | number) {\r\n        if (this._paddingTop.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the padding to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottom(): string | number {\r\n        return this._paddingBottom.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the padding in pixels to use on the bottom of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get paddingBottomInPixels(): number {\r\n        return this._paddingBottom.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set paddingBottom(value: string | number) {\r\n        if (this._paddingBottom.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the left coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get left(): string | number {\r\n        return this._left.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the left coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get leftInPixels(): number {\r\n        return this._left.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set left(value: string | number) {\r\n        if (this._left.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the top coordinate of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get top(): string | number {\r\n        return this._top.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the top coordinate in pixels of the control\r\n     * @see http://doc.babylonjs.com/how_to/gui#position-and-size\r\n     */\r\n    public get topInPixels(): number {\r\n        return this._top.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set top(value: string | number) {\r\n        if (this._top.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetX(): string | number {\r\n        return this._linkOffsetX.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on X axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetXInPixels(): number {\r\n        return this._linkOffsetX.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set linkOffsetX(value: string | number) {\r\n        if (this._linkOffsetX.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a value indicating the offset on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetY(): string | number {\r\n        return this._linkOffsetY.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating the offset in pixels on Y axis to the linked mesh\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public get linkOffsetYInPixels(): number {\r\n        return this._linkOffsetY.getValueInPixel(this._host, this._cachedParentMeasure.height);\r\n    }\r\n\r\n    public set linkOffsetY(value: string | number) {\r\n        if (this._linkOffsetY.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the center coordinate on X axis */\r\n    public get centerX(): number {\r\n        return this._currentMeasure.left + this._currentMeasure.width / 2;\r\n    }\r\n\r\n    /** Gets the center coordinate on Y axis */\r\n    public get centerY(): number {\r\n        return this._currentMeasure.top + this._currentMeasure.height / 2;\r\n    }\r\n\r\n    /** Gets or sets if control is Enabled*/\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    public set isEnabled(value: boolean) {\r\n        if(this._isEnabled === value){\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._markAsDirty();\r\n    }\r\n    /** Gets or sets background color of control if it's disabled*/\r\n    public get disabledColor(): string {\r\n        return this._disabledColor;\r\n    }\r\n\r\n    public set disabledColor(value: string) {\r\n        if(this._disabledColor === value){\r\n            return;\r\n        }\r\n\r\n        this._disabledColor = value;\r\n        this._markAsDirty();\r\n    }\r\n    // Functions\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the name of the control\r\n     */\r\n    constructor(\r\n        /** defines the name of the control */\r\n        public name?: string) {\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _getTypeName(): string {\r\n        return \"Control\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _resetFontCache(): void {\r\n        this._fontSet = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Determines if a container is an ascendant of the current control\r\n     * @param container defines the container to look for\r\n     * @returns true if the container is one of the ascendant of the control\r\n     */\r\n    public isAscendant(container: Control): boolean {\r\n        if (!this.parent) {\r\n            return false;\r\n        }\r\n\r\n        if (this.parent === container) {\r\n            return true;\r\n        }\r\n\r\n        return this.parent.isAscendant(container);\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in local space\r\n     */\r\n    public getLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        this.getLocalCoordinatesToRef(globalCoordinates, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @param result defines the target vector2 where to store the result\r\n     * @returns the current control\r\n     */\r\n    public getLocalCoordinatesToRef(globalCoordinates: Vector2, result: Vector2): Control {\r\n        result.x = globalCoordinates.x - this._currentMeasure.left;\r\n        result.y = globalCoordinates.y - this._currentMeasure.top;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets coordinates in parent local control space \r\n     * @param globalCoordinates defines the coordinates to transform\r\n     * @returns the new coordinates in parent local space\r\n     */\r\n    public getParentLocalCoordinates(globalCoordinates: Vector2): Vector2 {\r\n        var result = Vector2.Zero();\r\n\r\n        result.x = globalCoordinates.x - this._cachedParentMeasure.left;\r\n        result.y = globalCoordinates.y - this._cachedParentMeasure.top;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Move the current control to a vector3 position projected onto the screen.\r\n     * @param position defines the target position\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition);\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Link current control with a target mesh\r\n     * @param mesh defines the mesh to link with\r\n     * @see http://doc.babylonjs.com/how_to/gui#tracking-positions\r\n     */\r\n    public linkWithMesh(mesh: Nullable<AbstractMesh>): void {\r\n        if (!this._host || this._root && this._root !== this._host._rootContainer) {\r\n            if (mesh) {\r\n                Tools.Error(\"Cannot link a control to a mesh if the control is not at root level\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        var index = this._host._linkedControls.indexOf(this);\r\n        if (index !== -1) {\r\n            this._linkedMesh = mesh;\r\n            if (!mesh) {\r\n                this._host._linkedControls.splice(index, 1);\r\n            }\r\n            return;\r\n        } else if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        this.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._linkedMesh = mesh;\r\n        this._onlyMeasureMode = this._currentMeasure.width === 0 || this._currentMeasure.height === 0;\r\n        this._host._linkedControls.push(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3): void {\r\n        let oldLeft = this._left.getValue(this._host);\r\n        let oldTop = this._top.getValue(this._host);\r\n\r\n        var newLeft = ((projectedPosition.x + this._linkOffsetX.getValue(this._host)) - this._currentMeasure.width / 2);\r\n        var newTop = ((projectedPosition.y + this._linkOffsetY.getValue(this._host)) - this._currentMeasure.height / 2);\r\n\r\n        if (this._left.ignoreAdaptiveScaling && this._top.ignoreAdaptiveScaling) {\r\n            if (Math.abs(newLeft - oldLeft) < 0.5) {\r\n                newLeft = oldLeft;\r\n            }\r\n\r\n            if (Math.abs(newTop - oldTop) < 0.5) {\r\n                newTop = oldTop;\r\n            }\r\n        }\r\n\r\n        this.left = newLeft + \"px\";\r\n        this.top = newTop + \"px\";\r\n\r\n        this._left.ignoreAdaptiveScaling = true;\r\n        this._top.ignoreAdaptiveScaling = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        this._isMatrixDirty = true;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAsDirty(force = false): void {\r\n        if (!this._isVisible && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        if (!this._host) {\r\n            return; // Not yet connected\r\n        }\r\n        this._host.markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        this._markAsDirty();\r\n\r\n        if (this._font) {\r\n            this._prepareFont();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        this._root = root;\r\n        this._host = host;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _transform(context: CanvasRenderingContext2D): void {\r\n        if (!this._isMatrixDirty && this._scaleX === 1 && this._scaleY === 1 && this._rotation === 0) {\r\n            return;\r\n        }\r\n\r\n        // postTranslate\r\n        var offsetX = this._currentMeasure.width * this._transformCenterX + this._currentMeasure.left;\r\n        var offsetY = this._currentMeasure.height * this._transformCenterY + this._currentMeasure.top;\r\n        context.translate(offsetX, offsetY);\r\n\r\n        // rotate\r\n        context.rotate(this._rotation);\r\n\r\n        // scale\r\n        context.scale(this._scaleX, this._scaleY);\r\n\r\n        // preTranslate\r\n        context.translate(-offsetX, -offsetY);\r\n\r\n        // Need to update matrices?\r\n        if (this._isMatrixDirty || this._cachedOffsetX !== offsetX || this._cachedOffsetY !== offsetY) {\r\n            this._cachedOffsetX = offsetX;\r\n            this._cachedOffsetY = offsetY;\r\n            this._isMatrixDirty = false;\r\n\r\n            Matrix2D.ComposeToRef(-offsetX, -offsetY, this._rotation, this._scaleX, this._scaleY, this._root ? this._root._transformMatrix : null, this._transformMatrix);\r\n\r\n            this._transformMatrix.invertToRef(this._invertTransformMatrix);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        if (this._isFontSizeInPercentage) {\r\n            this._resetFontCache();\r\n        }\r\n\r\n        if (this._fontSet) {\r\n            this._prepareFont();\r\n            this._fontSet = false;\r\n        }\r\n\r\n        if (this._font) {\r\n            context.font = this._font;\r\n        }\r\n\r\n        if (this._color) {\r\n            context.fillStyle = this._color;\r\n        }\r\n\r\n        if (this._alphaSet) {\r\n            context.globalAlpha = this.parent ? this.parent.alpha * this._alpha : this._alpha;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _processMeasures(parentMeasure: Measure, context: CanvasRenderingContext2D): boolean {\r\n        if (this._isDirty || !this._cachedParentMeasure.isEqualsTo(parentMeasure)) {\r\n            this._isDirty = false;\r\n            this._currentMeasure.copyFrom(parentMeasure);\r\n\r\n            // Let children take some pre-measurement actions\r\n            this._preMeasure(parentMeasure, context);\r\n\r\n            this._measure();\r\n            this._computeAlignment(parentMeasure, context);\r\n\r\n            // Convert to int values\r\n            this._currentMeasure.left = this._currentMeasure.left | 0;\r\n            this._currentMeasure.top = this._currentMeasure.top | 0;\r\n            this._currentMeasure.width = this._currentMeasure.width | 0;\r\n            this._currentMeasure.height = this._currentMeasure.height | 0;\r\n\r\n            // Let children add more features\r\n            this._additionalProcessing(parentMeasure, context);\r\n\r\n            this._cachedParentMeasure.copyFrom(parentMeasure);\r\n\r\n            if (this.onDirtyObservable.hasObservers()) {\r\n                this.onDirtyObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        if (this._currentMeasure.left > parentMeasure.left + parentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.left + this._currentMeasure.width < parentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top > parentMeasure.top + parentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this._currentMeasure.top + this._currentMeasure.height < parentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        // Transform\r\n        this._transform(context);\r\n\r\n        if (this._onlyMeasureMode) {\r\n            this._onlyMeasureMode = false;\r\n            return false; // We do not want rendering for this frame as they are measure dependant information that need to be gathered\r\n        }\r\n\r\n        // Clip\r\n        this._clip(context);\r\n        context.clip();\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clip(context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            var shadowOffsetX = this.shadowOffsetX;\r\n            var shadowOffsetY = this.shadowOffsetY;\r\n            var shadowBlur = this.shadowBlur;\r\n\r\n            var leftShadowOffset = Math.min(Math.min(shadowOffsetX, 0) - shadowBlur * 2, 0);\r\n            var rightShadowOffset = Math.max(Math.max(shadowOffsetX, 0) + shadowBlur * 2, 0);\r\n            var topShadowOffset = Math.min(Math.min(shadowOffsetY, 0) - shadowBlur * 2, 0);\r\n            var bottomShadowOffset = Math.max(Math.max(shadowOffsetY, 0) + shadowBlur * 2, 0);\r\n\r\n            context.rect(this._currentMeasure.left + leftShadowOffset,\r\n                this._currentMeasure.top + topShadowOffset,\r\n                this._currentMeasure.width + rightShadowOffset - leftShadowOffset,\r\n                this._currentMeasure.height + bottomShadowOffset - topShadowOffset);\r\n        } else {\r\n            context.rect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _measure(): void {\r\n        // Width / Height\r\n        if (this._width.isPixel) {\r\n            this._currentMeasure.width = this._width.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width *= this._width.getValue(this._host);\r\n        }\r\n\r\n        if (this._height.isPixel) {\r\n            this._currentMeasure.height = this._height.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height *= this._height.getValue(this._host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var height = this._currentMeasure.height;\r\n\r\n        var parentWidth = parentMeasure.width;\r\n        var parentHeight = parentMeasure.height;\r\n\r\n        // Left / top\r\n        var x = 0;\r\n        var y = 0;\r\n\r\n        switch (this.horizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = parentWidth - width;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (parentWidth - width) / 2;\r\n                break;\r\n        }\r\n\r\n        switch (this.verticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                y = 0;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                y = parentHeight - height;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                y = (parentHeight - height) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this._paddingLeft.isPixel) {\r\n            this._currentMeasure.left += this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= this._paddingLeft.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._paddingLeft.getValue(this._host);\r\n            this._currentMeasure.width -= parentWidth * this._paddingLeft.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingRight.isPixel) {\r\n            this._currentMeasure.width -= this._paddingRight.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.width -= parentWidth * this._paddingRight.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingTop.isPixel) {\r\n            this._currentMeasure.top += this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= this._paddingTop.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._paddingTop.getValue(this._host);\r\n            this._currentMeasure.height -= parentHeight * this._paddingTop.getValue(this._host);\r\n        }\r\n\r\n        if (this._paddingBottom.isPixel) {\r\n            this._currentMeasure.height -= this._paddingBottom.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.height -= parentHeight * this._paddingBottom.getValue(this._host);\r\n        }\r\n\r\n        if (this._left.isPixel) {\r\n            this._currentMeasure.left += this._left.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.left += parentWidth * this._left.getValue(this._host);\r\n        }\r\n\r\n        if (this._top.isPixel) {\r\n            this._currentMeasure.top += this._top.getValue(this._host);\r\n        } else {\r\n            this._currentMeasure.top += parentHeight * this._top.getValue(this._host);\r\n        }\r\n\r\n        this._currentMeasure.left += x;\r\n        this._currentMeasure.top += y;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Tests if a given coordinates belong to the current control\r\n     * @param x defines x coordinate to test\r\n     * @param y defines y coordinate to test\r\n     * @returns true if the coordinates are inside the control\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        // Invert transform\r\n        this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n\r\n        x = this._transformedPosition.x;\r\n        y = this._transformedPosition.y;\r\n\r\n        // Check\r\n        if (x < this._currentMeasure.left) {\r\n            return false;\r\n        }\r\n\r\n        if (x > this._currentMeasure.left + this._currentMeasure.width) {\r\n            return false;\r\n        }\r\n\r\n        if (y < this._currentMeasure.top) {\r\n            return false;\r\n        }\r\n\r\n        if (y > this._currentMeasure.top + this._currentMeasure.height) {\r\n            return false;\r\n        }\r\n\r\n        if (this.isPointerBlocker) {\r\n            this._host._shouldBlockPointer = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        if (!this.isHitTestVisible || !this.isVisible || this._doNotRender) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        var canNotify: boolean = this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n        this._enterCount++;\r\n\r\n        var canNotify: boolean = this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerEnter(target);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if(!this._isEnabled){\r\n            return;\r\n        }\r\n        this._enterCount = 0;\r\n\r\n        var canNotify: boolean = this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        // Prevent pointerout to lose control context.\r\n        // Event redundancy is checked inside the function.\r\n        this._onPointerEnter(this);\r\n\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        var canNotify: boolean = this.onPointerDownObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerDown(target, coordinates, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if(!this._isEnabled){\r\n            return;\r\n        }\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        var canNotifyClick: boolean = notifyClick;\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            canNotifyClick = this.onPointerClickObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        var canNotify: boolean = this.onPointerUpObservable.notifyObservers(new Vector2WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (canNotify && this.parent != null) this.parent._onPointerUp(target, coordinates, pointerId, buttonIndex, canNotifyClick);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector2.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector2.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, x: number, y: number, pointerId: number, buttonIndex: number): boolean {\r\n        if(!this._isEnabled){\r\n            return false;\r\n        }\r\n        this._dummyVector2.copyFromFloats(x, y);\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, this._dummyVector2);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, this._dummyVector2, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, this._dummyVector2, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareFont() {\r\n        if (!this._font && !this._fontSet) {\r\n            return;\r\n        }\r\n\r\n        if (this._style) {\r\n            this._font = this._style.fontStyle + \" \" + this._style.fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._style.fontFamily;\r\n        } else {\r\n            this._font = this._fontStyle + \" \" + this._fontWeight + \" \" + this.fontSizeInPixels + \"px \" + this._fontFamily;\r\n        }\r\n\r\n        this._fontOffset = Control._GetFontOffset(this._font);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        this.onDirtyObservable.clear();\r\n        this.onAfterDrawObservable.clear();\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        if (this._styleObserver && this._style) {\r\n            this._style.onChangedObservable.remove(this._styleObserver);\r\n            this._styleObserver = null;\r\n        }\r\n\r\n        if (this._root) {\r\n            this._root.removeControl(this);\r\n            this._root = null;\r\n        }\r\n\r\n        if (this._host) {\r\n            var index = this._host._linkedControls.indexOf(this);\r\n            if (index > -1) {\r\n                this.linkWithMesh(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    private static _HORIZONTAL_ALIGNMENT_LEFT = 0;\r\n    private static _HORIZONTAL_ALIGNMENT_RIGHT = 1;\r\n    private static _HORIZONTAL_ALIGNMENT_CENTER = 2;\r\n\r\n    private static _VERTICAL_ALIGNMENT_TOP = 0;\r\n    private static _VERTICAL_ALIGNMENT_BOTTOM = 1;\r\n    private static _VERTICAL_ALIGNMENT_CENTER = 2;\r\n\r\n    /** HORIZONTAL_ALIGNMENT_LEFT */\r\n    public static get HORIZONTAL_ALIGNMENT_LEFT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_LEFT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_RIGHT */\r\n    public static get HORIZONTAL_ALIGNMENT_RIGHT(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_RIGHT;\r\n    }\r\n\r\n    /** HORIZONTAL_ALIGNMENT_CENTER */\r\n    public static get HORIZONTAL_ALIGNMENT_CENTER(): number {\r\n        return Control._HORIZONTAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_TOP */\r\n    public static get VERTICAL_ALIGNMENT_TOP(): number {\r\n        return Control._VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_BOTTOM */\r\n    public static get VERTICAL_ALIGNMENT_BOTTOM(): number {\r\n        return Control._VERTICAL_ALIGNMENT_BOTTOM;\r\n    }\r\n\r\n    /** VERTICAL_ALIGNMENT_CENTER */\r\n    public static get VERTICAL_ALIGNMENT_CENTER(): number {\r\n        return Control._VERTICAL_ALIGNMENT_CENTER;\r\n    }\r\n\r\n    private static _FontHeightSizes: { [key: string]: { ascent: number, height: number, descent: number } } = {};\r\n\r\n    /** @hidden */\r\n    public static _GetFontOffset(font: string): { ascent: number, height: number, descent: number } {\r\n\r\n        if (Control._FontHeightSizes[font]) {\r\n            return Control._FontHeightSizes[font];\r\n        }\r\n\r\n        var text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.style.font = font;\r\n\r\n        var block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        var fontAscent = 0;\r\n        var fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        var result = { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n        Control._FontHeightSizes[font] = result;\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Creates a stack panel that can be used to render headers\r\n     * @param control defines the control to associate with the header\r\n     * @param text defines the text of the header\r\n     * @param size defines the size of the header\r\n     * @param options defines options used to configure the header\r\n     * @returns a new StackPanel\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    public static AddHeader: (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }) => any = () => { };\r\n\r\n    /** @hidden */\r\n    protected static drawEllipse(x: number, y: number, width: number, height: number, context: CanvasRenderingContext2D): void {\r\n        context.translate(x, y);\r\n        context.scale(width, height);\r\n\r\n        context.beginPath();\r\n        context.arc(0, 0, 1, 0, 2 * Math.PI);\r\n        context.closePath();\r\n\r\n        context.scale(1 / width, 1 / height);\r\n        context.translate(-x, -y);\r\n    }\r\n}\r\n","import { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\n\r\n/**\r\n * Class used to specific a value and its associated unit\r\n */\r\nexport class ValueAndUnit {\r\n    private _value = 1;\r\n    /**\r\n     * Gets or sets a value indicating that this value will not scale accordingly with adaptive scaling property\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public ignoreAdaptiveScaling = false;\r\n\r\n    /**\r\n     * Creates a new ValueAndUnit\r\n     * @param value defines the value to store\r\n     * @param unit defines the unit to store\r\n     * @param negativeValueAllowed defines a boolean indicating if the value can be negative\r\n     */\r\n    public constructor(value: number,\r\n        /** defines the unit to store */\r\n        public unit = ValueAndUnit.UNITMODE_PIXEL,\r\n        /** defines a boolean indicating if the value can be negative */\r\n        public negativeValueAllowed = true) {\r\n        this._value = value;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is a percentage */\r\n    public get isPercentage(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** Gets a boolean indicating if the value is store as pixel */\r\n    public get isPixel(): boolean {\r\n        return this.unit === ValueAndUnit.UNITMODE_PIXEL;\r\n    }\r\n\r\n    /** Gets direct internal value */\r\n    public get internalValue(): number {\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets value as pixel\r\n     * @param host defines the root host\r\n     * @param refValue defines the reference value for percentages\r\n     * @returns the value as pixel\r\n     */\r\n    public getValueInPixel(host: AdvancedDynamicTexture, refValue: number): number {\r\n        if (this.isPixel) {\r\n            return this.getValue(host);\r\n        }\r\n\r\n        return this.getValue(host) * refValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value accordingly to its unit\r\n     * @param host  defines the root host\r\n     * @returns the value\r\n     */\r\n    public getValue(host: AdvancedDynamicTexture): number {\r\n        if (host && !this.ignoreAdaptiveScaling && this.unit !== ValueAndUnit.UNITMODE_PERCENTAGE) {\r\n            var width: number = 0;\r\n            var height: number = 0;\r\n\r\n            if (host.idealWidth) {\r\n                width = (this._value * host.getSize().width) / host.idealWidth;\r\n            }\r\n\r\n            if (host.idealHeight) {\r\n                height = (this._value * host.getSize().height) / host.idealHeight;\r\n            }\r\n\r\n            if (host.useSmallestIdeal && host.idealWidth && host.idealHeight) {\r\n                return window.innerWidth < window.innerHeight ? width : height;\r\n            }\r\n\r\n            if (host.idealWidth) { // horizontal\r\n                return width;\r\n            }\r\n\r\n            if (host.idealHeight) { // vertical\r\n                return height;\r\n            }\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the value\r\n     * @param host defines the root host\r\n     * @returns a string\r\n     */\r\n    public toString(host: AdvancedDynamicTexture): string {\r\n        switch (this.unit) {\r\n            case ValueAndUnit.UNITMODE_PERCENTAGE:\r\n                return (this.getValue(host) * 100) + \"%\";\r\n            case ValueAndUnit.UNITMODE_PIXEL:\r\n                return this.getValue(host) + \"px\";\r\n        }\r\n\r\n        return this.unit.toString();\r\n    }\r\n\r\n    /**\r\n     * Store a value parsed from a string\r\n     * @param source defines the source string\r\n     * @returns true if the value was successfully parsed\r\n     */\r\n    public fromString(source: string | number): boolean {\r\n        var match = ValueAndUnit._Regex.exec(source.toString());\r\n\r\n        if (!match || match.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        var sourceValue = parseFloat(match[1]);\r\n        var sourceUnit = this.unit;\r\n\r\n        if (!this.negativeValueAllowed) {\r\n            if (sourceValue < 0) {\r\n                sourceValue = 0;\r\n            }\r\n        }\r\n\r\n        if (match.length === 4) {\r\n            switch (match[3]) {\r\n                case \"px\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PIXEL;\r\n                    break;\r\n                case \"%\":\r\n                    sourceUnit = ValueAndUnit.UNITMODE_PERCENTAGE;\r\n                    sourceValue /= 100.0;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (sourceValue === this._value && sourceUnit === this.unit) {\r\n            return false;\r\n        }\r\n\r\n        this._value = sourceValue;\r\n        this.unit = sourceUnit;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Static\r\n    private static _Regex = /(^-?\\d*(\\.\\d+)?)(%|px)?/;\r\n    private static _UNITMODE_PERCENTAGE = 0;\r\n    private static _UNITMODE_PIXEL = 1;\r\n\r\n    /** UNITMODE_PERCENTAGE */\r\n    public static get UNITMODE_PERCENTAGE(): number {\r\n        return ValueAndUnit._UNITMODE_PERCENTAGE;\r\n    }\r\n\r\n    /** UNITMODE_PIXEL */\r\n    public static get UNITMODE_PIXEL(): number {\r\n        return ValueAndUnit._UNITMODE_PIXEL;\r\n    }\r\n}  ","import { Control3D } from \"./control3D\";\r\nimport { Scene, Nullable, TransformNode } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create containers for controls\r\n */\r\nexport class Container3D extends Control3D {\r\n    private _blockLayout = false;\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    protected _children = new Array<Control3D>();\r\n\r\n    /**\r\n     * Gets the list of child controls\r\n     */\r\n    public get children(): Array<Control3D> {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the layout must be blocked (default is false).\r\n     * This is helpful to optimize layout operation when adding multiple children in a row\r\n     */\r\n    public get blockLayout(): boolean {\r\n        return this._blockLayout;\r\n    }\r\n\r\n    public set blockLayout(value: boolean) {\r\n        if (this._blockLayout === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockLayout = value;\r\n\r\n        if (!this._blockLayout) {\r\n            this._arrangeChildren();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new container\r\n     * @param name defines the container name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Force the container to update the layout. Please note that it will not take blockLayout property in account\r\n     * @returns the current container\r\n     */\r\n    public updateLayout(): Container3D {\r\n        this._arrangeChildren();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the children of this control\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the children of this control\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control.parent = this;\r\n        control._host = this._host;\r\n\r\n        this._children.push(control);\r\n\r\n        if (this._host.utilityLayer) {\r\n            control._prepareNode(this._host.utilityLayer.utilityLayerScene);\r\n\r\n            if (control.node) {\r\n                control.node.parent = this.node;\r\n            }\r\n\r\n            if (!this.blockLayout) {\r\n                this._arrangeChildren();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * This function will be called everytime a new control is added \r\n     */\r\n    protected _arrangeChildren() {\r\n    }\r\n\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        return new TransformNode(\"ContainerNode\", scene);\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the children of this control\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): Container3D {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n            control._disposeNode();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container3D\";\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n\r\n        this._children = [];\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /** Control rotation will remain unchanged  */\r\n    public static readonly UNSET_ORIENTATION = 0;\r\n\r\n    /** Control will rotate to make it look at sphere central axis */\r\n    public static readonly FACEORIGIN_ORIENTATION = 1;\r\n\r\n    /** Control will rotate to make it look back at sphere central axis */\r\n    public static readonly FACEORIGINREVERSED_ORIENTATION = 2;\r\n\r\n    /** Control will rotate to look at z axis (0, 0, 1) */\r\n    public static readonly FACEFORWARD_ORIENTATION = 3;\r\n\r\n    /** Control will rotate to look at negative z axis (0, 0, -1) */\r\n    public static readonly FACEFORWARDREVERSED_ORIENTATION = 4;\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Nullable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../advancedDynamicTexture\";\r\n\r\n/**\r\n * Root class for 2D containers\r\n * @see http://doc.babylonjs.com/how_to/gui#containers\r\n */\r\nexport class Container extends Control {\r\n    /** @hidden */\r\n    protected _children = new Array<Control>();\r\n    /** @hidden */\r\n    protected _measureForChildren = Measure.Empty();\r\n    /** @hidden */\r\n    protected _background: string;\r\n    /** @hidden */\r\n    protected _adaptWidthToChildren = false;\r\n    /** @hidden */\r\n    protected _adaptHeightToChildren = false;\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children height */\r\n    public get adaptHeightToChildren(): boolean {\r\n        return this._adaptHeightToChildren;\r\n    }\r\n\r\n    public set adaptHeightToChildren(value: boolean) {\r\n        if (this._adaptHeightToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptHeightToChildren = value;\r\n\r\n        if (value) {\r\n            this.height = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the container should try to adapt to its children width */\r\n    public get adaptWidthToChildren(): boolean {\r\n        return this._adaptWidthToChildren;\r\n    }\r\n\r\n    public set adaptWidthToChildren(value: boolean) {\r\n        if (this._adaptWidthToChildren === value) {\r\n            return;\r\n        }\r\n\r\n        this._adaptWidthToChildren = value;\r\n\r\n        if (value) {\r\n            this.width = \"100%\";\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Container\r\n     * @param name defines the name of the container\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its name\r\n     * @param name defines the child name to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByName(name: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.name === name) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a child using its type and its name\r\n     * @param name defines the child name to look for\r\n     * @param type defines the child type to look for\r\n     * @returns the child control if found\r\n     */\r\n    public getChildByType(name: string, type: string): Nullable<Control> {\r\n        for (var child of this.children) {\r\n            if (child.typeName === type) {\r\n                return child;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Search for a specific control in children\r\n     * @param control defines the control to look for\r\n     * @returns true if the control is in child list\r\n     */\r\n    public containsControl(control: Control): boolean {\r\n        return this.children.indexOf(control) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current container\r\n     * @param control defines the control to add\r\n     * @returns the current container\r\n     */\r\n    public addControl(control: Nullable<Control>): Container {\r\n        if (!control) {\r\n            return this;\r\n        }\r\n\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n        control._link(this, this._host);\r\n\r\n        control._markAllAsDirty();\r\n\r\n        this._reOrderControl(control);\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes all controls from the current container\r\n     * @returns the current container\r\n     */\r\n    public clearControls(): Container {\r\n        let children = this._children.slice();\r\n\r\n        for (var child of children) {\r\n            this.removeControl(child);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._children.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n\r\n            control.parent = null;\r\n        }\r\n\r\n        control.linkWithMesh(null);\r\n\r\n        if (this._host) {\r\n            this._host._cleanControlAfterRemoval(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reOrderControl(control: Control): void {\r\n        this.removeControl(control);\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            if (this._children[index].zIndex > control.zIndex) {\r\n                this._children.splice(index, 0, control);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._children.push(control);\r\n\r\n        control.parent = this;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markMatrixAsDirty(): void {\r\n        super._markMatrixAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markMatrixAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markAllAsDirty(): void {\r\n        super._markAllAsDirty();\r\n\r\n        for (var index = 0; index < this._children.length; index++) {\r\n            this._children[index]._markAllAsDirty();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        if (this._background) {\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._background;\r\n            context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _link(root: Nullable<Container>, host: AdvancedDynamicTexture): void {\r\n        super._link(root, host);\r\n\r\n        for (var child of this._children) {\r\n            child._link(root, host);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return;\r\n        }\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            this._localDraw(context);\r\n\r\n            this._clipForChildren(context);\r\n\r\n            let computedWidth = -1;\r\n            let computedHeight = -1;\r\n\r\n            for (var child of this._children) {\r\n                if (child.isVisible && !child.notRenderable) {\r\n                    child._tempParentMeasure.copyFrom(this._measureForChildren);\r\n                    child._draw(this._measureForChildren, context);\r\n\r\n                    if (child.onAfterDrawObservable.hasObservers()) {\r\n                        child.onAfterDrawObservable.notifyObservers(child);\r\n                    }\r\n\r\n                    if (this.adaptWidthToChildren && child._width.isPixel) {\r\n                        computedWidth = Math.max(computedWidth, child._currentMeasure.width);\r\n                    }\r\n                    if (this.adaptHeightToChildren && child._height.isPixel) {\r\n                        computedHeight = Math.max(computedHeight, child._currentMeasure.height);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.adaptWidthToChildren && computedWidth >= 0) {\r\n                this.width = computedWidth + \"px\";\r\n            }\r\n            if (this.adaptHeightToChildren && computedHeight >= 0) {\r\n                this.height = computedHeight + \"px\";\r\n            }\r\n        }\r\n        context.restore();\r\n\r\n        if (this.onAfterDrawObservable.hasObservers()) {\r\n            this.onAfterDrawObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        // Checking backwards to pick closest first\r\n        for (var index = this._children.length - 1; index >= 0; index--) {\r\n            var child = this._children[index];\r\n            if (child._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n                if (child.hoverCursor) {\r\n                    this._host._changeCursor(child.hoverCursor);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.isHitTestVisible) {\r\n            return false;\r\n        }\r\n\r\n        return this._processObservables(type, x, y, pointerId, buttonIndex);\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _clipForChildren(context: CanvasRenderingContext2D): void {\r\n        // DO nothing\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.copyFrom(this._currentMeasure);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._children) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}   ","import { Observable } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum TextWrapping {\r\n    /**\r\n     * Clip the text when it's larger than Control.width; this is the default mode.\r\n     */\r\n    Clip = 0,\r\n\r\n    /**\r\n     * Wrap the text word-wise, i.e. try to add line-breaks at word boundary to fit within Control.width.\r\n     */\r\n    WordWrap = 1,\r\n\r\n    /**\r\n     * Ellipsize the text, i.e. shrink with trailing … when text is larger than Control.width.\r\n     */\r\n    Ellipsis,\r\n}\r\n\r\n/**\r\n * Class used to create text block control\r\n */\r\nexport class TextBlock extends Control {\r\n    private _text = \"\";\r\n    private _textWrapping = TextWrapping.Clip;\r\n    private _textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n    private _textVerticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n\r\n    private _lines: any[];\r\n    private _resizeToFit: boolean = false;\r\n    private _lineSpacing: ValueAndUnit = new ValueAndUnit(0);\r\n    private _outlineWidth: number = 0;\r\n    private _outlineColor: string = \"white\";\r\n    /**\r\n    * An event triggered after the text is changed\r\n    */\r\n    public onTextChangedObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n    * An event triggered after the text was broken up into lines\r\n    */\r\n    public onLinesReadyObservable = new Observable<TextBlock>();\r\n\r\n    /**\r\n     * Return the line list (you may need to use the onLinesReadyObservable to make sure the list is ready)\r\n     */\r\n    public get lines(): any[] {\r\n        return this._lines;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public get resizeToFit(): boolean {\r\n        return this._resizeToFit;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an boolean indicating that the TextBlock will be resized to fit container\r\n     */\r\n    public set resizeToFit(value: boolean) {\r\n        this._resizeToFit = value;\r\n\r\n        if (this._resizeToFit) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public get textWrapping(): TextWrapping | boolean {\r\n        return this._textWrapping;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if text must be wrapped\r\n     */\r\n    public set textWrapping(value: TextWrapping | boolean) {\r\n        if (this._textWrapping === value) {\r\n            return;\r\n        }\r\n        this._textWrapping = +value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text to display\r\n     */\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textHorizontalAlignment(): number {\r\n        return this._textHorizontalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text horizontal alignment (BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textHorizontalAlignment(value: number) {\r\n        if (this._textHorizontalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textHorizontalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public get textVerticalAlignment(): number {\r\n        return this._textVerticalAlignment;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets text vertical alignment (BABYLON.GUI.Control.VERTICAL_ALIGNMENT_CENTER by default)\r\n     */\r\n    public set textVerticalAlignment(value: number) {\r\n        if (this._textVerticalAlignment === value) {\r\n            return;\r\n        }\r\n\r\n        this._textVerticalAlignment = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public set lineSpacing(value: string | number) {\r\n        if (this._lineSpacing.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets line spacing value\r\n     */\r\n    public get lineSpacing(): string | number {\r\n        return this._lineSpacing.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public get outlineWidth(): number {\r\n        return this._outlineWidth;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineWidth of the text to display\r\n     */\r\n    public set outlineWidth(value: number) {\r\n        if (this._outlineWidth === value) {\r\n            return;\r\n        }\r\n        this._outlineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public get outlineColor(): string {\r\n        return this._outlineColor;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets outlineColor of the text to display\r\n     */\r\n    public set outlineColor(value: string) {\r\n        if (this._outlineColor === value) {\r\n            return;\r\n        }\r\n        this._outlineColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new TextBlock object\r\n     * @param name defines the name of the control\r\n     * @param text defines the text to display (emptry string by default)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the name of the control\r\n         */\r\n        public name?: string,\r\n        text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    private _drawText(text: string, textWidth: number, y: number, context: CanvasRenderingContext2D): void {\r\n        var width = this._currentMeasure.width;\r\n        var x = 0;\r\n        switch (this._textHorizontalAlignment) {\r\n            case Control.HORIZONTAL_ALIGNMENT_LEFT:\r\n                x = 0\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_RIGHT:\r\n                x = width - textWidth;\r\n                break;\r\n            case Control.HORIZONTAL_ALIGNMENT_CENTER:\r\n                x = (width - textWidth) / 2;\r\n                break;\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this.outlineWidth) {\r\n            context.strokeText(text, this._currentMeasure.left + x, y);\r\n        }\r\n        context.fillText(text, this._currentMeasure.left + x, y);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Render lines\r\n            this._renderLines(context);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    protected _applyStates(context: CanvasRenderingContext2D): void {\r\n        super._applyStates(context);\r\n        if (this.outlineWidth) {\r\n            context.lineWidth = this.outlineWidth;\r\n            context.strokeStyle = this.outlineColor;\r\n        }\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._lines = this._breakLines(this._currentMeasure.width, context);\r\n        this.onLinesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    protected _breakLines(refWidth: number, context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var _lines = this.text.split(\"\\n\");\r\n\r\n        if (this._textWrapping === TextWrapping.Ellipsis && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLineEllipsis(_line, refWidth, context));\r\n            }\r\n        } else if (this._textWrapping === TextWrapping.WordWrap && !this._resizeToFit) {\r\n            for (var _line of _lines) {\r\n                lines.push(...this._parseLineWordWrap(_line, refWidth, context));\r\n            }\r\n        } else {\r\n            for (var _line of _lines) {\r\n                lines.push(this._parseLine(_line, context));\r\n            }\r\n        }\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _parseLine(line: string = '', context: CanvasRenderingContext2D): object {\r\n        return { text: line, width: context.measureText(line).width };\r\n    }\r\n\r\n    protected _parseLineEllipsis(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object {\r\n        var lineWidth = context.measureText(line).width;\r\n\r\n        if (lineWidth > width) {\r\n            line += '…';\r\n        }\r\n        while (line.length > 2 && lineWidth > width) {\r\n            line = line.slice(0, -2) + '…';\r\n            lineWidth = context.measureText(line).width;\r\n        }\r\n\r\n        return { text: line, width: lineWidth };\r\n    }\r\n\r\n    protected _parseLineWordWrap(line: string = '', width: number,\r\n        context: CanvasRenderingContext2D): object[] {\r\n        var lines = [];\r\n        var words = line.split(' ');\r\n        var lineWidth = 0;\r\n\r\n        for (var n = 0; n < words.length; n++) {\r\n            var testLine = n > 0 ? line + \" \" + words[n] : words[0];\r\n            var metrics = context.measureText(testLine);\r\n            var testWidth = metrics.width;\r\n            if (testWidth > width && n > 0) {\r\n                lines.push({ text: line, width: lineWidth });\r\n                line = words[n];\r\n                lineWidth = context.measureText(line).width;\r\n            }\r\n            else {\r\n                lineWidth = testWidth;\r\n                line = testLine;\r\n            }\r\n        }\r\n        lines.push({ text: line, width: lineWidth });\r\n\r\n        return lines;\r\n    }\r\n\r\n    protected _renderLines(context: CanvasRenderingContext2D): void {\r\n        var height = this._currentMeasure.height;\r\n\r\n        if (!this._fontOffset) {\r\n            this._fontOffset = Control._GetFontOffset(context.font);\r\n        }\r\n        var rootY = 0;\r\n        switch (this._textVerticalAlignment) {\r\n            case Control.VERTICAL_ALIGNMENT_TOP:\r\n                rootY = this._fontOffset.ascent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_BOTTOM:\r\n                rootY = height - this._fontOffset.height * (this._lines.length - 1) - this._fontOffset.descent;\r\n                break;\r\n            case Control.VERTICAL_ALIGNMENT_CENTER:\r\n                rootY = this._fontOffset.ascent + (height - this._fontOffset.height * this._lines.length) / 2;\r\n                break;\r\n        }\r\n\r\n        rootY += this._currentMeasure.top;\r\n\r\n        var maxLineWidth: number = 0;\r\n\r\n        for (let i = 0; i < this._lines.length; i++) {\r\n            const line = this._lines[i];\r\n\r\n            if (i !== 0 && this._lineSpacing.internalValue !== 0) {\r\n\r\n                if (this._lineSpacing.isPixel) {\r\n                    rootY += this._lineSpacing.getValue(this._host);\r\n                } else {\r\n                    rootY = rootY + (this._lineSpacing.getValue(this._host) * this._height.getValueInPixel(this._host, this._cachedParentMeasure.height));\r\n                }\r\n            }\r\n\r\n            this._drawText(line.text, line.width, rootY, context);\r\n            rootY += this._fontOffset.height;\r\n\r\n            if (line.width > maxLineWidth) maxLineWidth = line.width;\r\n        }\r\n\r\n        if (this._resizeToFit) {\r\n            this.width = this.paddingLeftInPixels + this.paddingRightInPixels + maxLineWidth + 'px';\r\n            this.height = this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * this._lines.length + 'px';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a width constraint applied on the text block, find the expected height\r\n     * @returns expected height\r\n     */\r\n    public computeExpectedHeight(): number {\r\n        if (this.text && this.widthInPixels) {\r\n            const context = document.createElement('canvas').getContext('2d');\r\n            if (context) {\r\n                this._applyStates(context);\r\n                if (!this._fontOffset) {\r\n                    this._fontOffset = Control._GetFontOffset(context.font);\r\n                }\r\n                const lines = this._lines ? this._lines : this._breakLines(\r\n                    this.widthInPixels - this.paddingLeftInPixels - this.paddingRightInPixels, context);\r\n                return this.paddingTopInPixels + this.paddingBottomInPixels + this._fontOffset.height * lines.length;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\nimport { Control } from \"./control\";\r\n\r\n/**\r\n * Class used to create a 2D stack panel container\r\n */\r\nexport class StackPanel extends Container {\r\n    private _isVertical = true;\r\n    private _manualWidth = false;\r\n    private _manualHeight = false;\r\n    private _doNotTrackManualChanges = false;\r\n    private _tempMeasureStore = Measure.Empty();\r\n\r\n    /** Gets or sets a boolean indicating if the stack panel is vertical or horizontal*/\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets panel width */\r\n    public set width(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualWidth = true;\r\n        }\r\n\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    /** Gets or sets panel height */\r\n    public set height(value: string | number) {\r\n        if (!this._doNotTrackManualChanges) {\r\n            this._manualHeight = true;\r\n        }\r\n\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    public get height(): string | number {\r\n        return this._height.toString(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new StackPanel\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"StackPanel\";\r\n    }\r\n\r\n    protected _preMeasure(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        var stackWidth = 0;\r\n        var stackHeight = 0;\r\n        for (var child of this._children) {\r\n            this._tempMeasureStore.copyFrom(child._currentMeasure);\r\n            child._currentMeasure.copyFrom(parentMeasure);\r\n            child._measure();\r\n\r\n            if (this._isVertical) {\r\n                child.top = stackHeight + \"px\";\r\n                if (!child._top.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._top.ignoreAdaptiveScaling = true;\r\n                stackHeight += child._currentMeasure.height;\r\n                if (child._currentMeasure.width > stackWidth) {\r\n                    stackWidth = child._currentMeasure.width;\r\n                }\r\n                child.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            } else {\r\n                child.left = stackWidth + \"px\";\r\n                if (!child._left.ignoreAdaptiveScaling) {\r\n                    child._markAsDirty();\r\n                }\r\n                child._left.ignoreAdaptiveScaling = true;\r\n                stackWidth += child._currentMeasure.width;\r\n                if (child._currentMeasure.height > stackHeight) {\r\n                    stackHeight = child._currentMeasure.height;\r\n                }\r\n                child.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            }\r\n\r\n            child._currentMeasure.copyFrom(this._tempMeasureStore);\r\n        }\r\n\r\n        this._doNotTrackManualChanges = true;\r\n\r\n        // Let stack panel width and height default to stackHeight and stackWidth if dimensions are not specified.\r\n        // User can now define their own height and width for stack panel.\r\n\r\n        let panelWidthChanged = false;\r\n        let panelHeightChanged = false;\r\n\r\n        let previousHeight = this.height;\r\n        let previousWidth = this.width;\r\n\r\n        if (!this._manualHeight) {\r\n            // do not specify height if strictly defined by user\r\n            this.height = stackHeight + \"px\";\r\n        }\r\n        if (!this._manualWidth) {\r\n            // do not specify width if strictly defined by user\r\n            this.width = stackWidth + \"px\";\r\n        }\r\n\r\n        panelWidthChanged = previousWidth !== this.width || !this._width.ignoreAdaptiveScaling;\r\n        panelHeightChanged = previousHeight !== this.height || !this._height.ignoreAdaptiveScaling;\r\n\r\n        if (panelHeightChanged) {\r\n            this._height.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        if (panelWidthChanged) {\r\n            this._width.ignoreAdaptiveScaling = true;\r\n        }\r\n\r\n        this._doNotTrackManualChanges = false;\r\n\r\n        if (panelWidthChanged || panelHeightChanged) {\r\n            this._markAllAsDirty();\r\n        }\r\n\r\n        super._preMeasure(parentMeasure, context);\r\n    }\r\n}  ","\r\n/**\r\n * Class used to store 2D control sizes\r\n */\r\nexport class Measure {\r\n    /**\r\n     * Creates a new measure\r\n     * @param left defines left coordinate\r\n     * @param top defines top coordinate \r\n     * @param width defines width dimension\r\n     * @param height defines height dimension\r\n     */\r\n    public constructor(\r\n        /** defines left coordinate */\r\n        public left: number,\r\n        /** defines top coordinate  */\r\n        public top: number,\r\n        /** defines width dimension  */\r\n        public width: number,\r\n        /** defines height dimension */\r\n        public height: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Copy from another measure\r\n     * @param other defines the other measure to copy from\r\n     */\r\n    public copyFrom(other: Measure): void {\r\n        this.left = other.left;\r\n        this.top = other.top;\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n    }\r\n\r\n    /**\r\n     * Check equality between this measure and another one\r\n     * @param other defines the other measures\r\n     * @returns true if both measures are equals\r\n     */\r\n    public isEqualsTo(other: Measure): boolean {\r\n\r\n        if (this.left !== other.left) {\r\n            return false;\r\n        }\r\n\r\n        if (this.top !== other.top) {\r\n            return false;\r\n        }\r\n\r\n        if (this.width !== other.width) {\r\n            return false;\r\n        }\r\n\r\n        if (this.height !== other.height) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an empty measure\r\n     * @returns a new measure\r\n     */\r\n    public static Empty(): Measure {\r\n        return new Measure(0, 0, 0, 0);\r\n    }\r\n}   ","import { Container3D } from \"./container3D\";\r\nimport { Tools, int, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Abstract class used to create a container panel deployed on the surface of a volume\r\n */\r\nexport abstract class VolumeBasedPanel extends Container3D {\r\n    private _columns = 10;\r\n    private _rows = 0;\r\n    private _rowThenColum = true;\r\n\r\n    private _orientation = Container3D.FACEORIGIN_ORIENTATION;\r\n\r\n    protected _cellWidth: number;\r\n    protected _cellHeight: number;\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0;\r\n\r\n    /**\r\n     * Gets or sets the orientation to apply to all controls (BABYLON.Container3D.FaceOriginReversedOrientation by default)\r\n    * | Value | Type                                | Description |\r\n    * | ----- | ----------------------------------- | ----------- |\r\n    * | 0     | UNSET_ORIENTATION                   |  Control rotation will remain unchanged |\r\n    * | 1     | FACEORIGIN_ORIENTATION              |  Control will rotate to make it look at sphere central axis |\r\n    * | 2     | FACEORIGINREVERSED_ORIENTATION      |  Control will rotate to make it look back at sphere central axis |\r\n    * | 3     | FACEFORWARD_ORIENTATION             |  Control will rotate to look at z axis (0, 0, 1) |\r\n    * | 4     | FACEFORWARDREVERSED_ORIENTATION     |  Control will rotate to look at negative z axis (0, 0, -1) |\r\n     */\r\n    public get orientation(): number {\r\n        return this._orientation;\r\n    }\r\n\r\n    public set orientation(value: number) {\r\n        if (this._orientation === value) {\r\n            return;\r\n        }\r\n\r\n        this._orientation = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the number of columns requested (10 by default). \r\n     * The panel will automatically compute the number of rows based on number of child controls. \r\n     */\r\n    public get columns(): int {\r\n        return this._columns;\r\n    }\r\n\r\n    public set columns(value: int) {\r\n        if (this._columns === value) {\r\n            return;\r\n        }\r\n\r\n        this._columns = value;\r\n        this._rowThenColum = true;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a the number of rows requested. \r\n     * The panel will automatically compute the number of columns based on number of child controls. \r\n     */\r\n    public get rows(): int {\r\n        return this._rows;\r\n    }\r\n\r\n    public set rows(value: int) {\r\n        if (this._rows === value) {\r\n            return;\r\n        }\r\n\r\n        this._rows = value;\r\n        this._rowThenColum = false;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates new VolumeBasedPanel\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        this._cellWidth = 0;\r\n        this._cellHeight = 0;\r\n        let rows = 0;\r\n        let columns = 0;\r\n        let controlCount = 0;\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            //   child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getHierarchyBoundingVectors();\r\n            let extendSize = Tmp.Vector3[0];\r\n            let diff = Tmp.Vector3[1];\r\n\r\n            boundingBox.max.subtractToRef(boundingBox.min, diff);\r\n\r\n            diff.scaleInPlace(0.5);\r\n\r\n            Vector3.TransformNormalToRef(diff, currentInverseWorld, extendSize);\r\n\r\n            this._cellWidth = Math.max(this._cellWidth, extendSize.x * 2);\r\n            this._cellHeight = Math.max(this._cellHeight, extendSize.y * 2);\r\n        }\r\n\r\n        this._cellWidth += this.margin * 2;\r\n        this._cellHeight += this.margin * 2;\r\n\r\n        // Arrange\r\n        if (this._rowThenColum) {\r\n            columns = this._columns;\r\n            rows = Math.ceil(controlCount / this._columns);\r\n        } else {\r\n            rows = this._rows;\r\n            columns = Math.ceil(controlCount / this._rows);\r\n        }\r\n\r\n        let startOffsetX = (columns * 0.5) * this._cellWidth;\r\n        let startOffsetY = (rows * 0.5) * this._cellHeight;\r\n        let nodeGrid = [];\r\n        let cellCounter = 0;\r\n\r\n        if (this._rowThenColum) {\r\n            for (var r = 0; r < rows; r++) {\r\n                for (var c = 0; c < columns; c++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (var c = 0; c < columns; c++) {\r\n                for (var r = 0; r < rows; r++) {\r\n                    nodeGrid.push(new Vector3((c * this._cellWidth) - startOffsetX + this._cellWidth / 2, (r * this._cellHeight) - startOffsetY + this._cellHeight / 2, 0));\r\n                    cellCounter++;\r\n                    if (cellCounter > controlCount) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        cellCounter = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            this._mapGridNode(child, nodeGrid[cellCounter]);\r\n\r\n            cellCounter++;\r\n        }\r\n\r\n        this._finalProcessing();\r\n    }\r\n\r\n    /** Child classes must implement this function to provide correct control positioning */\r\n    protected abstract _mapGridNode(control: Control3D, nodePosition: Vector3): void;\r\n\r\n    /** Child classes can implement this function to provide additional processing */\r\n    protected _finalProcessing() {\r\n\r\n    }\r\n}\r\n","export * from \"./button\";\r\nexport * from \"./checkbox\";\r\nexport * from \"./colorpicker\";\r\nexport * from \"./container\";\r\nexport * from \"./control\";\r\nexport * from \"./ellipse\";\r\nexport * from \"./grid\";\r\nexport * from \"./image\";\r\nexport * from \"./inputText\";\r\nexport * from \"./inputPassword\";\r\nexport * from \"./line\";\r\nexport * from \"./multiLine\";\r\nexport * from \"./radioButton\";\r\nexport * from \"./stackPanel\";\r\nexport * from \"./selector\";\r\nexport * from \"./textBlock\";\r\nexport * from \"./virtualKeyboard\";\r\nexport * from \"./slider\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./displayGrid\";\r\n\r\nexport * from \"./statics\";","import { Container } from \"./container\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create rectangle container */\r\nexport class Rectangle extends Container {\r\n    private _thickness = 1;\r\n    private _cornerRadius = 0;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the corner radius angle */\r\n    public get cornerRadius(): number {\r\n        return this._cornerRadius;\r\n    }\r\n\r\n    public set cornerRadius(value: number) {\r\n        if (value < 0) {\r\n            value = 0;\r\n        }\r\n\r\n        if (this._cornerRadius === value) {\r\n            return;\r\n        }\r\n\r\n        this._cornerRadius = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Rectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Rectangle\";\r\n    }\r\n    \r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.fill();\r\n            } else {\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n        }\r\n\r\n        if (this._thickness) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            if (this._cornerRadius) {\r\n                this._drawRoundedRect(context, this._thickness / 2);\r\n                context.stroke();\r\n            } else {\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    private _drawRoundedRect(context: CanvasRenderingContext2D, offset: number = 0): void {\r\n        var x = this._currentMeasure.left + offset;\r\n        var y = this._currentMeasure.top + offset;\r\n        var width = this._currentMeasure.width - offset * 2;\r\n        var height = this._currentMeasure.height - offset * 2;\r\n\r\n        var radius = Math.min(height / 2 - 2, Math.min(width / 2 - 2, this._cornerRadius));\r\n\r\n        context.beginPath();\r\n        context.moveTo(x + radius, y);\r\n        context.lineTo(x + width - radius, y);\r\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n        context.lineTo(x + width, y + height - radius);\r\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\r\n        context.lineTo(x + radius, y + height);\r\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\r\n        context.lineTo(x, y + radius);\r\n        context.quadraticCurveTo(x, y, x + radius, y);\r\n        context.closePath();\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n        if (this._cornerRadius) {\r\n            this._drawRoundedRect(context, this._thickness);\r\n            context.clip();\r\n        }\r\n    }\r\n}    ","import { Control } from \"./control\";\r\nimport { Nullable, Tools } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create 2D images\r\n */\r\nexport class Image extends Control {\r\n    private _domImage: HTMLImageElement;\r\n    private _imageWidth: number;\r\n    private _imageHeight: number;\r\n    private _loaded = false;\r\n    private _stretch = Image.STRETCH_FILL;\r\n    private _source: Nullable<string>;\r\n    private _autoScale = false;\r\n\r\n    private _sourceLeft = 0;\r\n    private _sourceTop = 0;\r\n    private _sourceWidth = 0;\r\n    private _sourceHeight = 0;\r\n\r\n    private _cellWidth: number = 0;\r\n    private _cellHeight: number = 0;\r\n    private _cellId: number = -1;\r\n\r\n    /**\r\n     * Gets or sets the left coordinate in the source image\r\n     */\r\n    public get sourceLeft(): number {\r\n        return this._sourceLeft;\r\n    }\r\n\r\n    public set sourceLeft(value: number) {\r\n        if (this._sourceLeft === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceLeft = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the top coordinate in the source image\r\n     */\r\n    public get sourceTop(): number {\r\n        return this._sourceTop;\r\n    }\r\n\r\n    public set sourceTop(value: number) {\r\n        if (this._sourceTop === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTop = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the width to capture in the source image\r\n     */\r\n    public get sourceWidth(): number {\r\n        return this._sourceWidth;\r\n    }\r\n\r\n    public set sourceWidth(value: number) {\r\n        if (this._sourceWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the height to capture in the source image\r\n     */\r\n    public get sourceHeight(): number {\r\n        return this._sourceHeight;\r\n    }\r\n\r\n    public set sourceHeight(value: number) {\r\n        if (this._sourceHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._sourceHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets a boolean indicating if the image can force its container to adapt its size \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    public get autoScale(): boolean {\r\n        return this._autoScale;\r\n    }\r\n\r\n    public set autoScale(value: boolean) {\r\n        if (this._autoScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoScale = value;\r\n\r\n        if (value && this._loaded) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the streching mode used by the image */\r\n    public get stretch(): number {\r\n        return this._stretch;\r\n    }\r\n\r\n    public set stretch(value: number) {\r\n        if (this._stretch === value) {\r\n            return;\r\n        }\r\n\r\n        this._stretch = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the internal DOM image used to render the control\r\n     */\r\n    public set domImage(value: HTMLImageElement) {\r\n        this._domImage = value;\r\n        this._loaded = false;\r\n\r\n        if (this._domImage.width) {\r\n            this._onImageLoaded();\r\n        } else {\r\n            this._domImage.onload = () => {\r\n                this._onImageLoaded();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get domImage(): HTMLImageElement {\r\n        return this._domImage;\r\n    }\r\n\r\n    private _onImageLoaded(): void {\r\n        this._imageWidth = this._domImage.width;\r\n        this._imageHeight = this._domImage.height;\r\n        this._loaded = true;\r\n\r\n        if (this._autoScale) {\r\n            this.synchronizeSizeWithContent();\r\n        }\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets image source url\r\n     */\r\n    public set source(value: Nullable<string>) {\r\n        if (this._source === value) {\r\n            return;\r\n        }\r\n\r\n        this._loaded = false;\r\n        this._source = value;\r\n\r\n        this._domImage = document.createElement(\"img\");\r\n\r\n        this._domImage.onload = () => {\r\n            this._onImageLoaded();\r\n        }\r\n        if (value) {\r\n            Tools.SetCorsBehavior(value, this._domImage);\r\n            this._domImage.src = value;\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell width to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n    set cellWidth(value: number) {\r\n        if (this._cellWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell height to use when animation sheet is enabled \r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n    set cellHeight(value: number) {\r\n        if (this._cellHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellHeight = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** \r\n     * Gets or sets the cell id to use (this will turn on the animation sheet mode)\r\n     * @see http://doc.babylonjs.com/how_to/gui#image\r\n     */\r\n    get cellId(): number {\r\n        return this._cellId;\r\n    }\r\n    set cellId(value: number) {\r\n        if (this._cellId === value) {\r\n            return;\r\n        }\r\n\r\n        this._cellId = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Image\r\n     * @param name defines the control name\r\n     * @param url defines the image url\r\n     */\r\n    constructor(public name?: string, url: Nullable<string> = null) {\r\n        super(name);\r\n\r\n        this.source = url;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    /** Force the control to synchronize with its content */\r\n    public synchronizeSizeWithContent() {\r\n        if (!this._loaded) {\r\n            return;\r\n        }\r\n\r\n        this.width = this._domImage.width + \"px\";\r\n        this.height = this._domImage.height + \"px\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        let x, y, width, height;\r\n        if (this.cellId == -1) {\r\n            x = this._sourceLeft;\r\n            y = this._sourceTop;\r\n\r\n            width = this._sourceWidth ? this._sourceWidth : this._imageWidth;\r\n            height = this._sourceHeight ? this._sourceHeight : this._imageHeight;\r\n        }\r\n        else {\r\n            let rowCount = this._domImage.naturalWidth / this.cellWidth;\r\n            let column = (this.cellId / rowCount) >> 0;\r\n            let row = this.cellId % rowCount;\r\n\r\n            x = this.cellWidth * row;\r\n            y = this.cellHeight * column;\r\n            width = this.cellWidth;\r\n            height = this.cellHeight;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            if (this._loaded) {\r\n                switch (this._stretch) {\r\n                    case Image.STRETCH_NONE:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_FILL:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        break;\r\n                    case Image.STRETCH_UNIFORM:\r\n                        var hRatio = this._currentMeasure.width / width;\r\n                        var vRatio = this._currentMeasure.height / height;\r\n                        var ratio = Math.min(hRatio, vRatio);\r\n                        var centerX = (this._currentMeasure.width - width * ratio) / 2;\r\n                        var centerY = (this._currentMeasure.height - height * ratio) / 2;\r\n\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left + centerX, this._currentMeasure.top + centerY, width * ratio, height * ratio);\r\n                        break;\r\n                    case Image.STRETCH_EXTEND:\r\n                        context.drawImage(this._domImage, x, y, width, height,\r\n                            this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                        if (this._autoScale) {\r\n                            this.synchronizeSizeWithContent();\r\n                        }\r\n                        if (this._root && this._root.parent) { // Will update root size if root is not the top root\r\n                            this._root.width = this.width;\r\n                            this._root.height = this.height;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Static\r\n    /** STRETCH_NONE */\r\n    public static readonly STRETCH_NONE = 0;\r\n    /** STRETCH_FILL */\r\n    public static readonly STRETCH_FILL = 1;\r\n    /** STRETCH_UNIFORM */\r\n    public static readonly STRETCH_UNIFORM = 2;\r\n    /** STRETCH_EXTEND */\r\n    public static readonly STRETCH_EXTEND = 3;\r\n}","import { DynamicTexture, Nullable, Observer, Camera, Engine, KeyboardInfoPre, PointerInfoPre, PointerInfo, Layer, Viewport, Scene, Texture, KeyboardEventTypes, Vector3, Matrix, Vector2, Tools, PointerEventTypes, AbstractMesh, StandardMaterial, Color3 } from \"babylonjs\";\r\nimport { Container } from \"./controls/container\";\r\nimport { Control } from \"./controls/control\";\r\nimport { Style } from \"./style\";\r\nimport { Measure } from \"./measure\";\r\n\r\n/**\r\n * Interface used to define a control that can receive focus\r\n */\r\nexport interface IFocusableControl {\r\n    /**\r\n     * Function called when the control receives the focus\r\n     */\r\n    onFocus(): void;\r\n    /**\r\n     * Function called when the control loses the focus\r\n     */\r\n    onBlur(): void;\r\n    /**\r\n     * Function called to let the control handle keyboard events\r\n     * @param evt defines the current keyboard event\r\n     */\r\n    processKeyboard(evt: KeyboardEvent): void;\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    keepsFocusWith(): Nullable<Control[]>;\r\n}\r\n\r\n/**\r\n * Class used to create texture to support 2D GUI elements\r\n * @see http://doc.babylonjs.com/how_to/gui\r\n */\r\nexport class AdvancedDynamicTexture extends DynamicTexture {\r\n    private _isDirty = false;\r\n    private _renderObserver: Nullable<Observer<Camera>>;\r\n    private _resizeObserver: Nullable<Observer<Engine>>;\r\n    private _preKeyboardObserver: Nullable<Observer<KeyboardInfoPre>>;\r\n    private _pointerMoveObserver: Nullable<Observer<PointerInfoPre>>;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _canvasPointerOutObserver: Nullable<Observer<PointerEvent>>;\r\n    private _background: string;\r\n    /** @hidden */\r\n    public _rootContainer = new Container(\"root\");\r\n    /** @hidden */\r\n    public _lastPickedControl: Control;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _capturingControl: { [pointerId: number]: Control } = {};\r\n    /** @hidden */\r\n    public _shouldBlockPointer: boolean;\r\n    /** @hidden */\r\n    public _layerToDispose: Nullable<Layer>;\r\n    /** @hidden */\r\n    public _linkedControls = new Array<Control>();\r\n    private _isFullscreen = false;\r\n    private _fullscreenViewport = new Viewport(0, 0, 1, 1);\r\n    private _idealWidth = 0;\r\n    private _idealHeight = 0;\r\n    private _useSmallestIdeal: boolean = false;\r\n    private _renderAtIdealSize = false;\r\n    private _focusedControl: Nullable<IFocusableControl>;\r\n    private _blockNextFocusCheck = false;\r\n    private _renderScale = 1;\r\n    private _rootCanvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * Gets or sets a boolean defining if alpha is stored as premultiplied\r\n     */\r\n    public premulAlpha = false;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale rendering size (2 means that the texture will be twice bigger).\r\n     * Useful when you want more antialiasing\r\n     */\r\n    public get renderScale(): number {\r\n        return this._renderScale;\r\n    }\r\n\r\n    public set renderScale(value: number) {\r\n        if (value === this._renderScale) {\r\n            return;\r\n        }\r\n\r\n        this._renderScale = value;\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this.markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal width used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealWidth(): number {\r\n        return this._idealWidth;\r\n    }\r\n\r\n    public set idealWidth(value: number) {\r\n        if (this._idealWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealWidth = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the ideal height used to design controls.\r\n     * The GUI will then rescale everything accordingly\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get idealHeight(): number {\r\n        return this._idealHeight;\r\n    }\r\n\r\n    public set idealHeight(value: number) {\r\n        if (this._idealHeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._idealHeight = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the smallest ideal value must be used if idealWidth and idealHeight are both set\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get useSmallestIdeal(): boolean {\r\n        return this._useSmallestIdeal;\r\n    }\r\n\r\n    public set useSmallestIdeal(value: boolean) {\r\n        if (this._useSmallestIdeal === value) {\r\n            return;\r\n        }\r\n\r\n        this._useSmallestIdeal = value;\r\n        this.markAsDirty();\r\n        this._rootContainer._markAllAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if adaptive scaling must be used\r\n     * @see http://doc.babylonjs.com/how_to/gui#adaptive-scaling\r\n     */\r\n    public get renderAtIdealSize(): boolean {\r\n        return this._renderAtIdealSize;\r\n    }\r\n\r\n    public set renderAtIdealSize(value: boolean) {\r\n        if (this._renderAtIdealSize === value) {\r\n            return;\r\n        }\r\n\r\n        this._renderAtIdealSize = value;\r\n        this._onResize();\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying layer used to render the texture when in fullscreen mode\r\n     */\r\n    public get layer(): Nullable<Layer> {\r\n        return this._layerToDispose;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container control\r\n     */\r\n    public get rootContainer(): Container {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current focused control\r\n     */\r\n    public get focusedControl(): Nullable<IFocusableControl> {\r\n        return this._focusedControl;\r\n    }\r\n\r\n    public set focusedControl(control: Nullable<IFocusableControl>) {\r\n        if (this._focusedControl == control) {\r\n            return;\r\n        }\r\n\r\n        if (this._focusedControl) {\r\n            this._focusedControl.onBlur();\r\n        }\r\n\r\n        if (control) {\r\n            control.onFocus();\r\n        }\r\n\r\n        this._focusedControl = control;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the texture must be rendered in background or foreground when in fullscreen mode\r\n     */\r\n    public get isForeground(): boolean {\r\n        if (!this.layer) {\r\n            return true;\r\n        }\r\n        return (!this.layer.isBackground);\r\n    }\r\n\r\n    public set isForeground(value: boolean) {\r\n        if (!this.layer) {\r\n            return;\r\n        }\r\n        if (this.layer.isBackground === !value) {\r\n            return;\r\n        }\r\n        this.layer.isBackground = !value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture\r\n     * @param name defines the name of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mipmaps must be generated (false by default)\r\n     * @param samplingMode defines the texture sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n     */\r\n    constructor(name: string, width = 0, height = 0, scene: Nullable<Scene>, generateMipMaps = false, samplingMode = Texture.NEAREST_SAMPLINGMODE) {\r\n        super(name, { width: width, height: height }, scene, generateMipMaps, samplingMode, Engine.TEXTUREFORMAT_RGBA);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene || !this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = scene.getEngine()!.getRenderingCanvas()!;\r\n\r\n        this._renderObserver = scene.onBeforeCameraRenderObservable.add((camera: Camera) => this._checkUpdate(camera));\r\n        this._preKeyboardObserver = scene.onPreKeyboardObservable.add(info => {\r\n            if (!this._focusedControl) {\r\n                return;\r\n            }\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                this._focusedControl.processKeyboard(info.event);\r\n            }\r\n\r\n            info.skipOnPointerObservable = true;\r\n        });\r\n\r\n        this._rootContainer._link(null, this);\r\n\r\n        this.hasAlpha = true;\r\n\r\n        if (!width || !height) {\r\n            this._resizeObserver = scene.getEngine().onResizeObservable.add(() => this._onResize());\r\n            this._onResize();\r\n        }\r\n\r\n        this._texture.isReady = true;\r\n    }\r\n\r\n    /**\r\n     * Function used to execute a function on all controls\r\n     * @param func defines the function to execute\r\n     * @param container defines the container where controls belong. If null the root container will be used\r\n     */\r\n    public executeOnAllControls(func: (control: Control) => void, container?: Container) {\r\n        if (!container) {\r\n            container = this._rootContainer;\r\n        }\r\n\r\n        func(container);\r\n\r\n        for (var child of container.children) {\r\n            if ((<any>child).children) {\r\n                this.executeOnAllControls(func, (<Container>child));\r\n                continue;\r\n            }\r\n            func(child);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the texture as dirty forcing a complete update\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Helper function used to create a new style\r\n     * @returns a new style\r\n     * @see http://doc.babylonjs.com/how_to/gui#styles\r\n     */\r\n    public createStyle(): Style {\r\n        return new Style(this);\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the root container\r\n     * @param control defines the control to add\r\n     * @returns the current texture\r\n     */\r\n    public addControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.addControl(control);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root container\r\n     * @param control defines the control to remove\r\n     * @returns the current texture\r\n     */\r\n    public removeControl(control: Control): AdvancedDynamicTexture {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._rootCanvas = null;\r\n\r\n        scene.onBeforeCameraRenderObservable.remove(this._renderObserver);\r\n\r\n        if (this._resizeObserver) {\r\n            scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n        }\r\n\r\n        if (this._pointerMoveObserver) {\r\n            scene.onPrePointerObservable.remove(this._pointerMoveObserver);\r\n        }\r\n\r\n        if (this._pointerObserver) {\r\n            scene.onPointerObservable.remove(this._pointerObserver);\r\n        }\r\n\r\n        if (this._preKeyboardObserver) {\r\n            scene.onPreKeyboardObservable.remove(this._preKeyboardObserver);\r\n        }\r\n\r\n        if (this._canvasPointerOutObserver) {\r\n            scene.getEngine().onCanvasPointerOutObservable.remove(this._canvasPointerOutObserver);\r\n        }\r\n\r\n        if (this._layerToDispose) {\r\n            this._layerToDispose.texture = null;\r\n            this._layerToDispose.dispose();\r\n            this._layerToDispose = null;\r\n        }\r\n\r\n        this._rootContainer.dispose();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    private _onResize(): void {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        // Check size\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n        var renderWidth = engine.getRenderWidth() * this._renderScale;\r\n        var renderHeight = engine.getRenderHeight() * this._renderScale;\r\n\r\n        if (this._renderAtIdealSize) {\r\n            if (this._idealWidth) {\r\n                renderHeight = (renderHeight * this._idealWidth) / renderWidth;\r\n                renderWidth = this._idealWidth;\r\n            } else if (this._idealHeight) {\r\n                renderWidth = (renderWidth * this._idealHeight) / renderHeight;\r\n                renderHeight = this._idealHeight;\r\n            }\r\n        }\r\n\r\n        if (textureSize.width !== renderWidth || textureSize.height !== renderHeight) {\r\n            this.scaleTo(renderWidth, renderHeight);\r\n\r\n            this.markAsDirty();\r\n\r\n            if (this._idealWidth || this._idealHeight) {\r\n                this._rootContainer._markAllAsDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGlobalViewport(scene: Scene): Viewport {\r\n        var engine = scene.getEngine();\r\n        return this._fullscreenViewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    /**\r\n     * Get screen coordinates for a vector3\r\n     * @param position defines the position to project\r\n     * @param worldMatrix defines the world matrix to use\r\n     * @returns the projected position\r\n     */\r\n    public getProjectedPosition(position: Vector3, worldMatrix: Matrix): Vector2 {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var globalViewport = this._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, worldMatrix, scene.getTransformMatrix(), globalViewport);\r\n\r\n        projectedPosition.scaleInPlace(this.renderScale);\r\n\r\n        return new Vector2(projectedPosition.x, projectedPosition.y);\r\n    }\r\n\r\n    private _checkUpdate(camera: Camera): void {\r\n        if (this._layerToDispose) {\r\n            if ((camera.layerMask & this._layerToDispose.layerMask) === 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._isFullscreen && this._linkedControls.length) {\r\n            var scene = this.getScene();\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            var globalViewport = this._getGlobalViewport(scene);\r\n\r\n            for (var control of this._linkedControls) {\r\n                if (!control.isVisible) {\r\n                    continue;\r\n                }\r\n\r\n                var mesh = control._linkedMesh;\r\n\r\n                if (!mesh || mesh.isDisposed()) {\r\n                    Tools.SetImmediate(() => {\r\n                        control.linkWithMesh(null);\r\n                    });\r\n\r\n                    continue;\r\n                }\r\n\r\n                var position = mesh.getBoundingInfo().boundingSphere.center;\r\n                var projectedPosition = Vector3.Project(position, mesh.getWorldMatrix(), scene.getTransformMatrix(), globalViewport);\r\n\r\n                if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n                    control.notRenderable = true;\r\n                    continue;\r\n                }\r\n                control.notRenderable = false;\r\n                // Account for RenderScale.\r\n                projectedPosition.scaleInPlace(this.renderScale);\r\n                control._moveToProjectedPosition(projectedPosition);\r\n            }\r\n        }\r\n\r\n        if (!this._isDirty && !this._rootContainer.isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = false;\r\n\r\n        this._render();\r\n        this.update(true, this.premulAlpha);\r\n    }\r\n\r\n    private _render(): void {\r\n        var textureSize = this.getSize();\r\n        var renderWidth = textureSize.width;\r\n        var renderHeight = textureSize.height;\r\n\r\n        // Clear\r\n        var context = this.getContext();\r\n        context.clearRect(0, 0, renderWidth, renderHeight);\r\n        if (this._background) {\r\n            context.save();\r\n            context.fillStyle = this._background;\r\n            context.fillRect(0, 0, renderWidth, renderHeight);\r\n            context.restore();\r\n        }\r\n\r\n        // Render\r\n        context.font = \"18px Arial\";\r\n        context.strokeStyle = \"white\";\r\n        var measure = new Measure(0, 0, renderWidth, renderHeight);\r\n        this._rootContainer._draw(measure, context);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _changeCursor(cursor: string) {\r\n        if (this._rootCanvas) {\r\n            this._rootCanvas.style.cursor = cursor;\r\n        }\r\n    }\r\n\r\n    private _doPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): void {\r\n        var scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        var textureSize = this.getSize();\r\n\r\n        if (this._isFullscreen) {\r\n            x = x * (textureSize.width / engine.getRenderWidth());\r\n            y = y * (textureSize.height / engine.getRenderHeight());\r\n        }\r\n\r\n        if (this._capturingControl[pointerId]) {\r\n            this._capturingControl[pointerId]._processObservables(type, x, y, pointerId, buttonIndex);\r\n            return;\r\n        }\r\n\r\n        if (!this._rootContainer._processPicking(x, y, type, pointerId, buttonIndex)) {\r\n            this._changeCursor(\"\");\r\n            if (type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        this._manageFocus();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemovalFromList(list: { [pointerId: number]: Control }, control: Control) {\r\n        for (var pointerId in list) {\r\n            if (!list.hasOwnProperty(pointerId)) {\r\n                continue;\r\n            }\r\n\r\n            var lastControlOver = list[pointerId];\r\n            if (lastControlOver === control) {\r\n                delete list[pointerId];\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cleanControlAfterRemoval(control: Control) {\r\n        this._cleanControlAfterRemovalFromList(this._lastControlDown, control);\r\n        this._cleanControlAfterRemovalFromList(this._lastControlOver, control);\r\n    }\r\n\r\n    /** Attach to all scene events required to support pointer events */\r\n    public attach(): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this._pointerMoveObserver = scene.onPrePointerObservable.add((pi, state) => {\r\n            if (scene!.isPointerCaptured((<PointerEvent>(pi.event)).pointerId)) {\r\n                return;\r\n            }\r\n\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n\r\n            if (!scene) {\r\n                return;\r\n            }\r\n\r\n            let camera = scene.cameraToUseForPointers || scene.activeCamera;\r\n\r\n            if (!camera) {\r\n                return;\r\n            }\r\n            let engine = scene.getEngine();\r\n            let viewport = camera.viewport;\r\n            let x = (scene.pointerX / engine.getHardwareScalingLevel() - viewport.x * engine.getRenderWidth()) / viewport.width;\r\n            let y = (scene.pointerY / engine.getHardwareScalingLevel() - viewport.y * engine.getRenderHeight()) / viewport.height;\r\n\r\n            this._shouldBlockPointer = false;\r\n            // Do picking modifies _shouldBlockPointer\r\n            this._doPicking(x, y, pi.type, (pi.event as PointerEvent).pointerId || 0, pi.event.button);\r\n            \r\n            // Avoid overwriting a true skipOnPointerObservable to false \r\n            if(this._shouldBlockPointer){\r\n                pi.skipOnPointerObservable = this._shouldBlockPointer;\r\n            }\r\n        });\r\n\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Connect the texture to a hosting mesh to enable interactions\r\n     * @param mesh defines the mesh to attach to\r\n     * @param supportPointerMove defines a boolean indicating if pointer move events must be catched as well\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh, supportPointerMove = true): void {\r\n        var scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._pointerObserver = scene.onPointerObservable.add((pi, state) => {\r\n            if (pi.type !== PointerEventTypes.POINTERMOVE\r\n                && pi.type !== PointerEventTypes.POINTERUP\r\n                && pi.type !== PointerEventTypes.POINTERDOWN) {\r\n                return;\r\n            }\r\n            var pointerId = (pi.event as PointerEvent).pointerId || 0;\r\n            if (pi.pickInfo && pi.pickInfo.hit && pi.pickInfo.pickedMesh === mesh) {\r\n                var uv = pi.pickInfo.getTextureCoordinates();\r\n\r\n                if (uv) {\r\n                    let size = this.getSize();\r\n\r\n                    this._doPicking(uv.x * size.width, (1.0 - uv.y) * size.height, pi.type, pointerId, pi.event.button);\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERUP) {\r\n                if (this._lastControlDown[pointerId]) {\r\n                    this._lastControlDown[pointerId]._forcePointerUp(pointerId);\r\n                }\r\n                delete this._lastControlDown[pointerId];\r\n\r\n                if (this.focusedControl) {\r\n                    const friendlyControls = this.focusedControl.keepsFocusWith();\r\n                    \r\n                    let canMoveFocus = true;\r\n\r\n                    if (friendlyControls) {\r\n                        for (var control of friendlyControls) {\r\n                            // Same host, no need to keep the focus\r\n                            if (this === control._host) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Different hosts\r\n                            const otherHost = control._host;\r\n\r\n                            if (otherHost._lastControlOver[pointerId] && otherHost._lastControlOver[pointerId].isAscendant(control)) {\r\n                                canMoveFocus = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (canMoveFocus) {\r\n                        this.focusedControl = null;\r\n                    }\r\n                }\r\n            } else if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        });\r\n\r\n        mesh.enablePointerMoveEvents = supportPointerMove;\r\n        this._attachToOnPointerOut(scene);\r\n    }\r\n\r\n    /**\r\n     * Move the focus to a specific control\r\n     * @param control defines the control which will receive the focus\r\n     */\r\n    public moveFocusToControl(control: IFocusableControl): void {\r\n        this.focusedControl = control;\r\n        this._lastPickedControl = <any>control;\r\n        this._blockNextFocusCheck = true;\r\n    }\r\n\r\n    private _manageFocus(): void {\r\n        if (this._blockNextFocusCheck) {\r\n            this._blockNextFocusCheck = false;\r\n            this._lastPickedControl = <any>this._focusedControl;\r\n            return;\r\n        }\r\n\r\n        // Focus management\r\n        if (this._focusedControl) {\r\n            if (this._focusedControl !== (<any>this._lastPickedControl)) {\r\n                if (this._lastPickedControl.isFocusInvisible) {\r\n                    return;\r\n                }\r\n\r\n                this.focusedControl = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _attachToOnPointerOut(scene: Scene): void {\r\n        this._canvasPointerOutObserver = scene.getEngine().onCanvasPointerOutObservable.add((pointerEvent) => {\r\n            if (this._lastControlOver[pointerEvent.pointerId]) {\r\n                this._lastControlOver[pointerEvent.pointerId]._onPointerOut(this._lastControlOver[pointerEvent.pointerId]);\r\n            }\r\n            delete this._lastControlOver[pointerEvent.pointerId];\r\n\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId]._forcePointerUp();\r\n            }\r\n            delete this._lastControlDown[pointerEvent.pointerId];\r\n        });\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in projected mode (ie. attached to a mesh)\r\n     * @param mesh defines the mesh which will receive the texture\r\n     * @param width defines the texture width (1024 by default)\r\n     * @param height defines the texture height (1024 by default)\r\n     * @param supportPointerMove defines a boolean indicating if the texture must capture move events (true by default)\r\n     * @param onlyAlphaTesting defines a boolean indicating that alpha blending will not be used (only alpha testing) (false by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateForMesh(mesh: AbstractMesh, width = 1024, height = 1024, supportPointerMove = true, onlyAlphaTesting = false): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(mesh.name + \" AdvancedDynamicTexture\", width, height, mesh.getScene(), true, Texture.TRILINEAR_SAMPLINGMODE);\r\n\r\n        var material = new StandardMaterial(\"AdvancedDynamicTextureMaterial\", mesh.getScene());\r\n        material.backFaceCulling = false;\r\n        material.diffuseColor = Color3.Black();\r\n        material.specularColor = Color3.Black();\r\n\r\n        if (onlyAlphaTesting) {\r\n            material.diffuseTexture = result;\r\n            material.emissiveTexture = result;\r\n            result.hasAlpha = true;    \r\n        } else {\r\n            material.emissiveTexture = result;\r\n            material.opacityTexture = result;   \r\n        }\r\n\r\n        mesh.material = material;\r\n\r\n        result.attachToMesh(mesh, supportPointerMove);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdvancedDynamicTexture in fullscreen mode.\r\n     * In this mode the texture will rely on a layer for its rendering.\r\n     * This allows it to be treated like any other layer.\r\n     * As such, if you have a multi camera setup, you can set the layerMask on the GUI as well.\r\n     * LayerMask is set through advancedTexture.layer.layerMask\r\n     * @param name defines name for the texture\r\n     * @param foreground defines a boolean indicating if the texture must be rendered in foreground (default is true)\r\n     * @param scene defines the hsoting scene\r\n     * @param sampling defines the texture sampling mode (Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @returns a new AdvancedDynamicTexture\r\n     */\r\n    public static CreateFullscreenUI(name: string, foreground: boolean = true, scene: Nullable<Scene> = null, sampling = Texture.BILINEAR_SAMPLINGMODE): AdvancedDynamicTexture {\r\n        var result = new AdvancedDynamicTexture(name, 0, 0, scene, false, sampling);\r\n\r\n        // Display\r\n        var layer = new Layer(name + \"_layer\", null, scene, !foreground);\r\n        layer.texture = result;\r\n\r\n        result._layerToDispose = layer;\r\n        result._isFullscreen = true;\r\n\r\n        // Attach\r\n        result.attach();\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { IDisposable, IBehaviorAware, Nullable, TransformNode, Vector3, Observable, Behavior, AbstractMesh, Scene, PointerEventTypes } from \"babylonjs\";\r\nimport { GUI3DManager } from \"../gui3DManager\";\r\nimport { Vector3WithInfo } from \"../vector3WithInfo\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used as base class for controls\r\n */\r\nexport class Control3D implements IDisposable, IBehaviorAware<Control3D> {\r\n    /** @hidden */\r\n    public _host: GUI3DManager;\r\n    private _node: Nullable<TransformNode>;\r\n    private _downCount = 0;\r\n    private _enterCount = -1;\r\n    private _downPointerIds: { [id: number]: boolean } = {};\r\n    private _isVisible = true;\r\n\r\n    /** Gets or sets the control position  in world space */\r\n    public get position(): Vector3 {\r\n        if (!this._node) {\r\n            return Vector3.Zero();\r\n        }\r\n\r\n        return this._node.position;\r\n    }\r\n\r\n    public set position(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.position = value;;\r\n    }\r\n\r\n    /** Gets or sets the control scaling  in world space */\r\n    public get scaling(): Vector3 {\r\n        if (!this._node) {\r\n            return new Vector3(1, 1, 1);\r\n        }\r\n\r\n        return this._node.scaling;\r\n    }\r\n\r\n    public set scaling(value: Vector3) {\r\n        if (!this._node) {\r\n            return;\r\n        }\r\n\r\n        this._node.scaling = value;;\r\n    }\r\n\r\n    /** Callback used to start pointer enter animation */\r\n    public pointerEnterAnimation: () => void;\r\n    /** Callback used to start pointer out animation */\r\n    public pointerOutAnimation: () => void;\r\n    /** Callback used to start pointer down animation */\r\n    public pointerDownAnimation: () => void;\r\n    /** Callback used to start pointer up animation */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n    * An event triggered when the pointer move over the control\r\n    */\r\n    public onPointerMoveObservable = new Observable<Vector3>();\r\n\r\n    /**\r\n     * An event triggered when the pointer move out of the control\r\n     */\r\n    public onPointerOutObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * An event triggered when the pointer taps the control\r\n     */\r\n    public onPointerDownObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer is up\r\n     */\r\n    public onPointerUpObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when a control is clicked on (with a mouse)\r\n     */\r\n    public onPointerClickObservable = new Observable<Vector3WithInfo>();\r\n\r\n    /**\r\n     * An event triggered when pointer enters the control\r\n     */\r\n    public onPointerEnterObservable = new Observable<Control3D>();\r\n\r\n    /**\r\n     * Gets or sets the parent container\r\n     */\r\n    public parent: Nullable<Container3D>;\r\n\r\n    // Behaviors\r\n    private _behaviors = new Array<Behavior<Control3D>>();\r\n\r\n    /**\r\n     * Gets the list of attached behaviors\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     */\r\n    public get behaviors(): Behavior<Control3D>[] {\r\n        return this._behaviors;\r\n    }\r\n\r\n    /**\r\n     * Attach a behavior to the control\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public addBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index !== -1) {\r\n            return this;\r\n        }\r\n\r\n        behavior.init();\r\n        let scene = this._host.scene;\r\n        if (scene.isLoading) {\r\n            // We defer the attach when the scene will be loaded\r\n            scene.onDataLoadedObservable.addOnce(() => {\r\n                behavior.attach(this);\r\n            });\r\n        } else {\r\n            behavior.attach(this);\r\n        }\r\n        this._behaviors.push(behavior);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an attached behavior\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @param behavior defines the behavior to attach\r\n     * @returns the current control\r\n     */\r\n    public removeBehavior(behavior: Behavior<Control3D>): Control3D {\r\n        var index = this._behaviors.indexOf(behavior);\r\n\r\n        if (index === -1) {\r\n            return this;\r\n        }\r\n\r\n        this._behaviors[index].detach();\r\n        this._behaviors.splice(index, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets an attached behavior by name\r\n     * @param name defines the name of the behavior to look for\r\n     * @see http://doc.babylonjs.com/features/behaviour\r\n     * @returns null if behavior was not found else the requested behavior\r\n     */\r\n    public getBehaviorByName(name: string): Nullable<Behavior<Control3D>> {\r\n        for (var behavior of this._behaviors) {\r\n            if (behavior.name === name) {\r\n                return behavior;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control is visible */\r\n    public get isVisible(): boolean {\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        if (this._isVisible === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVisible = value;\r\n\r\n        let mesh = this.mesh;\r\n        if (mesh) {\r\n            mesh.setEnabled(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new control\r\n     * @param name defines the control name\r\n     */\r\n    constructor(\r\n        /** Defines the control name */\r\n        public name?: string) {\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the class name\r\n     */\r\n    public get typeName(): string {\r\n        return this._getTypeName();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Control3D\";\r\n    }\r\n\r\n    /**\r\n     * Gets the transform node used by this control\r\n     */\r\n    public get node(): Nullable<TransformNode> {\r\n        return this._node;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh used to render this control\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        if (this._node instanceof AbstractMesh) {\r\n            return this._node as AbstractMesh;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Link the control as child of the given node\r\n     * @param node defines the node to link to. Use null to unlink the control\r\n     * @returns the current control\r\n     */\r\n    public linkToTransformNode(node: Nullable<TransformNode>): Control3D {\r\n        if (this._node) {\r\n            this._node.parent = node;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @hidden **/\r\n    public _prepareNode(scene: Scene): void {\r\n        if (!this._node) {\r\n            this._node = this._createNode(scene);\r\n\r\n            if (!this.node) {\r\n                return;\r\n            }\r\n            this._node!.metadata = this; // Store the control on the metadata field in order to get it when picking\r\n            this._node!.position = this.position;\r\n            this._node!.scaling = this.scaling;\r\n\r\n            let mesh = this.mesh;\r\n            if (mesh) {\r\n                mesh.isPickable = true;\r\n\r\n                this._affectMaterial(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Node creation.\r\n     * Can be overriden by children\r\n     * @param scene defines the scene where the node must be attached\r\n     * @returns the attached node or null if none. Must return a Mesh or AbstractMesh if there is an atttached visible object\r\n     */\r\n    protected _createNode(scene: Scene): Nullable<TransformNode> {\r\n        // Do nothing by default\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Affect a material to the given mesh\r\n     * @param mesh defines the mesh which will represent the control\r\n     */\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        mesh.material = null;\r\n    }\r\n\r\n    // Pointers\r\n\r\n    /** @hidden */\r\n    public _onPointerMove(target: Control3D, coordinates: Vector3): void {\r\n        this.onPointerMoveObservable.notifyObservers(coordinates, -1, target, this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control3D): boolean {\r\n        if (this._enterCount > 0) {\r\n            return false;\r\n        }\r\n\r\n        if (this._enterCount === -1) { // -1 is for touch input, we are now sure we are with a mouse or pencil\r\n            this._enterCount = 0;\r\n        }\r\n\r\n        this._enterCount++;\r\n\r\n        this.onPointerEnterObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control3D): void {\r\n        this._enterCount = 0;\r\n\r\n        this.onPointerOutObservable.notifyObservers(this, -1, target, this);\r\n\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (this._downCount !== 0) {\r\n            return false;\r\n        }\r\n\r\n        this._downCount++;\r\n\r\n        this._downPointerIds[pointerId] = true;\r\n\r\n        this.onPointerDownObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control3D, coordinates: Vector3, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._downCount = 0;\r\n\r\n        delete this._downPointerIds[pointerId];\r\n\r\n        if (notifyClick && (this._enterCount > 0 || this._enterCount === -1)) {\r\n            this.onPointerClickObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n        }\r\n        this.onPointerUpObservable.notifyObservers(new Vector3WithInfo(coordinates, buttonIndex), -1, target, this);\r\n\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public forcePointerUp(pointerId: Nullable<number> = null) {\r\n        if (pointerId !== null) {\r\n            this._onPointerUp(this, Vector3.Zero(), pointerId, 0, true);\r\n        } else {\r\n            for (var key in this._downPointerIds) {\r\n                this._onPointerUp(this, Vector3.Zero(), +key as number, 0, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _processObservables(type: number, pickedPoint: Vector3, pointerId: number, buttonIndex: number): boolean {\r\n        if (type === PointerEventTypes.POINTERMOVE) {\r\n            this._onPointerMove(this, pickedPoint);\r\n\r\n            var previousControlOver = this._host._lastControlOver[pointerId];\r\n            if (previousControlOver && previousControlOver !== this) {\r\n                previousControlOver._onPointerOut(this);\r\n            }\r\n\r\n            if (previousControlOver !== this) {\r\n                this._onPointerEnter(this);\r\n            }\r\n\r\n            this._host._lastControlOver[pointerId] = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERDOWN) {\r\n            this._onPointerDown(this, pickedPoint, pointerId, buttonIndex);\r\n            this._host._lastControlDown[pointerId] = this;\r\n            this._host._lastPickedControl = this;\r\n            return true;\r\n        }\r\n\r\n        if (type === PointerEventTypes.POINTERUP) {\r\n            if (this._host._lastControlDown[pointerId]) {\r\n                this._host._lastControlDown[pointerId]._onPointerUp(this, pickedPoint, pointerId, buttonIndex, true);\r\n            }\r\n            delete this._host._lastControlDown[pointerId];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disposeNode(): void {\r\n        if (this._node) {\r\n            this._node.dispose();\r\n            this._node = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this.onPointerDownObservable.clear();\r\n        this.onPointerEnterObservable.clear();\r\n        this.onPointerMoveObservable.clear();\r\n        this.onPointerOutObservable.clear();\r\n        this.onPointerUpObservable.clear();\r\n        this.onPointerClickObservable.clear();\r\n\r\n        this._disposeNode();\r\n\r\n        // Behaviors\r\n        for (var behavior of this._behaviors) {\r\n            behavior.detach();\r\n        }\r\n    }\r\n}","import { AbstractButton3D } from \"./abstractButton3D\";\r\nimport { Material, Nullable, int, Color3, StandardMaterial, Texture, Scene, TransformNode, Vector4, MeshBuilder, AbstractMesh } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control } from \"../../2D/controls/control\";\r\n\r\n/**\r\n * Class used to create a button in 3D\r\n */\r\nexport class Button3D extends AbstractButton3D {\r\n    /** @hidden */\r\n    protected _currentMaterial: Material;\r\n    private _facadeTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _content: Control;\r\n    private _contentResolution = 512;\r\n    private _contentScaleRatio = 2;\r\n\r\n    /**\r\n     * Gets or sets the texture resolution used to render content (512 by default)\r\n     */\r\n    public get contentResolution(): int {\r\n        return this._contentResolution;\r\n    }\r\n\r\n    public set contentResolution(value: int) {\r\n        if (this._contentResolution === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentResolution = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the texture scale ratio used to render content (2 by default)\r\n     */\r\n    public get contentScaleRatio(): number {\r\n        return this._contentScaleRatio;\r\n    }\r\n\r\n    public set contentScaleRatio(value: number) {\r\n        if (this._contentScaleRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._contentScaleRatio = value;\r\n        this._resetContent();\r\n    }\r\n\r\n    protected _disposeFacadeTexture() {\r\n        if (this._facadeTexture) {\r\n            this._facadeTexture.dispose();\r\n            this._facadeTexture = null;\r\n        }\r\n    }\r\n\r\n    protected _resetContent() {\r\n        this._disposeFacadeTexture();\r\n        this.content = this._content;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n\r\n        // Default animations\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Red();\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            (<StandardMaterial>this._currentMaterial).emissiveColor = Color3.Black();\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the GUI 2D content used to display the button's facade\r\n     */\r\n    public get content(): Control {\r\n        return this._content;\r\n    }\r\n\r\n    public set content(value: Control) {\r\n        this._content = value;\r\n\r\n        if (!this._host || !this._host.utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._facadeTexture) {\r\n            this._facadeTexture = new AdvancedDynamicTexture(\"Facade\", this._contentResolution, this._contentResolution, this._host.utilityLayer.utilityLayerScene, true, Texture.TRILINEAR_SAMPLINGMODE);\r\n            this._facadeTexture.rootContainer.scaleX = this._contentScaleRatio;\r\n            this._facadeTexture.rootContainer.scaleY = this._contentScaleRatio;\r\n            this._facadeTexture.premulAlpha = true;\r\n        }\r\n\r\n        this._facadeTexture.addControl(value);\r\n\r\n        this._applyFacade(this._facadeTexture);\r\n    }\r\n\r\n    /**\r\n     * Apply the facade texture (created from the content property).\r\n     * This function can be overloaded by child classes\r\n     * @param facadeTexture defines the AdvancedDynamicTexture to use\r\n     */\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        (<any>this._currentMaterial).emissiveTexture = facadeTexture;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        var faceUV = new Array(6);\r\n\r\n        for (var i = 0; i < 6; i++) {\r\n            faceUV[i] = new Vector4(0, 0, 0, 0);\r\n        }\r\n        faceUV[1] = new Vector4(0, 0, 1, 1);\r\n\r\n        let mesh = MeshBuilder.CreateBox(this.name + \"_rootMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08,\r\n            faceUV: faceUV\r\n        }, scene);\r\n\r\n        return mesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n        let material = new StandardMaterial(this.name + \"Material\", mesh.getScene());\r\n        material.specularColor = Color3.Black();\r\n\r\n        mesh.material = material;\r\n        this._currentMaterial = material;\r\n\r\n        this._resetContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._disposeFacadeTexture();\r\n\r\n        if (this._currentMaterial) {\r\n            this._currentMaterial.dispose();\r\n        }\r\n    }\r\n}","export * from \"./2D\";\r\nexport * from \"./3D\";","import { Rectangle } from \"./rectangle\";\r\nimport { Control } from \"./control\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { Image } from \"./image\";\r\nimport { Vector2 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create 2D buttons\r\n */\r\nexport class Button extends Rectangle {\r\n    /**\r\n     * Function called to generate a pointer enter animation\r\n     */\r\n    public pointerEnterAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer out animation\r\n     */\r\n    public pointerOutAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer down animation\r\n     */\r\n    public pointerDownAnimation: () => void;\r\n    /**\r\n     * Function called to generate a pointer up animation\r\n     */\r\n    public pointerUpAnimation: () => void;\r\n\r\n    /**\r\n     * Creates a new Button\r\n     * @param name defines the name of the button\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.thickness = 1;\r\n        this.isPointerBlocker = true;\r\n\r\n        this.pointerEnterAnimation = () => {\r\n            this.alpha -= 0.1;\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            this.alpha += 0.1;\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            this.scaleX -= 0.05;\r\n            this.scaleY -= 0.05;\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            this.scaleX += 0.05;\r\n            this.scaleY += 0.05;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Button\";\r\n    }\r\n\r\n    // While being a container, the button behaves like a control.\r\n    /** @hidden */\r\n    public _processPicking(x: number, y: number, type: number, pointerId: number, buttonIndex: number): boolean {\r\n        if (!this.isHitTestVisible || !this.isVisible || this.notRenderable) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.contains(x, y)) {\r\n            return false;\r\n        }\r\n\r\n        this._processObservables(type, x, y, pointerId, buttonIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerEnter(target: Control): boolean {\r\n        if (!super._onPointerEnter(target)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.pointerEnterAnimation) {\r\n            this.pointerEnterAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerOut(target: Control): void {\r\n        if (this.pointerOutAnimation) {\r\n            this.pointerOutAnimation();\r\n        }\r\n\r\n        super._onPointerOut(target);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n\r\n        if (this.pointerDownAnimation) {\r\n            this.pointerDownAnimation();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        if (this.pointerUpAnimation) {\r\n            this.pointerUpAnimation();\r\n        }\r\n\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a new button made with an image and a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        textBlock.paddingLeft = \"20%\";\r\n        result.addControl(textBlock);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.width = \"20%\";\r\n        iconImage.stretch = Image.STRETCH_UNIFORM;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image\r\n     * @param name defines the name of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageOnlyButton(name: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        iconImage.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        result.addControl(iconImage);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with a text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @returns a new Button\r\n     */\r\n    public static CreateSimpleButton(name: string, text: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button made with an image and a centered text\r\n     * @param name defines the name of the button\r\n     * @param text defines the text of the button\r\n     * @param imageUrl defines the url of the image\r\n     * @returns a new Button\r\n     */\r\n    public static CreateImageWithCenterTextButton(name: string, text: string, imageUrl: string): Button {\r\n        var result = new Button(name);\r\n\r\n        // Adding image\r\n        var iconImage = new Image(name + \"_icon\", imageUrl);\r\n        iconImage.stretch = Image.STRETCH_FILL;\r\n        result.addControl(iconImage);\r\n\r\n        // Adding text\r\n        var textBlock = new TextBlock(name + \"_button\", text);\r\n        textBlock.textWrapping = true;\r\n        textBlock.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_CENTER;\r\n        result.addControl(textBlock);\r\n\r\n        return result;\r\n    }\r\n}    ","import { Vector2, Epsilon, Nullable } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector2 information for pointer events\r\n */\r\nexport class Vector2WithInfo extends Vector2 {\r\n    /**\r\n     * Creates a new Vector2WithInfo\r\n     * @param source defines the vector2 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector2,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y);\r\n    }\r\n}\r\n\r\n/** Class used to provide 2D matrix features */\r\nexport class Matrix2D {\r\n    /** Gets the internal array of 6 floats used to store matrix data */\r\n    public m = new Float32Array(6);\r\n\r\n    /**\r\n     * Creates a new matrix\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1) \r\n     * @param m10 defines value for (1, 0) \r\n     * @param m11 defines value for (1, 1) \r\n     * @param m20 defines value for (2, 0) \r\n     * @param m21 defines value for (2, 1) \r\n     */\r\n    constructor(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number) {\r\n        this.fromValues(m00, m01, m10, m11, m20, m21);\r\n    }\r\n\r\n    /**\r\n     * Fills the matrix from direct values\r\n     * @param m00 defines value for (0, 0)\r\n     * @param m01 defines value for (0, 1)\r\n     * @param m10 defines value for (1, 0)\r\n     * @param m11 defines value for (1, 1)\r\n     * @param m20 defines value for (2, 0)\r\n     * @param m21 defines value for (2, 1)\r\n     * @returns the current modified matrix\r\n     */\r\n    public fromValues(m00: number, m01: number, m10: number, m11: number, m20: number, m21: number): Matrix2D {\r\n        this.m[0] = m00; this.m[1] = m01;\r\n        this.m[2] = m10; this.m[3] = m11;\r\n        this.m[4] = m20; this.m[5] = m21;\r\n        return this;\r\n    }\r\n\r\n    /** \r\n     * Gets matrix determinant\r\n     * @returns the determinant\r\n     */\r\n    public determinant(): number {\r\n        return this.m[0] * this.m[3] - this.m[1] * this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Inverses the matrix and stores it in a target matrix\r\n     * @param result defines the target matrix\r\n     * @returns the current matrix\r\n     */\r\n    public invertToRef(result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let det = this.determinant();\r\n        if (det < (Epsilon * Epsilon)) {\r\n            result.m[0] = 0; result.m[1] = 0;\r\n            result.m[2] = 0; result.m[3] = 0;\r\n            result.m[4] = 0; result.m[5] = 0;\r\n            return this;\r\n        }\r\n\r\n        let detDiv = 1 / det;\r\n\r\n        let det4 = l2 * l5 - l3 * l4;\r\n        let det5 = l1 * l4 - l0 * l5;\r\n\r\n        result.m[0] = l3 * detDiv; result.m[1] = -l1 * detDiv;\r\n        result.m[2] = -l2 * detDiv; result.m[3] = l0 * detDiv;\r\n        result.m[4] = det4 * detDiv; result.m[5] = det5 * detDiv;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current matrix with another one\r\n     * @param other defines the second operand\r\n     * @param result defines the target matrix \r\n     * @returns the current matrix\r\n     */\r\n    public multiplyToRef(other: Matrix2D, result: Matrix2D): Matrix2D {\r\n        let l0 = this.m[0]; let l1 = this.m[1];\r\n        let l2 = this.m[2]; let l3 = this.m[3];\r\n        let l4 = this.m[4]; let l5 = this.m[5];\r\n\r\n        let r0 = other.m[0]; let r1 = other.m[1];\r\n        let r2 = other.m[2]; let r3 = other.m[3];\r\n        let r4 = other.m[4]; let r5 = other.m[5];\r\n\r\n        result.m[0] = l0 * r0 + l1 * r2; result.m[1] = l0 * r1 + l1 * r3;\r\n        result.m[2] = l2 * r0 + l3 * r2; result.m[3] = l2 * r1 + l3 * r3;\r\n        result.m[4] = l4 * r0 + l5 * r2 + r4; result.m[5] = l4 * r1 + l5 * r3 + r5;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies the current matrix to a set of 2 floats and stores the result in a vector2\r\n     * @param x defines the x coordinate to transform\r\n     * @param y defines the x coordinate to transform \r\n     * @param result defines the target vector2 \r\n     * @returns the current matrix\r\n     */\r\n    public transformCoordinates(x: number, y: number, result: Vector2): Matrix2D {\r\n        result.x = x * this.m[0] + y * this.m[2] + this.m[4];\r\n        result.y = x * this.m[1] + y * this.m[3] + this.m[5];\r\n\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates an identity matrix\r\n     * @returns a new matrix\r\n     */\r\n    public static Identity(): Matrix2D {\r\n        return new Matrix2D(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a translation matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the translation\r\n     * @param y defines the y coordinate of the translation \r\n     * @param result defines the target matrix\r\n     */\r\n    public static TranslationToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(1, 0, 0, 1, x, y);\r\n    }\r\n\r\n    /**\r\n     * Creates a scaling matrix and stores it in a target matrix\r\n     * @param x defines the x coordinate of the scaling\r\n     * @param y defines the y coordinate of the scaling \r\n     * @param result defines the target matrix\r\n     */\r\n    public static ScalingToRef(x: number, y: number, result: Matrix2D): void {\r\n        result.fromValues(x, 0, 0, y, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Creates a rotation matrix and stores it in a target matrix\r\n     * @param angle defines the rotation angle\r\n     * @param result defines the target matrix\r\n     */\r\n    public static RotationToRef(angle: number, result: Matrix2D): void {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n\r\n        result.fromValues(c, s, -s, c, 0, 0);\r\n    }\r\n\r\n    private static _TempPreTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempPostTranslationMatrix = Matrix2D.Identity();\r\n    private static _TempRotationMatrix = Matrix2D.Identity();\r\n    private static _TempScalingMatrix = Matrix2D.Identity();\r\n    private static _TempCompose0 = Matrix2D.Identity();\r\n    private static _TempCompose1 = Matrix2D.Identity();\r\n    private static _TempCompose2 = Matrix2D.Identity();\r\n\r\n    /**\r\n     * Composes a matrix from translation, rotation, scaling and parent matrix and stores it in a target matrix \r\n     * @param tx defines the x coordinate of the translation\r\n     * @param ty defines the y coordinate of the translation \r\n     * @param angle defines the rotation angle \r\n     * @param scaleX defines the x coordinate of the scaling\r\n     * @param scaleY defines the y coordinate of the scaling \r\n     * @param parentMatrix defines the parent matrix to multiply by (can be null)\r\n     * @param result defines the target matrix \r\n     */\r\n    public static ComposeToRef(tx: number, ty: number, angle: number, scaleX: number, scaleY: number, parentMatrix: Nullable<Matrix2D>, result: Matrix2D): void {\r\n        Matrix2D.TranslationToRef(tx, ty, Matrix2D._TempPreTranslationMatrix);\r\n\r\n        Matrix2D.ScalingToRef(scaleX, scaleY, Matrix2D._TempScalingMatrix);\r\n\r\n        Matrix2D.RotationToRef(angle, Matrix2D._TempRotationMatrix);\r\n\r\n        Matrix2D.TranslationToRef(-tx, -ty, Matrix2D._TempPostTranslationMatrix);\r\n\r\n        Matrix2D._TempPreTranslationMatrix.multiplyToRef(Matrix2D._TempScalingMatrix, Matrix2D._TempCompose0);\r\n        Matrix2D._TempCompose0.multiplyToRef(Matrix2D._TempRotationMatrix, Matrix2D._TempCompose1);\r\n        if (parentMatrix) {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, Matrix2D._TempCompose2);\r\n            Matrix2D._TempCompose2.multiplyToRef(parentMatrix, result);\r\n        } else {\r\n            Matrix2D._TempCompose1.multiplyToRef(Matrix2D._TempPostTranslationMatrix, result);\r\n        }\r\n    }\r\n}   ","import { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Class used to represent a 2D checkbox\r\n */\r\nexport class Checkbox extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness  */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Observable raised when isChecked property changes\r\n     */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CheckBox\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"CheckBox\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fillRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                context.fillRect(this._currentMeasure.left + this._thickness / 2 + (actualWidth - offsetWidth) / 2, this._currentMeasure.top + this._thickness / 2 + (actualHeight - offseHeight) / 2, offsetWidth, offseHeight);\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2, actualWidth, actualHeight);\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n\r\n    /** @hidden */\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this.isChecked = !this.isChecked;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a checkbox with a header\r\n     * @param title defines the label to use for the header\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the checkbox and a textBlock\r\n     */\r\n    public static AddCheckBoxWithHeader(title: string, onValueChanged: (value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var checkbox = new Checkbox();\r\n        checkbox.width = \"20px\";\r\n        checkbox.height = \"20px\";\r\n        checkbox.isChecked = true;\r\n        checkbox.color = \"green\";\r\n        checkbox.onIsCheckedChangedObservable.add(onValueChanged);\r\n        panel.addControl(checkbox);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { IFocusableControl } from \"../advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { VirtualKeyboard } from \"./virtualKeyboard\";\r\n\r\n/**\r\n * Class used to create input text control\r\n */\r\nexport class InputText extends Control implements IFocusableControl {\r\n    private _text = \"\";\r\n    private _placeholderText = \"\";\r\n    private _background = \"#222222\";\r\n    private _focusedBackground = \"#000000\";\r\n    private _placeholderColor = \"gray\";\r\n    private _thickness = 1;\r\n    private _margin = new ValueAndUnit(10, ValueAndUnit.UNITMODE_PIXEL);\r\n    private _autoStretchWidth = true;\r\n    private _maxWidth = new ValueAndUnit(1, ValueAndUnit.UNITMODE_PERCENTAGE, false);\r\n    private _isFocused = false;\r\n    private _blinkTimeout: number;\r\n    private _blinkIsEven = false;\r\n    private _cursorOffset = 0;\r\n    private _scrollLeft: Nullable<number>;\r\n    private _textWidth: number;\r\n    private _clickedCoordinate: Nullable<number>;\r\n    private _deadKey = false;\r\n    private _addKey = true;\r\n    private _currentKey = \"\";\r\n\r\n    /** @hidden */\r\n    public _connectedVirtualKeyboard: Nullable<VirtualKeyboard>;\r\n\r\n    /** Gets or sets a string representing the message displayed on mobile when the control gets the focus */\r\n    public promptMessage = \"Please enter text:\";\r\n\r\n    /** Observable raised when the text changes */\r\n    public onTextChangedObservable = new Observable<InputText>();\r\n    /** Observable raised just before an entered character is to be added */\r\n    public onBeforeKeyAddObservable = new Observable<InputText>();\r\n    /** Observable raised when the control gets the focus */\r\n    public onFocusObservable = new Observable<InputText>();\r\n    /** Observable raised when the control loses the focus */\r\n    public onBlurObservable = new Observable<InputText>();\r\n\r\n    /** Gets or sets the maximum width allowed by the control */\r\n    public get maxWidth(): string | number {\r\n        return this._maxWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets the maximum width allowed by the control in pixels */\r\n    public get maxWidthInPixels(): number {\r\n        return this._maxWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set maxWidth(value: string | number) {\r\n        if (this._maxWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._maxWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control margin */\r\n    public get margin(): string {\r\n        return this._margin.toString(this._host);\r\n    }\r\n\r\n    /** Gets control margin in pixels */\r\n    public get marginInPixels(): number {\r\n        return this._margin.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set margin(value: string) {\r\n        if (this._margin.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._margin.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the control can auto stretch its width to adapt to the text */\r\n    public get autoStretchWidth(): boolean {\r\n        return this._autoStretchWidth;\r\n    }\r\n\r\n    public set autoStretchWidth(value: boolean) {\r\n        if (this._autoStretchWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._autoStretchWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color when focused */\r\n    public get focusedBackground(): string {\r\n        return this._focusedBackground;\r\n    }\r\n\r\n    public set focusedBackground(value: string) {\r\n        if (this._focusedBackground === value) {\r\n            return;\r\n        }\r\n\r\n        this._focusedBackground = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the placeholder color */\r\n    public get placeholderColor(): string {\r\n        return this._placeholderColor;\r\n    }\r\n\r\n    public set placeholderColor(value: string) {\r\n        if (this._placeholderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._placeholderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the text displayed when the control is empty */\r\n    public get placeholderText(): string {\r\n        return this._placeholderText;\r\n    }\r\n\r\n    public set placeholderText(value: string) {\r\n        if (this._placeholderText === value) {\r\n            return;\r\n        }\r\n        this._placeholderText = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the dead key flag */\r\n    public get deadKey(): boolean {\r\n        return this._deadKey;\r\n    }\r\n\r\n    public set deadKey(flag: boolean) {\r\n        this._deadKey = flag;\r\n    }\r\n\r\n    /** Gets or sets if the current key should be added */\r\n    public get addKey(): boolean {\r\n        return this._addKey;\r\n    }\r\n\r\n    public set addKey(flag: boolean) {\r\n        this._addKey = flag;\r\n    }\r\n\r\n    /** Gets or sets the value of the current key being entered */\r\n    public get currentKey(): string {\r\n        return this._currentKey;\r\n    }\r\n\r\n    public set currentKey(key: string) {\r\n        this._currentKey = key;\r\n    }\r\n\r\n    /** Gets or sets the text displayed in the control */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n        this._text = value;\r\n        this._markAsDirty();\r\n\r\n        this.onTextChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public get width(): string | number {\r\n        return this._width.toString(this._host);\r\n    }\r\n\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n\r\n        this.autoStretchWidth = false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputText\r\n     * @param name defines the control name\r\n     * @param text defines the text of the control\r\n     */\r\n    constructor(public name?: string, text: string = \"\") {\r\n        super(name);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onBlur(): void {\r\n        this._isFocused = false;\r\n        this._scrollLeft = null;\r\n        this._cursorOffset = 0;\r\n        clearTimeout(this._blinkTimeout);\r\n        this._markAsDirty();\r\n\r\n        this.onBlurObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @hidden */\r\n    public onFocus(): void {\r\n        if(!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._scrollLeft = null;\r\n        this._isFocused = true;\r\n        this._blinkIsEven = false;\r\n        this._cursorOffset = 0;\r\n        this._markAsDirty();\r\n\r\n        this.onFocusObservable.notifyObservers(this);\r\n\r\n        if (navigator.userAgent.indexOf(\"Mobile\") !== -1) {\r\n            let value = prompt(this.promptMessage);\r\n\r\n            if (value !== null) {\r\n                this.text = value;\r\n            }\r\n            this._host.focusedControl = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"InputText\";\r\n    }\r\n\r\n    /**\r\n     * Function called to get the list of controls that should not steal the focus from this control\r\n     * @returns an array of controls\r\n     */\r\n    public keepsFocusWith(): Nullable<Control[]> {\r\n        if (!this._connectedVirtualKeyboard) {\r\n            return null;\r\n        }\r\n        return [this._connectedVirtualKeyboard];\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKey(keyCode: number, key?: string) {\r\n        // Specific cases\r\n        switch (keyCode) {\r\n            case 32: //SPACE\r\n                key = \" \"; //ie11 key for space is \"Spacebar\"\r\n                break;\r\n            case 8: // BACKSPACE\r\n                if (this._text && this._text.length > 0) {\r\n                    if (this._cursorOffset === 0) {\r\n                        this.text = this._text.substr(0, this._text.length - 1);\r\n                    } else {\r\n                        let deletePosition = this._text.length - this._cursorOffset;\r\n                        if (deletePosition > 0) {\r\n                            this.text = this._text.slice(0, deletePosition - 1) + this._text.slice(deletePosition);\r\n                        }\r\n                    }\r\n                }\r\n                return;\r\n            case 46: // DELETE\r\n                if (this._text && this._text.length > 0) {\r\n                    let deletePosition = this._text.length - this._cursorOffset;\r\n                    this.text = this._text.slice(0, deletePosition) + this._text.slice(deletePosition + 1);\r\n                    this._cursorOffset--;\r\n                }\r\n                return;\r\n            case 13: // RETURN\r\n                this._host.focusedControl = null;\r\n                return;\r\n            case 35: // END\r\n                this._cursorOffset = 0;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 36: // HOME\r\n                this._cursorOffset = this._text.length;\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 37: // LEFT\r\n                this._cursorOffset++;\r\n                if (this._cursorOffset > this._text.length) {\r\n                    this._cursorOffset = this._text.length;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 39: // RIGHT\r\n                this._cursorOffset--;\r\n                if (this._cursorOffset < 0) {\r\n                    this._cursorOffset = 0;\r\n                }\r\n                this._blinkIsEven = false;\r\n                this._markAsDirty();\r\n                return;\r\n            case 222: // Dead\r\n                this.deadKey = true;\r\n                return;\r\n        }\r\n\r\n        // Printable characters\r\n        if (key &&\r\n            ((keyCode === -1) ||                     // Direct access\r\n                (keyCode === 32) ||                     // Space\r\n                (keyCode > 47 && keyCode < 58) ||       // Numbers\r\n                (keyCode > 64 && keyCode < 91) ||       // Letters\r\n                (keyCode > 185 && keyCode < 193) ||     // Special characters\r\n                (keyCode > 218 && keyCode < 223) ||     // Special characters\r\n                (keyCode > 95 && keyCode < 112))) {     // Numpad\r\n            this._currentKey = key;\r\n            this.onBeforeKeyAddObservable.notifyObservers(this);\r\n            key = this._currentKey;\r\n            if (this._addKey) {\r\n                if (this._cursorOffset === 0) {\r\n                    this.text += key;\r\n                } else {\r\n                    let insertPosition = this._text.length - this._cursorOffset;\r\n\r\n                    this.text = this._text.slice(0, insertPosition) + key + this._text.slice(insertPosition);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public processKeyboard(evt: KeyboardEvent): void {\r\n        this.processKey(evt.keyCode, evt.key);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Background\r\n            if (this._isFocused) {\r\n                if (this._focusedBackground) {\r\n                    context.fillStyle = this._isEnabled ?  this._focusedBackground : this._disabledColor;\r\n\r\n                    context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n                }\r\n            } else if (this._background) {\r\n                context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            if (!this._fontOffset) {\r\n                this._fontOffset = Control._GetFontOffset(context.font);\r\n            }\r\n\r\n            // Text\r\n            let clipTextLeft = this._currentMeasure.left + this._margin.getValueInPixel(this._host, parentMeasure.width);\r\n            if (this.color) {\r\n                context.fillStyle = this.color;\r\n            }\r\n\r\n            let text = this._beforeRenderText(this._text);\r\n\r\n            if (!this._isFocused && !this._text && this._placeholderText) {\r\n                text = this._placeholderText;\r\n\r\n                if (this._placeholderColor) {\r\n                    context.fillStyle = this._placeholderColor;\r\n                }\r\n            }\r\n\r\n            this._textWidth = context.measureText(text).width;\r\n            let marginWidth = this._margin.getValueInPixel(this._host, parentMeasure.width) * 2;\r\n            if (this._autoStretchWidth) {\r\n                this.width = Math.min(this._maxWidth.getValueInPixel(this._host, parentMeasure.width), this._textWidth + marginWidth) + \"px\";\r\n            }\r\n\r\n            let rootY = this._fontOffset.ascent + (this._currentMeasure.height - this._fontOffset.height) / 2;\r\n            let availableWidth = this._width.getValueInPixel(this._host, parentMeasure.width) - marginWidth;\r\n            context.save();\r\n            context.beginPath();\r\n            context.rect(clipTextLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, availableWidth + 2, this._currentMeasure.height);\r\n            context.clip();\r\n\r\n            if (this._isFocused && this._textWidth > availableWidth) {\r\n                let textLeft = clipTextLeft - this._textWidth + availableWidth;\r\n                if (!this._scrollLeft) {\r\n                    this._scrollLeft = textLeft;\r\n                }\r\n            } else {\r\n                this._scrollLeft = clipTextLeft;\r\n            }\r\n\r\n            context.fillText(text, this._scrollLeft, this._currentMeasure.top + rootY);\r\n\r\n            // Cursor\r\n            if (this._isFocused) {\r\n\r\n                // Need to move cursor\r\n                if (this._clickedCoordinate) {\r\n                    var rightPosition = this._scrollLeft + this._textWidth;\r\n                    var absoluteCursorPosition = rightPosition - this._clickedCoordinate;\r\n                    var currentSize = 0;\r\n                    this._cursorOffset = 0;\r\n                    var previousDist = 0;\r\n                    do {\r\n                        if (this._cursorOffset) {\r\n                            previousDist = Math.abs(absoluteCursorPosition - currentSize);\r\n                        }\r\n                        this._cursorOffset++;\r\n                        currentSize = context.measureText(text.substr(text.length - this._cursorOffset, this._cursorOffset)).width;\r\n\r\n                    } while (currentSize < absoluteCursorPosition && (text.length >= this._cursorOffset));\r\n\r\n                    // Find closest move\r\n                    if (Math.abs(absoluteCursorPosition - currentSize) > previousDist) {\r\n                        this._cursorOffset--;\r\n                    }\r\n\r\n                    this._blinkIsEven = false;\r\n                    this._clickedCoordinate = null;\r\n                }\r\n\r\n                // Render cursor\r\n                if (!this._blinkIsEven) {\r\n                    let cursorOffsetText = this.text.substr(this._text.length - this._cursorOffset);\r\n                    let cursorOffsetWidth = context.measureText(cursorOffsetText).width;\r\n                    let cursorLeft = this._scrollLeft + this._textWidth - cursorOffsetWidth;\r\n\r\n                    if (cursorLeft < clipTextLeft) {\r\n                        this._scrollLeft += (clipTextLeft - cursorLeft);\r\n                        cursorLeft = clipTextLeft;\r\n                        this._markAsDirty();\r\n                    } else if (cursorLeft > clipTextLeft + availableWidth) {\r\n                        this._scrollLeft += (clipTextLeft + availableWidth - cursorLeft);\r\n                        cursorLeft = clipTextLeft + availableWidth;\r\n                        this._markAsDirty();\r\n                    }\r\n                    context.fillRect(cursorLeft, this._currentMeasure.top + (this._currentMeasure.height - this._fontOffset.height) / 2, 2, this._fontOffset.height);\r\n                }\r\n\r\n                clearTimeout(this._blinkTimeout);\r\n                this._blinkTimeout = <any>setTimeout(() => {\r\n                    this._blinkIsEven = !this._blinkIsEven;\r\n                    this._markAsDirty();\r\n                }, 500);\r\n            }\r\n\r\n            context.restore();\r\n\r\n            // Border\r\n            if (this._thickness) {\r\n                if (this.color) {\r\n                    context.strokeStyle = this.color;\r\n                }\r\n                context.lineWidth = this._thickness;\r\n\r\n                context.strokeRect(this._currentMeasure.left + this._thickness / 2, this._currentMeasure.top + this._thickness / 2,\r\n                    this._currentMeasure.width - this._thickness, this._currentMeasure.height - this._thickness);\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._clickedCoordinate = coordinates.x;\r\n        if (this._host.focusedControl === this) {\r\n            // Move cursor\r\n            clearTimeout(this._blinkTimeout);\r\n            this._markAsDirty();\r\n            return true;\r\n        }\r\n        if(!this._isEnabled) {\r\n            return false;\r\n        }\r\n        this._host.focusedControl = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n\r\n    protected _beforeRenderText(text: string): string {\r\n        return text;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.onBlurObservable.clear();\r\n        this.onFocusObservable.clear();\r\n        this.onTextChangedObservable.clear();\r\n    }\r\n}\r\n","import { MultiLine } from \"./controls/multiLine\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\nimport { Control } from \"./controls/control\";\r\nimport { AbstractMesh, Nullable, Observer, Camera, Vector2 } from \"babylonjs\";\r\n\r\n\r\n/**\r\n * Class used to store a point for a MultiLine object.\r\n * The point can be pure 2D coordinates, a mesh or a control\r\n */\r\nexport class MultiLinePoint {\r\n\r\n    private _multiLine: MultiLine;\r\n\r\n    private _x: ValueAndUnit;\r\n    private _y: ValueAndUnit;\r\n    private _control: Nullable<Control>;\r\n    private _mesh: Nullable<AbstractMesh>;\r\n\r\n    private _controlObserver: Nullable<Observer<Control>>;\r\n    private _meshObserver: Nullable<Observer<Camera>>;\r\n\r\n    /** @hidden */\r\n    public _point: Vector2;\r\n\r\n    /**\r\n     * Creates a new MultiLinePoint\r\n     * @param multiLine defines the source MultiLine object\r\n     */\r\n    constructor(multiLine: MultiLine) {\r\n        this._multiLine = multiLine;\r\n\r\n        this._x = new ValueAndUnit(0);\r\n        this._y = new ValueAndUnit(0);\r\n\r\n        this._point = new Vector2(0, 0);\r\n    }\r\n\r\n    /** Gets or sets x coordinate */\r\n    public get x(): string | number {\r\n        return this._x.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set x(value: string | number) {\r\n        if (this._x.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets y coordinate */\r\n    public get y(): string | number {\r\n        return this._y.toString(this._multiLine._host);\r\n    }\r\n\r\n    public set y(value: string | number) {\r\n        if (this._y.toString(this._multiLine._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y.fromString(value)) {\r\n            this._multiLine._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the control associated with this point */\r\n    public get control(): Nullable<Control> {\r\n        return this._control;\r\n    }\r\n\r\n    public set control(value: Nullable<Control>) {\r\n        if (this._control === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._control && this._controlObserver) {\r\n            this._control.onDirtyObservable.remove(this._controlObserver);\r\n\r\n            this._controlObserver = null;\r\n        }\r\n\r\n        this._control = value;\r\n\r\n        if (this._control) {\r\n            this._controlObserver = this._control.onDirtyObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the mesh associated with this point */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._mesh && this._meshObserver) {\r\n            this._mesh.getScene().onAfterCameraRenderObservable.remove(this._meshObserver);\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (this._mesh) {\r\n            this._meshObserver = this._mesh.getScene().onAfterCameraRenderObservable.add(this._multiLine.onPointUpdate);\r\n        }\r\n\r\n        this._multiLine._markAsDirty();\r\n    }\r\n\r\n    /** Resets links */\r\n    public resetLinks(): void {\r\n        this.control = null;\r\n        this.mesh = null;\r\n    }\r\n\r\n    /** \r\n     * Gets a translation vector\r\n     * @returns the translation vector\r\n     */\r\n    public translate(): Vector2 {\r\n        this._point = this._translatePoint();\r\n\r\n        return this._point;\r\n    }\r\n\r\n    private _translatePoint(): Vector2 {\r\n        if (this._mesh != null) {\r\n            return this._multiLine._host.getProjectedPosition(this._mesh.getBoundingInfo().boundingSphere.center, this._mesh.getWorldMatrix());\r\n        }\r\n        else if (this._control != null) {\r\n            return new Vector2(this._control.centerX, this._control.centerY);\r\n        }\r\n        else {\r\n            var host: any = this._multiLine._host as any;\r\n\r\n            var xValue: number = this._x.getValueInPixel(host, Number(host._canvas.width));\r\n            var yValue: number = this._y.getValueInPixel(host, Number(host._canvas.height));\r\n\r\n            return new Vector2(xValue, yValue);\r\n        }\r\n    }\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        this.resetLinks();\r\n    }\r\n\r\n}\r\n","import { Control } from \"./control\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\nimport { StackPanel, TextBlock } from \".\";\r\n\r\n/**\r\n * Class used to create radio button controls\r\n */\r\nexport class RadioButton extends Control {\r\n    private _isChecked = false;\r\n    private _background = \"black\";\r\n    private _checkSizeRatio = 0.8;\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets group name */\r\n    public group = \"\";\r\n\r\n    /** Observable raised when isChecked is changed */\r\n    public onIsCheckedChangedObservable = new Observable<boolean>();\r\n\r\n    /** Gets or sets a value indicating the ratio between overall size and check size */\r\n    public get checkSizeRatio(): number {\r\n        return this._checkSizeRatio;\r\n    }\r\n\r\n    public set checkSizeRatio(value: number) {\r\n        value = Math.max(Math.min(1, value), 0);\r\n\r\n        if (this._checkSizeRatio === value) {\r\n            return;\r\n        }\r\n\r\n        this._checkSizeRatio = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the checkbox is checked or not */\r\n    public get isChecked(): boolean {\r\n        return this._isChecked;\r\n    }\r\n\r\n    public set isChecked(value: boolean) {\r\n        if (this._isChecked === value) {\r\n            return;\r\n        }\r\n\r\n        this._isChecked = value;\r\n        this._markAsDirty();\r\n\r\n        this.onIsCheckedChangedObservable.notifyObservers(value);\r\n\r\n        if (this._isChecked && this._host) {\r\n            // Update all controls from same group\r\n            this._host.executeOnAllControls((control) => {\r\n                if (control === this) {\r\n                    return;\r\n                }\r\n\r\n                if ((<any>control).group === undefined) {\r\n                    return;\r\n                }\r\n                var childRadio = (<RadioButton>control);\r\n                if (childRadio.group === this.group) {\r\n                    childRadio.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new RadioButton\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"RadioButton\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            let actualWidth = this._currentMeasure.width - this._thickness;\r\n            let actualHeight = this._currentMeasure.height - this._thickness;\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            // Outer\r\n            Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n            context.fillStyle = this._isEnabled ? this._background : this._disabledColor;\r\n            context.fill();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n\r\n            // Inner\r\n            if (this._isChecked) {\r\n                context.fillStyle = this._isEnabled ? this.color : this._disabledColor;\r\n                let offsetWidth = actualWidth * this._checkSizeRatio;\r\n                let offseHeight = actualHeight * this._checkSizeRatio;\r\n\r\n                Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n                    offsetWidth / 2 - this._thickness / 2, offseHeight / 2 - this._thickness / 2, context);\r\n\r\n                context.fill();\r\n            }\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.isChecked) {\r\n            this.isChecked = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Utility function to easily create a radio button with a header\r\n     * @param title defines the label to use for the header\r\n     * @param group defines the group to use for the radio button\r\n     * @param isChecked defines the initial state of the radio button\r\n     * @param onValueChanged defines the callback to call when value changes\r\n     * @returns a StackPanel containing the radio button and a textBlock\r\n     */\r\n    public static AddRadioButtonWithHeader(title: string, group: string, isChecked: boolean, onValueChanged: (button: RadioButton, value: boolean) => void): StackPanel {\r\n        var panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.height = \"30px\";\r\n\r\n        var radio = new RadioButton();\r\n        radio.width = \"20px\";\r\n        radio.height = \"20px\";\r\n        radio.isChecked = isChecked;\r\n        radio.color = \"green\";\r\n        radio.group = group;\r\n        radio.onIsCheckedChangedObservable.add((value) => onValueChanged(radio, value));\r\n        panel.addControl(radio);    \r\n    \r\n        var header = new TextBlock();\r\n        header.text = title;\r\n        header.width = \"180px\";\r\n        header.paddingLeft = \"5px\";\r\n        header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        header.color = \"white\";\r\n        panel.addControl(header); \r\n\r\n        return panel;\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create slider controls\r\n */\r\nexport class Slider extends Control {\r\n    private _thumbWidth = new ValueAndUnit(20, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _minimum = 0;\r\n    private _maximum = 100;\r\n    private _value = 50;\r\n    private _isVertical = false;\r\n    private _background = \"black\";\r\n    private _borderColor = \"white\";\r\n    private _barOffset = new ValueAndUnit(5, ValueAndUnit.UNITMODE_PIXEL, false);\r\n    private _isThumbCircle = false;\r\n    private _isThumbClamped = false;\r\n\r\n    /** Observable raised when the sldier value changes */\r\n    public onValueChangedObservable = new Observable<number>();\r\n\r\n    /** Gets or sets border color */\r\n    public get borderColor(): string {\r\n        return this._borderColor;\r\n    }\r\n\r\n    public set borderColor(value: string) {\r\n        if (this._borderColor === value) {\r\n            return;\r\n        }\r\n\r\n        this._borderColor = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets background color */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets main bar offset */\r\n    public get barOffset(): string | number {\r\n        return this._barOffset.toString(this._host);\r\n    }\r\n\r\n    /** Gets main bar offset in pixels*/\r\n    public get barOffsetInPixels(): number {\r\n        return this._barOffset.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set barOffset(value: string | number) {\r\n        if (this._barOffset.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._barOffset.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets thumb width */\r\n    public get thumbWidth(): string | number {\r\n        return this._thumbWidth.toString(this._host);\r\n    }\r\n\r\n    /** Gets thumb width in pixels */\r\n    public get thumbWidthInPixels(): number {\r\n        return this._thumbWidth.getValueInPixel(this._host, this._cachedParentMeasure.width);\r\n    }\r\n\r\n    public set thumbWidth(value: string | number) {\r\n        if (this._thumbWidth.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._thumbWidth.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets minimum value */\r\n    public get minimum(): number {\r\n        return this._minimum;\r\n    }\r\n\r\n    public set minimum(value: number) {\r\n        if (this._minimum === value) {\r\n            return;\r\n        }\r\n\r\n        this._minimum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets maximum value */\r\n    public get maximum(): number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value: number) {\r\n        if (this._maximum === value) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = value;\r\n        this._markAsDirty();\r\n\r\n        this.value = Math.max(Math.min(this.value, this._maximum), this._minimum);\r\n    }\r\n\r\n    /** Gets or sets current value */\r\n    public get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: number) {\r\n        value = Math.max(Math.min(value, this._maximum), this._minimum);\r\n\r\n        if (this._value === value) {\r\n            return;\r\n        }\r\n\r\n        this._value = value;\r\n        this._markAsDirty();\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /**Gets or sets a boolean indicating if the slider should be vertical or horizontal */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the thumb should be round or square */\r\n    public get isThumbCircle(): boolean {\r\n        return this._isThumbCircle;\r\n    }\r\n\r\n    public set isThumbCircle(value: boolean) {\r\n        if (this._isThumbCircle === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbCircle = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets a value indicating if the thumb can go over main bar extends */\r\n    public get isThumbClamped(): boolean {\r\n        return this._isThumbClamped;\r\n    }\r\n\r\n    public set isThumbClamped(value: boolean) {\r\n        if (this._isThumbClamped === value) {\r\n            return;\r\n        }\r\n\r\n        this._isThumbClamped = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Slider\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Slider\";\r\n    }\r\n\r\n    protected _getThumbThickness(type: string, backgroundLength: number): number {\r\n        var thumbThickness = 0;\r\n        switch (type) {\r\n            case \"circle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.max(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n                break;\r\n            case \"rectangle\":\r\n                if (this._thumbWidth.isPixel) {\r\n                    thumbThickness = Math.min(this._thumbWidth.getValue(this._host), backgroundLength);\r\n                }\r\n                else {\r\n                    thumbThickness = backgroundLength * this._thumbWidth.getValue(this._host);\r\n                }\r\n        }\r\n        return thumbThickness;\r\n    }\r\n\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            // Main bar\r\n            var effectiveBarOffset = 0;\r\n            var type = this.isThumbCircle ? \"circle\" : \"rectangle\";\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n            var width = this._currentMeasure.width;\r\n            var height = this._currentMeasure.height;\r\n\r\n            var backgroundBoxLength = Math.max(this._currentMeasure.width, this._currentMeasure.height);\r\n            var backgroundBoxThickness = Math.min(this._currentMeasure.width, this._currentMeasure.height);\r\n\r\n            var effectiveThumbThickness = this._getThumbThickness(type, backgroundBoxThickness);\r\n            backgroundBoxLength -= effectiveThumbThickness;\r\n\r\n            var radius = 0;\r\n\r\n\r\n            //throw error when height is less than width for vertical slider\r\n            if ((this._isVertical && this._currentMeasure.height < this._currentMeasure.width)) {\r\n                console.error(\"Height should be greater than width\");\r\n                return;\r\n            }\r\n            if (this._barOffset.isPixel) {\r\n                effectiveBarOffset = Math.min(this._barOffset.getValue(this._host), backgroundBoxThickness);\r\n            }\r\n            else {\r\n                effectiveBarOffset = backgroundBoxThickness * this._barOffset.getValue(this._host);\r\n            }\r\n\r\n            backgroundBoxThickness -= (effectiveBarOffset * 2);\r\n\r\n            if (this._isVertical) {\r\n                left += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    top += (effectiveThumbThickness / 2);\r\n                }\r\n\r\n                height = backgroundBoxLength;\r\n                width = backgroundBoxThickness;\r\n\r\n            }\r\n            else {\r\n                top += effectiveBarOffset;\r\n                if (!this.isThumbClamped) {\r\n                    left += (effectiveThumbThickness / 2);\r\n                }\r\n                height = backgroundBoxThickness;\r\n                width = backgroundBoxLength;\r\n            }\r\n\r\n            if (this.isThumbClamped && this.isThumbCircle) {\r\n                if (this._isVertical)\r\n                    top += (effectiveThumbThickness / 2);\r\n                else\r\n                    left += (effectiveThumbThickness / 2);\r\n\r\n                radius = backgroundBoxThickness / 2;\r\n            }\r\n            else {\r\n                radius = (effectiveThumbThickness - effectiveBarOffset) / 2;\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n\r\n            var thumbPosition = (this._isVertical) ? ((this._maximum - this._value) / (this._maximum - this._minimum)) * backgroundBoxLength : ((this._value - this._minimum) / (this._maximum - this._minimum)) * backgroundBoxLength;\r\n            context.fillStyle = this._background;\r\n\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top, radius, Math.PI, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width, height + effectiveThumbThickness);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxLength, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, width, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, width + effectiveThumbThickness, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, width, height);\r\n                }\r\n            }\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            context.fillStyle = this.color;\r\n            if (this._isVertical) {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left + backgroundBoxThickness / 2, top + backgroundBoxLength, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top + thumbPosition, width, this._currentMeasure.height - thumbPosition);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top + thumbPosition, width, height - thumbPosition);\r\n                }\r\n            }\r\n            else {\r\n                if (this.isThumbClamped) {\r\n                    if (this.isThumbCircle) {\r\n                        context.beginPath();\r\n                        context.arc(left, top + backgroundBoxThickness / 2, radius, 0, 2 * Math.PI);\r\n                        context.fill();\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                    else {\r\n                        context.fillRect(left, top, thumbPosition, height);\r\n                    }\r\n                }\r\n                else {\r\n                    context.fillRect(left, top, thumbPosition, height);\r\n                }\r\n            }\r\n\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n            }\r\n            if (this._isThumbCircle) {\r\n                context.beginPath();\r\n                if (this._isVertical) {\r\n                    context.arc(left + backgroundBoxThickness / 2, top + thumbPosition, radius, 0, 2 * Math.PI);\r\n                }\r\n                else {\r\n                    context.arc(left + thumbPosition, top + (backgroundBoxThickness / 2), radius, 0, 2 * Math.PI);\r\n                }\r\n                context.fill();\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                context.stroke();\r\n            }\r\n            else {\r\n                if (this._isVertical) {\r\n                    context.fillRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.fillRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n                if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                    context.shadowBlur = 0;\r\n                    context.shadowOffsetX = 0;\r\n                    context.shadowOffsetY = 0;\r\n                }\r\n                context.strokeStyle = this._borderColor;\r\n                if (this._isVertical) {\r\n                    context.strokeRect(left - effectiveBarOffset, this._currentMeasure.top + thumbPosition, this._currentMeasure.width, effectiveThumbThickness);\r\n                }\r\n                else {\r\n                    context.strokeRect(this._currentMeasure.left + thumbPosition, this._currentMeasure.top, effectiveThumbThickness, this._currentMeasure.height);\r\n                }\r\n            }\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this.rotation != 0) {\r\n            this._invertTransformMatrix.transformCoordinates(x, y, this._transformedPosition);\r\n            x = this._transformedPosition.x;\r\n            y = this._transformedPosition.y;\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            this.value = this._minimum + (1 - ((y - this._currentMeasure.top) / this._currentMeasure.height)) * (this._maximum - this._minimum);\r\n        }\r\n        else {\r\n            this.value = this._minimum + ((x - this._currentMeasure.left) / this._currentMeasure.width) * (this._maximum - this._minimum);\r\n        }\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}\r\n","import { IDisposable, Observable } from \"babylonjs\";\r\nimport { AdvancedDynamicTexture } from \"./advancedDynamicTexture\";\r\nimport { ValueAndUnit } from \"./valueAndUnit\";\r\n\r\n/**\r\n * Define a style used by control to automatically setup properties based on a template.\r\n * Only support font related properties so far\r\n */\r\nexport class Style implements IDisposable {\r\n    private _fontFamily = \"Arial\";\r\n    private _fontStyle = \"\";\r\n    private _fontWeight = \"\";\r\n    /** @hidden */\r\n    public _host: AdvancedDynamicTexture;\r\n    /** @hidden */\r\n    public _fontSize = new ValueAndUnit(18, ValueAndUnit.UNITMODE_PIXEL, false);\r\n\r\n    /**\r\n     * Observable raised when the style values are changed\r\n     */\r\n    public onChangedObservable = new Observable<Style>();\r\n\r\n    /**\r\n     * Creates a new style object\r\n     * @param host defines the AdvancedDynamicTexture which hosts this style\r\n     */\r\n    public constructor(host: AdvancedDynamicTexture) {\r\n        this._host = host;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font size\r\n     */\r\n    public get fontSize(): string | number {\r\n        return this._fontSize.toString(this._host);\r\n    }\r\n\r\n    public set fontSize(value: string | number) {\r\n        if (this._fontSize.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._fontSize.fromString(value)) {\r\n            this.onChangedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font family\r\n     */\r\n    public get fontFamily(): string {\r\n        return this._fontFamily;\r\n    }\r\n\r\n    public set fontFamily(value: string) {\r\n        if (this._fontFamily === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontFamily = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the font style \r\n     */\r\n    public get fontStyle(): string {\r\n        return this._fontStyle;\r\n    }\r\n\r\n    public set fontStyle(value: string) {\r\n        if (this._fontStyle === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontStyle = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Gets or sets font weight */\r\n    public get fontWeight(): string {\r\n        return this._fontWeight;\r\n    }\r\n\r\n    public set fontWeight(value: string) {\r\n        if (this._fontWeight === value) {\r\n            return;\r\n        }\r\n\r\n        this._fontWeight = value;\r\n        this.onChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** Dispose all associated resources */\r\n    public dispose() {\r\n        this.onChangedObservable.clear();\r\n    }\r\n}    ","import { Control3D } from \"./control3D\";\r\nimport { TransformNode, Scene } from \"babylonjs\";\r\n\r\n/**\r\n * Class used as a root to all buttons\r\n */\r\nexport class AbstractButton3D extends Control3D {\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"AbstractButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        return new TransformNode(\"button\" + this.name);\r\n    }\r\n}","import { Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to transport Vector3 information for pointer events\r\n */\r\nexport class Vector3WithInfo extends Vector3 {\r\n    /**\r\n     * Creates a new Vector3WithInfo\r\n     * @param source defines the vector3 data to transport\r\n     * @param buttonIndex defines the current mouse button index\r\n     */\r\n    public constructor(source: Vector3,\r\n        /** defines the current mouse button index */\r\n        public buttonIndex: number = 0) {\r\n        super(source.x, source.y, source.z);\r\n    }\r\n}","import { MaterialDefines, PushMaterial, serialize, expandToProperty, serializeAsColor3, Color3, serializeAsColor4, Color4, serializeAsVector3, Vector3, Scene, Nullable, BaseTexture, AbstractMesh, SubMesh, VertexBuffer, MaterialHelper, EffectCreationOptions, Matrix, Mesh, Tmp, SerializationHelper, serializeAsTexture } from \"babylonjs\";\r\n\r\nimport { registerShader } from \"./shaders/fluent\";\r\n\r\n// register shaders\r\nregisterShader();\r\n\r\n/** @hidden */\r\nexport class FluentMaterialDefines extends MaterialDefines {\r\n    public INNERGLOW = false;\r\n    public BORDER = false;\r\n    public HOVERLIGHT = false;\r\n    public TEXTURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to render controls with fluent desgin\r\n */\r\nexport class FluentMaterial extends PushMaterial {\r\n\r\n    /**\r\n     * Gets or sets inner glow intensity. A value of 0 means no glow (default is 0.5)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public innerGlowColorIntensity = 0.5;\r\n\r\n    /**\r\n     * Gets or sets the inner glow color (white by default)\r\n     */\r\n    @serializeAsColor3()\r\n    public innerGlowColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Gets or sets alpha value (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public alpha = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the albedo color (Default is Color3(0.3, 0.35, 0.4))\r\n     */\r\n    @serializeAsColor3()\r\n    public albedoColor = new Color3(0.3, 0.35, 0.4);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if borders must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderBorders = false;\r\n\r\n    /**\r\n     * Gets or sets border width (default is 0.5)\r\n     */\r\n    @serialize()\r\n    public borderWidth = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a value indicating the smoothing value applied to border edges (0.02 by default)\r\n     */\r\n    @serialize()\r\n    public edgeSmoothingValue = 0.02;\r\n\r\n    /**\r\n     * Gets or sets the minimum value that can be applied to border width (default is 0.1)\r\n     */\r\n    @serialize()\r\n    public borderMinValue = 0.1;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if hover light must be rendered (default is false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public renderHoverLight = false;\r\n\r\n    /**\r\n     * Gets or sets the radius used to render the hover light (default is 1.0)\r\n     */\r\n    @serialize()\r\n    public hoverRadius = 1.0;\r\n\r\n    /**\r\n     * Gets or sets the color used to render the hover light (default is Color4(0.3, 0.3, 0.3, 1.0))\r\n     */\r\n    @serializeAsColor4()\r\n    public hoverColor = new Color4(0.3, 0.3, 0.3, 1.0);\r\n\r\n    /**\r\n     * Gets or sets the hover light position in world space (default is Vector3.Zero())\r\n     */\r\n    @serializeAsVector3()\r\n    public hoverPosition = Vector3.Zero();\r\n\r\n    @serializeAsTexture(\"albedoTexture\")\r\n    private _albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /** Gets or sets the texture to use for albedo color */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;    \r\n\r\n    /**\r\n     * Creates a new Fluent material\r\n     * @param name defines the name of the material\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n    }\r\n\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha !== 1.0;\r\n    }\r\n\r\n    public needAlphaTesting(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return null;\r\n    }\r\n\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (this.isFrozen) {\r\n            if (this._wasPreviouslyReady && subMesh.effect) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new FluentMaterialDefines();\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!this.checkReadyOnEveryCall && subMesh.effect) {\r\n            if (defines._renderId === scene.getRenderId()) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.INNERGLOW = this.innerGlowColorIntensity > 0;\r\n            defines.BORDER = this.renderBorders;\r\n            defines.HOVERLIGHT = this.renderHoverLight;\r\n\r\n            if (this._albedoTexture) {\r\n                if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                    return false;\r\n                } else {\r\n                    defines.TEXTURE = true;\r\n                }\r\n            } else {\r\n                defines.TEXTURE = false;\r\n            }\r\n        }\r\n\r\n        var engine = scene.getEngine();\r\n        // Get correct effect      \r\n        if (defines.isDirty) {\r\n            defines.markAsProcessed();\r\n            scene.resetCachedMaterial();\r\n\r\n            //Attributes\r\n            var attribs = [VertexBuffer.PositionKind];\r\n            attribs.push(VertexBuffer.NormalKind);\r\n            attribs.push(VertexBuffer.UVKind);\r\n\r\n            var shaderName = \"fluent\";\r\n\r\n            var uniforms = [\"world\", \"viewProjection\", \"innerGlowColor\", \"albedoColor\", \"borderWidth\", \"edgeSmoothingValue\", \"scaleFactor\", \"borderMinValue\",\r\n                \"hoverColor\", \"hoverPosition\", \"hoverRadius\"\r\n            ];\r\n\r\n            var samplers = [\"albedoSampler\"];\r\n            var uniformBuffers = new Array<string>();\r\n\r\n            MaterialHelper.PrepareUniformsAndSamplersList(<EffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: 4\r\n            });\r\n\r\n            var join = defines.toString();\r\n            subMesh.setEffect(scene.getEngine().createEffect(shaderName,\r\n                <EffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: null,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousLights: 4 }\r\n                }, engine));\r\n\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        this._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <FluentMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices        \r\n        this.bindOnlyWorldMatrix(world);\r\n        this._activeEffect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n\r\n\r\n        if (this._mustRebind(scene, effect)) {\r\n            this._activeEffect.setColor4(\"albedoColor\", this.albedoColor, this.alpha);\r\n\r\n            if (defines.INNERGLOW) {\r\n                this._activeEffect.setColor4(\"innerGlowColor\", this.innerGlowColor, this.innerGlowColorIntensity);\r\n            }\r\n\r\n            if (defines.BORDER) {\r\n                this._activeEffect.setFloat(\"borderWidth\", this.borderWidth);\r\n                this._activeEffect.setFloat(\"edgeSmoothingValue\", this.edgeSmoothingValue);\r\n                this._activeEffect.setFloat(\"borderMinValue\", this.borderMinValue);\r\n\r\n                mesh.getBoundingInfo().boundingBox.extendSize.multiplyToRef(mesh.scaling, Tmp.Vector3[0]);\r\n                this._activeEffect.setVector3(\"scaleFactor\", Tmp.Vector3[0]);\r\n            }\r\n\r\n            if (defines.HOVERLIGHT) {\r\n                this._activeEffect.setDirectColor4(\"hoverColor\", this.hoverColor);\r\n                this._activeEffect.setFloat(\"hoverRadius\", this.hoverRadius);\r\n                this._activeEffect.setVector3(\"hoverPosition\", this.hoverPosition);\r\n            }\r\n\r\n            if (defines.TEXTURE) {\r\n                this._activeEffect.setTexture(\"albedoSampler\", this._albedoTexture)\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public dispose(forceDisposeEffect?: boolean): void {\r\n        super.dispose(forceDisposeEffect);\r\n    }\r\n\r\n    public clone(name: string): FluentMaterial {\r\n        return SerializationHelper.Clone(() => new FluentMaterial(name, this.getScene()), this);\r\n    }\r\n\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.GUI.FluentMaterial\";\r\n        return serializationObject;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"FluentMaterial\";\r\n    }\r\n\r\n    // Statics\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): FluentMaterial {\r\n        return SerializationHelper.Parse(() => new FluentMaterial(source.name, scene), source, scene, rootUrl);\r\n    }\r\n}","import * as GUI from \"./index\";\r\n\r\n/**\r\n * Legacy support, defining window.BABYLON.GUI (global variable).\r\n * \r\n * This is the entry point for the UMD module. \r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nvar globalObject = (typeof global !== 'undefined') ? global : ((typeof window !== 'undefined') ? window : undefined);\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    (<any>globalObject).BABYLON.GUI = GUI;\r\n}\r\n\r\nexport * from \"./index\";","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","export * from \"./controls\";\r\n\r\nexport * from \"./advancedDynamicTexture\";\r\nexport * from \"./math2D\";\r\nexport * from \"./measure\";\r\nexport * from \"./multiLinePoint\";\r\nexport * from \"./style\";\r\nexport * from \"./valueAndUnit\";","import { Control } from \"./control\";\r\nimport { Color3, Observable, Vector2 } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create color pickers */\r\nexport class ColorPicker extends Control {\r\n    private _colorWheelCanvas: HTMLCanvasElement;\r\n\r\n    private _value: Color3 = Color3.Red();\r\n    private _tmpColor = new Color3();\r\n\r\n    private _pointerStartedOnSquare = false;\r\n    private _pointerStartedOnWheel = false;\r\n\r\n    private _squareLeft = 0;\r\n    private _squareTop = 0;\r\n    private _squareSize = 0;\r\n\r\n    private _h = 360;\r\n    private _s = 1;\r\n    private _v = 1;\r\n\r\n    /**\r\n     * Observable raised when the value changes\r\n     */\r\n    public onValueChangedObservable = new Observable<Color3>();\r\n\r\n    /** Gets or sets the color of the color picker */\r\n    public get value(): Color3 {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: Color3) {\r\n        if (this._value.equals(value)) {\r\n            return;\r\n        }\r\n\r\n        this._value.copyFrom(value);\r\n\r\n        this._RGBtoHSV(this._value, this._tmpColor);\r\n\r\n        this._h = this._tmpColor.r;\r\n        this._s = Math.max(this._tmpColor.g, 0.00001);\r\n        this._v = Math.max(this._tmpColor.b, 0.00001);\r\n\r\n        this._markAsDirty();\r\n\r\n        this.onValueChangedObservable.notifyObservers(this._value);\r\n    }\r\n\r\n    /** Gets or sets control width */\r\n    public set width(value: string | number) {\r\n        if (this._width.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._width.fromString(value)) {\r\n            this._height.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control height */\r\n    public set height(value: string | number) {\r\n        if (this._height.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._height.fromString(value)) {\r\n            this._width.fromString(value);\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets control size */\r\n    public get size(): string | number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: string | number) {\r\n        this.width = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ColorPicker\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n        this.value = new Color3(.88, .1, .1);\r\n        this.size = \"200px\";\r\n        this.isPointerBlocker = true;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"ColorPicker\";\r\n    }\r\n\r\n    private _updateSquareProps(): void {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var wheelThickness = radius * .2;\r\n        var innerDiameter = (radius - wheelThickness) * 2;\r\n        var squareSize = innerDiameter / (Math.sqrt(2));\r\n        var offset = radius - squareSize * .5;\r\n\r\n        this._squareLeft = this._currentMeasure.left + offset;\r\n        this._squareTop = this._currentMeasure.top + offset;\r\n        this._squareSize = squareSize;\r\n    }\r\n\r\n    private _drawGradientSquare(hueValue: number, left: number, top: number, width: number, height: number, context: CanvasRenderingContext2D) {\r\n        var lgh = context.createLinearGradient(left, top, width + left, top);\r\n        lgh.addColorStop(0, '#fff');\r\n        lgh.addColorStop(1, 'hsl(' + hueValue + ', 100%, 50%)');\r\n\r\n        context.fillStyle = lgh;\r\n        context.fillRect(left, top, width, height);\r\n\r\n        var lgv = context.createLinearGradient(left, top, left, height + top);\r\n        lgv.addColorStop(0, 'rgba(0,0,0,0)');\r\n        lgv.addColorStop(1, '#000');\r\n\r\n        context.fillStyle = lgv;\r\n        context.fillRect(left, top, width, height);\r\n    }\r\n\r\n    private _drawCircle(centerX: number, centerY: number, radius: number, context: CanvasRenderingContext2D) {\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius + 1, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#333333';\r\n        context.stroke();\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = '#ffffff';\r\n        context.stroke();\r\n    }\r\n\r\n    private _createColorWheelCanvas(radius: number, thickness: number): HTMLCanvasElement {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = radius * 2;\r\n        canvas.height = radius * 2;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        var image = context.getImageData(0, 0, radius * 2, radius * 2);\r\n        var data = image.data;\r\n\r\n        var color = this._tmpColor;\r\n        var maxDistSq = radius * radius;\r\n        var innerRadius = radius - thickness;\r\n        var minDistSq = innerRadius * innerRadius;\r\n\r\n        for (var x = -radius; x < radius; x++) {\r\n            for (var y = -radius; y < radius; y++) {\r\n\r\n                var distSq = x * x + y * y;\r\n\r\n                if (distSq > maxDistSq || distSq < minDistSq) {\r\n                    continue;\r\n                }\r\n\r\n                var dist = Math.sqrt(distSq);\r\n                var ang = Math.atan2(y, x);\r\n\r\n                this._HSVtoRGB(ang * 180 / Math.PI + 180, dist / radius, 1, color);\r\n\r\n                var index = ((x + radius) + ((y + radius) * 2 * radius)) * 4;\r\n\r\n                data[index] = color.r * 255;\r\n                data[index + 1] = color.g * 255;\r\n                data[index + 2] = color.b * 255;\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                //apply less alpha to bigger color pickers\r\n                var alphaAmount = .2;\r\n                var maxAlpha = .2;\r\n                var minAlpha = .04;\r\n                var lowerRadius = 50;\r\n                var upperRadius = 150;\r\n\r\n                if (radius < lowerRadius) {\r\n                    alphaAmount = maxAlpha;\r\n                } else if (radius > upperRadius) {\r\n                    alphaAmount = minAlpha;\r\n                } else {\r\n                    alphaAmount = (minAlpha - maxAlpha) * (radius - lowerRadius) / (upperRadius - lowerRadius) + maxAlpha;\r\n                }\r\n\r\n                var alphaRatio = (dist - innerRadius) / (radius - innerRadius);\r\n\r\n                if (alphaRatio < alphaAmount) {\r\n                    data[index + 3] = 255 * (alphaRatio / alphaAmount);\r\n                } else if (alphaRatio > 1 - alphaAmount) {\r\n                    data[index + 3] = 255 * (1.0 - ((alphaRatio - (1 - alphaAmount)) / alphaAmount));\r\n                } else {\r\n                    data[index + 3] = 255;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        context.putImageData(image, 0, 0);\r\n\r\n        return canvas;\r\n    }\r\n\r\n    private _RGBtoHSV(color: Color3, result: Color3) {\r\n        var r = color.r;\r\n        var g = color.g;\r\n        var b = color.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    private _HSVtoRGB(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var wheelThickness = radius * .2;\r\n            var left = this._currentMeasure.left;\r\n            var top = this._currentMeasure.top;\r\n\r\n            if (!this._colorWheelCanvas || this._colorWheelCanvas.width != radius * 2) {\r\n                this._colorWheelCanvas = this._createColorWheelCanvas(radius, wheelThickness);\r\n            }\r\n\r\n            this._updateSquareProps();\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowColor = this.shadowColor;\r\n                context.shadowBlur = this.shadowBlur;\r\n                context.shadowOffsetX = this.shadowOffsetX;\r\n                context.shadowOffsetY = this.shadowOffsetY;\r\n\r\n                context.fillRect(this._squareLeft, this._squareTop, this._squareSize, this._squareSize);\r\n            }\r\n\r\n            context.drawImage(this._colorWheelCanvas, left, top);\r\n\r\n            if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n                context.shadowBlur = 0;\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n            }\r\n\r\n            this._drawGradientSquare(this._h,\r\n                this._squareLeft,\r\n                this._squareTop,\r\n                this._squareSize,\r\n                this._squareSize,\r\n                context);\r\n\r\n            var cx = this._squareLeft + this._squareSize * this._s;\r\n            var cy = this._squareTop + this._squareSize * (1 - this._v);\r\n\r\n            this._drawCircle(cx, cy, radius * .04, context);\r\n\r\n            var dist = radius - wheelThickness * .5;\r\n            cx = left + radius + Math.cos((this._h - 180) * Math.PI / 180) * dist;\r\n            cy = top + radius + Math.sin((this._h - 180) * Math.PI / 180) * dist;\r\n            this._drawCircle(cx, cy, wheelThickness * .35, context);\r\n\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    // Events\r\n    private _pointerIsDown = false;\r\n\r\n    private _updateValueFromPointer(x: number, y: number): void {\r\n        if (this._pointerStartedOnWheel) {\r\n            var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n            var centerX = radius + this._currentMeasure.left;\r\n            var centerY = radius + this._currentMeasure.top;\r\n            this._h = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI + 180;\r\n        }\r\n        else if (this._pointerStartedOnSquare) {\r\n            this._updateSquareProps();\r\n            this._s = (x - this._squareLeft) / this._squareSize;\r\n            this._v = 1 - (y - this._squareTop) / this._squareSize;\r\n            this._s = Math.min(this._s, 1);\r\n            this._s = Math.max(this._s, 0.00001);\r\n            this._v = Math.min(this._v, 1);\r\n            this._v = Math.max(this._v, 0.00001);\r\n        }\r\n\r\n        this._HSVtoRGB(this._h, this._s, this._v, this._tmpColor);\r\n\r\n        this.value = this._tmpColor;\r\n    }\r\n\r\n    private _isPointOnSquare(coordinates: Vector2): boolean {\r\n        this._updateSquareProps();\r\n\r\n        var left = this._squareLeft;\r\n        var top = this._squareTop;\r\n        var size = this._squareSize;\r\n\r\n        if (coordinates.x >= left && coordinates.x <= left + size &&\r\n            coordinates.y >= top && coordinates.y <= top + size) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _isPointOnWheel(coordinates: Vector2): boolean {\r\n        var radius = Math.min(this._currentMeasure.width, this._currentMeasure.height) * .5;\r\n        var centerX = radius + this._currentMeasure.left;\r\n        var centerY = radius + this._currentMeasure.top;\r\n        var wheelThickness = radius * .2;\r\n        var innerRadius = radius - wheelThickness;\r\n        var radiusSq = radius * radius;\r\n        var innerRadiusSq = innerRadius * innerRadius;\r\n\r\n        var dx = coordinates.x - centerX;\r\n        var dy = coordinates.y - centerY;\r\n\r\n        var distSq = dx * dx + dy * dy;\r\n\r\n        if (distSq <= radiusSq && distSq >= innerRadiusSq) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _onPointerDown(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number): boolean {\r\n        if (!super._onPointerDown(target, coordinates, pointerId, buttonIndex)) {\r\n            return false;\r\n        }\r\n\r\n        this._pointerIsDown = true;\r\n\r\n        this._pointerStartedOnSquare = false;\r\n        this._pointerStartedOnWheel = false;\r\n\r\n        if (this._isPointOnSquare(coordinates)) {\r\n            this._pointerStartedOnSquare = true;\r\n        } else if (this._isPointOnWheel(coordinates)) {\r\n            this._pointerStartedOnWheel = true;\r\n        }\r\n\r\n        this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        this._host._capturingControl[pointerId] = this;\r\n\r\n        return true;\r\n    }\r\n\r\n    public _onPointerMove(target: Control, coordinates: Vector2): void {\r\n        if (this._pointerIsDown) {\r\n            this._updateValueFromPointer(coordinates.x, coordinates.y);\r\n        }\r\n\r\n        super._onPointerMove(target, coordinates);\r\n    }\r\n\r\n    public _onPointerUp(target: Control, coordinates: Vector2, pointerId: number, buttonIndex: number, notifyClick: boolean): void {\r\n        this._pointerIsDown = false;\r\n\r\n        delete this._host._capturingControl[pointerId];\r\n        super._onPointerUp(target, coordinates, pointerId, buttonIndex, notifyClick);\r\n    }\r\n}  ","import { Container } from \"./container\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to create 2D ellipse containers */\r\nexport class Ellipse extends Container {\r\n    private _thickness = 1;\r\n\r\n    /** Gets or sets border thickness */\r\n    public get thickness(): number {\r\n        return this._thickness;\r\n    }\r\n\r\n    public set thickness(value: number) {\r\n        if (this._thickness === value) {\r\n            return;\r\n        }\r\n\r\n        this._thickness = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new Ellipse\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Ellipse\";\r\n    }\r\n\r\n    protected _localDraw(context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2,\r\n            this._currentMeasure.width / 2 - this._thickness / 2, this._currentMeasure.height / 2 - this._thickness / 2, context);\r\n\r\n        if (this._background) {\r\n            context.fillStyle = this._background;\r\n\r\n            context.fill();\r\n        }\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowBlur = 0;\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n        }\r\n\r\n        if (this._thickness) {\r\n            if (this.color) {\r\n                context.strokeStyle = this.color;\r\n            }\r\n            context.lineWidth = this._thickness;\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        super._additionalProcessing(parentMeasure, context);\r\n\r\n        this._measureForChildren.width -= 2 * this._thickness;\r\n        this._measureForChildren.height -= 2 * this._thickness;\r\n        this._measureForChildren.left += this._thickness;\r\n        this._measureForChildren.top += this._thickness;\r\n    }\r\n\r\n    protected _clipForChildren(context: CanvasRenderingContext2D) {\r\n\r\n        Control.drawEllipse(this._currentMeasure.left + this._currentMeasure.width / 2, this._currentMeasure.top + this._currentMeasure.height / 2, this._currentMeasure.width / 2, this._currentMeasure.height / 2, context);\r\n\r\n        context.clip();\r\n    }\r\n}   ","import { Container } from \"./container\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Control } from \"./control\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/**\r\n * Class used to create a 2D grid container\r\n */\r\nexport class Grid extends Container {\r\n    private _rowDefinitions = new Array<ValueAndUnit>();\r\n    private _columnDefinitions = new Array<ValueAndUnit>();\r\n    private _cells: { [key: string]: Container } = {};\r\n    private _childControls = new Array<Control>();\r\n\r\n    /** Gets the list of children */\r\n    public get children(): Control[] {\r\n        return this._childControls;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row to the grid\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the height is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addRowDefinition(height: number, isPixel = false): Grid {\r\n        this._rowDefinitions.push(new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to the grid\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public addColumnDefinition(width: number, isPixel = false): Grid {\r\n        this._columnDefinitions.push(new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE));\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a row definition\r\n     * @param index defines the index of the row to update\r\n     * @param height defines the height of the row (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the weight is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setRowDefinition(index: number, height: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._rowDefinitions[index] = new ValueAndUnit(height, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a column definition\r\n     * @param index defines the index of the column to update\r\n     * @param width defines the width of the column (either in pixel or a value between 0 and 1)\r\n     * @param isPixel defines if the width is expressed in pixel (or in percentage)\r\n     * @returns the current grid\r\n     */\r\n    public setColumnDefinition(index: number, width: number, isPixel = false): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        this._columnDefinitions[index] = new ValueAndUnit(width, isPixel ? ValueAndUnit.UNITMODE_PIXEL : ValueAndUnit.UNITMODE_PERCENTAGE);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    private _removeCell(cell: Container, key: string) {\r\n        if (!cell) {\r\n            return;\r\n        }\r\n\r\n        super.removeControl(cell);\r\n\r\n        for (var control of cell.children) {\r\n            let childIndex = this._childControls.indexOf(control);\r\n\r\n            if (childIndex !== -1) {\r\n                this._childControls.splice(childIndex, 1);\r\n            }\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    private _offsetCell(previousKey: string, key: string) {\r\n        if (!this._cells[key]) {\r\n            return;\r\n        }\r\n\r\n        this._cells[previousKey] = this._cells[key];\r\n\r\n        for (var control of this._cells[previousKey].children) {\r\n            control._tag = previousKey;\r\n        }\r\n\r\n        delete this._cells[key];\r\n    }\r\n\r\n    /**\r\n     * Remove a column definition at specified index\r\n     * @param index defines the index of the column to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeColumnDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._columnDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            let key = `${x}:${index}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var x = 0; x < this._rowDefinitions.length; x++) {\r\n            for (var y = index + 1; y < this._columnDefinitions.length; y++) {\r\n                let previousKey = `${x}:${y - 1}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._columnDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a row definition at specified index\r\n     * @param index defines the index of the row to remove\r\n     * @returns the current grid\r\n     */\r\n    public removeRowDefinition(index: number): Grid {\r\n        if (index < 0 || index >= this._rowDefinitions.length) {\r\n            return this;\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            let key = `${index}:${y}`;\r\n            let cell = this._cells[key];\r\n\r\n            this._removeCell(cell, key);\r\n        }\r\n\r\n        for (var y = 0; y < this._columnDefinitions.length; y++) {\r\n            for (var x = index + 1; x < this._rowDefinitions.length; x++) {\r\n                let previousKey = `${x - 1}:${y}`;\r\n                let key = `${x}:${y}`;\r\n\r\n                this._offsetCell(previousKey, key);\r\n            }\r\n        }\r\n\r\n        this._rowDefinitions.splice(index, 1);\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a new control to the current grid\r\n     * @param control defines the control to add\r\n     * @param row defines the row where to add the control (0 by default)\r\n     * @param column defines the column where to add the control (0 by default)\r\n     * @returns the current grid\r\n     */\r\n    public addControl(control: Control, row: number = 0, column: number = 0): Grid {\r\n        if (this._rowDefinitions.length === 0) {\r\n            // Add default row definition\r\n            this.addRowDefinition(1, false);\r\n        }\r\n\r\n        if (this._columnDefinitions.length === 0) {\r\n            // Add default column definition\r\n            this.addColumnDefinition(1, false);\r\n        }\r\n\r\n        let x = Math.min(row, this._rowDefinitions.length - 1);\r\n        let y = Math.min(column, this._columnDefinitions.length - 1);\r\n        let key = `${x}:${y}`;\r\n        let goodContainer = this._cells[key];\r\n\r\n        if (!goodContainer) {\r\n            goodContainer = new Container(key);\r\n            this._cells[key] = goodContainer;\r\n            goodContainer.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n            goodContainer.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n            super.addControl(goodContainer);\r\n        }\r\n\r\n        goodContainer.addControl(control);\r\n        this._childControls.push(control);\r\n        control._tag = key;\r\n\r\n        this._markAsDirty();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the current container\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control): Container {\r\n        var index = this._childControls.indexOf(control);\r\n\r\n        if (index !== -1) {\r\n            this._childControls.splice(index, 1);\r\n        }\r\n\r\n        let cell = this._cells[control._tag];\r\n\r\n        if (cell) {\r\n            cell.removeControl(control);\r\n        }\r\n\r\n        this._markAsDirty();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Grid\r\n     * @param name defines control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Grid\";\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        let widths = [];\r\n        let heights = [];\r\n        let lefts = [];\r\n        let tops = [];\r\n\r\n        let availableWidth = this._currentMeasure.width;\r\n        let globalWidthPercentage = 0;\r\n        let availableHeight = this._currentMeasure.height;\r\n        let globalHeightPercentage = 0;\r\n\r\n        // Heights\r\n        let index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            if (value.isPixel) {\r\n                let height = value.getValue(this._host);\r\n                availableHeight -= height;\r\n                heights[index] = height;\r\n            } else {\r\n                globalHeightPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let top = 0;\r\n        index = 0;\r\n        for (var value of this._rowDefinitions) {\r\n            tops.push(top);\r\n\r\n            if (!value.isPixel) {\r\n                let height = (value.internalValue / globalHeightPercentage) * availableHeight;\r\n                top += height;\r\n                heights[index] = height;\r\n            } else {\r\n                top += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Widths\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            if (value.isPixel) {\r\n                let width = value.getValue(this._host);\r\n                availableWidth -= width;\r\n                widths[index] = width;\r\n            } else {\r\n                globalWidthPercentage += value.internalValue;\r\n            }\r\n            index++;\r\n        }\r\n\r\n        let left = 0;\r\n        index = 0;\r\n        for (var value of this._columnDefinitions) {\r\n            lefts.push(left);\r\n            if (!value.isPixel) {\r\n                let width = (value.internalValue / globalWidthPercentage) * availableWidth;\r\n                left += width;\r\n                widths[index] = width;\r\n            } else {\r\n                left += value.getValue(this._host);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        // Setting child sizes\r\n        for (var key in this._cells) {\r\n            if (!this._cells.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            let split = key.split(\":\");\r\n            let x = parseInt(split[0]);\r\n            let y = parseInt(split[1]);\r\n            let cell = this._cells[key];\r\n\r\n            cell.left = lefts[y] + \"px\";\r\n            cell.top = tops[x] + \"px\";\r\n            cell.width = widths[y] + \"px\";\r\n            cell.height = heights[x] + \"px\";\r\n        }\r\n\r\n        super._additionalProcessing(parentMeasure, context);\r\n    }\r\n\r\n    /** Releases associated resources */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        for (var control of this._childControls) {\r\n            control.dispose();\r\n        }\r\n    }\r\n}","import { InputText } from \"./inputText\";\r\n\r\n/**\r\n * Class used to create a password control\r\n */\r\nexport class InputPassword extends InputText {\r\n    protected _beforeRenderText(text: string): string {\r\n        let txt = \"\";\r\n        for (let i = 0; i < text.length; i++) {\r\n            txt += \"\\u2022\";\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Control } from \"./control\";\r\nimport { ValueAndUnit } from \"../valueAndUnit\";\r\nimport { Nullable, Observer, Vector3, Scene, Tools, Matrix } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n/** Class used to render 2D lines */\r\nexport class Line extends Control {\r\n    private _lineWidth = 1;\r\n    private _x1 = new ValueAndUnit(0);\r\n    private _y1 = new ValueAndUnit(0);\r\n    private _x2 = new ValueAndUnit(0);\r\n    private _y2 = new ValueAndUnit(0);\r\n    private _dash = new Array<number>();\r\n    private _connectedControl: Control;\r\n    private _connectedControlDirtyObserver: Nullable<Observer<Control>>;\r\n\r\n    /** Gets or sets the dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the control connected with the line end */\r\n    public get connectedControl(): Control {\r\n        return this._connectedControl;\r\n    }\r\n\r\n    public set connectedControl(value: Control) {\r\n        if (this._connectedControl === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._connectedControlDirtyObserver && this._connectedControl) {\r\n            this._connectedControl.onDirtyObservable.remove(this._connectedControlDirtyObserver);\r\n            this._connectedControlDirtyObserver = null;\r\n        }\r\n\r\n        if (value) {\r\n            this._connectedControlDirtyObserver = value.onDirtyObservable.add(() => this._markAsDirty());\r\n        }\r\n\r\n        this._connectedControl = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets start coordinates on X axis */\r\n    public get x1(): string | number {\r\n        return this._x1.toString(this._host);\r\n    }\r\n\r\n    public set x1(value: string | number) {\r\n        if (this._x1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets start coordinates on Y axis */\r\n    public get y1(): string | number {\r\n        return this._y1.toString(this._host);\r\n    }\r\n\r\n    public set y1(value: string | number) {\r\n        if (this._y1.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y1.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on X axis */\r\n    public get x2(): string | number {\r\n        return this._x2.toString(this._host);\r\n    }\r\n\r\n    public set x2(value: string | number) {\r\n        if (this._x2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._x2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets end coordinates on Y axis */\r\n    public get y2(): string | number {\r\n        return this._y2.toString(this._host);\r\n    }\r\n\r\n    public set y2(value: string | number) {\r\n        if (this._y2.toString(this._host) === value) {\r\n            return;\r\n        }\r\n\r\n        if (this._y2.fromString(value)) {\r\n            this._markAsDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets horizontal alignment */\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    /** Gets or sets vertical alignment */\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    private get _effectiveX2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerX : 0) + this._x2.getValue(this._host);\r\n    }\r\n\r\n    private get _effectiveY2(): number {\r\n        return (this._connectedControl ? this._connectedControl.centerY : 0) + this._y2.getValue(this._host);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Line\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"Line\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n            context.moveTo(this._x1.getValue(this._host), this._y1.getValue(this._host));\r\n\r\n            context.lineTo(this._effectiveX2, this._effectiveY2);\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    public _measure(): void {\r\n        // Width / Height\r\n        this._currentMeasure.width = Math.abs(this._x1.getValue(this._host) - this._effectiveX2) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._y1.getValue(this._host) - this._effectiveY2) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._currentMeasure.left = Math.min(this._x1.getValue(this._host), this._effectiveX2) - this._lineWidth / 2;\r\n        this._currentMeasure.top = Math.min(this._y1.getValue(this._host), this._effectiveY2) - this._lineWidth / 2;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line given 3D cartesian coordinates.\r\n     * @param position Targeted world position\r\n     * @param scene Scene\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public moveToVector3(position: Vector3, scene: Scene, end: boolean = false): void {\r\n        if (!this._host || this._root !== this._host._rootContainer) {\r\n            Tools.Error(\"Cannot move a control to a vector3 if the control is not at root level\");\r\n            return;\r\n        }\r\n\r\n        var globalViewport = this._host._getGlobalViewport(scene);\r\n        var projectedPosition = Vector3.Project(position, Matrix.Identity(), scene.getTransformMatrix(), globalViewport);\r\n\r\n        this._moveToProjectedPosition(projectedPosition, end)\r\n\r\n        if (projectedPosition.z < 0 || projectedPosition.z > 1) {\r\n            this.notRenderable = true;\r\n            return;\r\n        }\r\n        this.notRenderable = false;\r\n    }\r\n\r\n    /**\r\n     * Move one end of the line to a position in screen absolute space.\r\n     * @param projectedPosition Position in screen absolute space (X, Y)\r\n     * @param end (opt) Set to true to assign x2 and y2 coordinates of the line. Default assign to x1 and y1.\r\n     */\r\n    public _moveToProjectedPosition(projectedPosition: Vector3, end: boolean = false): void {\r\n        let x: string = (projectedPosition.x + this._linkOffsetX.getValue(this._host)) + \"px\";\r\n        let y: string = (projectedPosition.y + this._linkOffsetY.getValue(this._host)) + \"px\";\r\n\r\n        if (end) {\r\n            this.x2 = x;\r\n            this.y2 = y;\r\n            this._x2.ignoreAdaptiveScaling = true;\r\n            this._y2.ignoreAdaptiveScaling = true;\r\n        } else {\r\n            this.x1 = x;\r\n            this.y1 = y;\r\n            this._x1.ignoreAdaptiveScaling = true;\r\n            this._y1.ignoreAdaptiveScaling = true;\r\n        }\r\n    }\r\n}   \r\n","import { Control } from \"./control\";\r\nimport { MultiLinePoint } from \"../multiLinePoint\";\r\nimport { Nullable, AbstractMesh } from \"babylonjs\";\r\nimport { Measure } from \"../measure\";\r\n\r\n\r\n/**\r\n * Class used to create multi line control\r\n */\r\nexport class MultiLine extends Control {\r\n\r\n    private _lineWidth: number = 1;\r\n    private _dash: number[];\r\n    private _points: Nullable<MultiLinePoint>[];\r\n\r\n    private _minX: Nullable<number>;\r\n    private _minY: Nullable<number>;\r\n    private _maxX: Nullable<number>;\r\n    private _maxY: Nullable<number>;\r\n\r\n    /**\r\n     * Creates a new MultiLine\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n\r\n        this.isHitTestVisible = false;\r\n        this._horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n\r\n        this._dash = [];\r\n        this._points = [];\r\n    }\r\n\r\n    /** Gets or sets dash pattern */\r\n    public get dash(): Array<number> {\r\n        return this._dash;\r\n    }\r\n\r\n    public set dash(value: Array<number>) {\r\n        if (this._dash === value) {\r\n            return;\r\n        }\r\n\r\n        this._dash = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets point stored at specified index\r\n     * @param index defines the index to look for\r\n     * @returns the requested point if found\r\n     */\r\n    public getAt(index: number): MultiLinePoint {\r\n        if (!this._points[index]) {\r\n            this._points[index] = new MultiLinePoint(this);\r\n        }\r\n\r\n        return this._points[index] as MultiLinePoint;\r\n    }\r\n\r\n    /** Function called when a point is updated */\r\n    public onPointUpdate = (): void => {\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Adds new points to the point collection\r\n     * @param items defines the list of items (mesh, control or 2d coordiantes) to add \r\n     * @returns the list of created MultiLinePoint\r\n     */\r\n    public add(...items: (AbstractMesh | Control | { x: string | number, y: string | number })[]): MultiLinePoint[] {\r\n        return items.map(item => this.push(item));\r\n    }\r\n\r\n    /**\r\n     * Adds a new point to the point collection\r\n     * @param item defines the item (mesh, control or 2d coordiantes) to add \r\n     * @returns the created MultiLinePoint\r\n     */\r\n    public push(item?: (AbstractMesh | Control | { x: string | number, y: string | number })): MultiLinePoint {\r\n        var point: MultiLinePoint = this.getAt(this._points.length);\r\n\r\n        if (item == null) return point;\r\n\r\n        if (item instanceof AbstractMesh) {\r\n            point.mesh = item;\r\n        }\r\n        else if (item instanceof Control) {\r\n            point.control = item;\r\n        }\r\n        else if (item.x != null && item.y != null) {\r\n            point.x = item.x;\r\n            point.y = item.y;\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Remove a specific value or point from the active point collection\r\n     * @param value defines the value or point to remove\r\n     */\r\n    public remove(value: number | MultiLinePoint): void {\r\n        var index: number;\r\n\r\n        if (value instanceof MultiLinePoint) {\r\n            index = this._points.indexOf(value);\r\n\r\n            if (index === -1) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            index = value;\r\n        }\r\n\r\n        var point: Nullable<MultiLinePoint> = this._points[index];\r\n\r\n        if (!point) {\r\n            return;\r\n        }\r\n\r\n        point.dispose();\r\n\r\n        this._points.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * Resets this object to initial state (no point)\r\n     */\r\n    public reset(): void {\r\n        while (this._points.length > 0) {\r\n            this.remove(this._points.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets all links\r\n     */\r\n    public resetLinks(): void {\r\n        this._points.forEach(point => {\r\n            if (point != null) point.resetLinks();\r\n        });\r\n    }\r\n\r\n    /** Gets or sets line width */\r\n    public get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n    public set lineWidth(value: number) {\r\n        if (this._lineWidth === value) {\r\n            return;\r\n        }\r\n\r\n        this._lineWidth = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    public set horizontalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    public set verticalAlignment(value: number) {\r\n        return;\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MultiLine\";\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n\r\n        if (this.shadowBlur || this.shadowOffsetX || this.shadowOffsetY) {\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n        }\r\n\r\n        this._applyStates(context);\r\n\r\n        if (this._processMeasures(parentMeasure, context)) {\r\n            context.strokeStyle = this.color;\r\n            context.lineWidth = this._lineWidth;\r\n            context.setLineDash(this._dash);\r\n\r\n            context.beginPath();\r\n\r\n            var first: boolean = true; //first index is not necessarily 0\r\n\r\n            this._points.forEach(point => {\r\n                if (!point) {\r\n                    return;\r\n                }\r\n\r\n                if (first) {\r\n                    context.moveTo(point._point.x, point._point.y);\r\n\r\n                    first = false;\r\n                }\r\n                else {\r\n                    context.lineTo(point._point.x, point._point.y);\r\n                }\r\n            });\r\n\r\n            context.stroke();\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _additionalProcessing(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        this._minX = null;\r\n        this._minY = null;\r\n        this._maxX = null;\r\n        this._maxY = null;\r\n\r\n        this._points.forEach((point, index) => {\r\n            if (!point) {\r\n                return;\r\n            }\r\n\r\n            point.translate();\r\n\r\n            if (this._minX == null || point._point.x < this._minX) this._minX = point._point.x;\r\n            if (this._minY == null || point._point.y < this._minY) this._minY = point._point.y;\r\n            if (this._maxX == null || point._point.x > this._maxX) this._maxX = point._point.x;\r\n            if (this._maxY == null || point._point.y > this._maxY) this._maxY = point._point.y;\r\n        });\r\n\r\n        if (this._minX == null) this._minX = 0;\r\n        if (this._minY == null) this._minY = 0;\r\n        if (this._maxX == null) this._maxX = 0;\r\n        if (this._maxY == null) this._maxY = 0;\r\n    }\r\n\r\n    public _measure(): void {\r\n        if (this._minX == null || this._maxX == null || this._minY == null || this._maxY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.width = Math.abs(this._maxX - this._minX) + this._lineWidth;\r\n        this._currentMeasure.height = Math.abs(this._maxY - this._minY) + this._lineWidth;\r\n    }\r\n\r\n    protected _computeAlignment(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        if (this._minX == null || this._minY == null) {\r\n            return;\r\n        }\r\n\r\n        this._currentMeasure.left = this._minX - this._lineWidth / 2;\r\n        this._currentMeasure.top = this._minY - this._lineWidth / 2;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n}    \r\n","import {Rectangle} from \"./rectangle\";\r\nimport {StackPanel} from \"./stackPanel\";\r\nimport {Control} from \"./control\";\r\nimport {TextBlock} from \"./textBlock\";\r\nimport {Checkbox} from \"./checkbox\";\r\nimport {RadioButton} from \"./radioButton\";\r\nimport {Slider} from \"./slider\";\r\nimport { Container } from \"./container\";\r\n\r\n/** Class used to create a RadioGroup \r\n * which contains groups of radio buttons\r\n*/\r\nexport class SelectorGroup {\r\n    private _groupPanel = new StackPanel();\r\n    private _selectors: StackPanel[] = new Array();\r\n    private _groupHeader: TextBlock;\r\n\r\n    /**\r\n     * Creates a new SelectorGroup\r\n     * @param name of group, used as a group heading\r\n     */\r\n    constructor(\r\n        /** name of SelectorGroup */\r\n        public name: string, ) {\r\n\r\n        this._groupPanel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._groupPanel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._groupHeader = this._addGroupHeader(name);\r\n    }\r\n\r\n    /** Gets the groupPanel of the SelectorGroup  */\r\n    public get groupPanel(): StackPanel {\r\n        return this._groupPanel;\r\n    }\r\n\r\n    /** Gets the selectors array */\r\n    public get selectors(): StackPanel[] {\r\n        return this._selectors;\r\n    }\r\n\r\n    /** Gets and sets the group header */\r\n    public get header() {\r\n        return this._groupHeader.text;\r\n    }\r\n\r\n    public set header(label: string) {\r\n        if(this._groupHeader.text === \"label\") {\r\n            return\r\n        }\r\n\r\n        this._groupHeader.text = label\r\n    }\r\n\r\n    /** @hidden */\r\n    private _addGroupHeader(text: string): TextBlock {\r\n        var groupHeading = new TextBlock(\"groupHead\", text);\r\n        groupHeading.width = 0.9;\r\n        groupHeading.height = \"30px\";\r\n        groupHeading.textWrapping = true;\r\n        groupHeading.color = \"black\";\r\n        groupHeading.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        groupHeading.left = \"2px\";\r\n        this._groupPanel.addControl(groupHeading);\r\n        return groupHeading;\r\n    }\r\n\r\n    /** @hidden*/\r\n    public _getSelector(selectorNb: number) {\r\n        if(selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        return this._selectors[selectorNb];\r\n    }\r\n\r\n     /** Removes the selector at the given position \r\n     * @param selectorNb the position of the selector within the group\r\n    */\r\n    public removeSelector(selectorNb: number) {\r\n        if(selectorNb < 0 || selectorNb >= this._selectors.length) {\r\n            return;\r\n        }\r\n        this._groupPanel.removeControl(this._selectors[selectorNb]);\r\n        this._selectors.splice(selectorNb, 1);\r\n    }\r\n\r\n}\r\n\r\n/** Class used to create a CheckboxGroup \r\n * which contains groups of checkbox buttons\r\n*/\r\nexport class CheckboxGroup extends SelectorGroup{\r\n    /** Adds a checkbox as a control\r\n     * @param text is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addCheckbox(text: string, func = (s: boolean)=>{}, checked: boolean = false): void {\r\n        var checked = checked || false;\r\n        var button = new Checkbox();\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\"; \r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    \r\n        button.onIsCheckedChangedObservable.add(function(state) {\t\t\t\t\r\n            func(state);\t\r\n        }); \r\n    \r\n        var _selector = Control.AddHeader(button, text, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n    \r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n\r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        } \r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Checkbox>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a RadioGroup \r\n * which contains groups of radio buttons\r\n*/\r\nexport class RadioGroup extends SelectorGroup{\r\n    private _selectNb = 0;\r\n\r\n    /** Adds a radio button as a control\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addRadio(label: string, func = (n:number) => {} , checked = false): void {\t\t\t\t\r\n        var nb = this._selectNb++;\r\n        var button = new RadioButton();\r\n        button.name = label;\r\n        button.width = \"20px\";\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\"; \r\n        button.group = this.name;\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        button.onIsCheckedChangedObservable.add(function(state) {\r\n            if(state) {\r\n                func(nb);\r\n            }\r\n        });\r\n        \r\n        var _selector = Control.AddHeader(button, label, \"200px\", { isHorizontal: true, controlFirst: true });\r\n        _selector.height = \"30px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        button.isChecked = checked;\r\n        \r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        } \r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).text = label;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[1]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[0].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<RadioButton>this.selectors[selectorNb].children[0]).background = color;\r\n    }\r\n}\r\n\r\n/** Class used to create a SliderGroup \r\n * which contains groups of slider buttons\r\n*/\r\nexport class SliderGroup extends SelectorGroup{\r\n    /**\r\n     * Adds a slider to the SelectorGroup\r\n     * @param label is the label for the SliderBar\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onValueChange is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addSlider(label: string, func = (v:number) => {}, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onValueChange = (v:number)=>{return v | 0}): void {\r\n        var button = new Slider();\r\n        button.name = unit;\r\n        button.value = value;\r\n        button.minimum = min;\r\n        button.maximum = max;\t\t\t\t\r\n        button.width = 0.9;\r\n        button.height = \"20px\";\r\n        button.color = \"#364249\";\r\n        button.background = \"#CCCCCC\";\r\n        button.borderColor = \"black\";\r\n        button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        button.left = \"4px\";\r\n        button.paddingBottom = \"4px\";\r\n\r\n        button.onValueChangedObservable.add(function(value) {\r\n            (<TextBlock>button.parent!.children[0]).text = button.parent!.children[0].name + \": \" + onValueChange(value) + \" \" + button.name;\r\n            func(value);\r\n        });\r\n        \r\n        var _selector = Control.AddHeader(button, label + \": \" + onValueChange(value) + \" \" + unit, \"30px\", { isHorizontal: false, controlFirst: false });\r\n        _selector.height = \"60px\";\r\n        _selector.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        _selector.left = \"4px\";\r\n        _selector.children[0].name = label;\r\n        this.groupPanel.addControl(_selector);\r\n        this.selectors.push(_selector);\r\n        \r\n        if(this.groupPanel.parent && this.groupPanel.parent.parent) {\r\n            button.color = (<SelectionPanel>this.groupPanel.parent.parent).buttonColor;\r\n            button.background = (<SelectionPanel>this.groupPanel.parent.parent).buttonBackground;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabel(selectorNb: number, label: string) {\r\n        this.selectors[selectorNb].children[0].name = label;\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).text = label + \": \" + (<Slider>this.selectors[selectorNb].children[1]).value + \" \" + this.selectors[selectorNb].children[1].name;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorLabelColor(selectorNb: number, color: string) {\r\n        (<TextBlock>this.selectors[selectorNb].children[0]).color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonColor(selectorNb: number, color: string) {\r\n        this.selectors[selectorNb].children[1].color = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setSelectorButtonBackground(selectorNb: number, color: string) {\r\n        (<Slider>this.selectors[selectorNb].children[1]).background = color;\r\n    }\r\n}\r\n\r\n\r\n/** Class used to hold the controls for the checkboxes, radio buttons and sliders \r\n * @see http://doc.babylonjs.com/how_to/selector\r\n*/\r\nexport class SelectionPanel extends Rectangle {\r\n    private _panel: StackPanel;\r\n    private _buttonColor: string = \"#364249\";\r\n    private _buttonBackground: string = \"#CCCCCC\"; \r\n    private _headerColor: string = \"black\";\r\n    private _barColor: string = \"white\";\r\n    private _barHeight: string = \"2px\";\r\n    private _spacerHeight: string = \"20px\";\r\n    private _labelColor: string;\r\n    private _groups: SelectorGroup[];\r\n    private _bars: any[] = new Array();\r\n\r\n    /**\r\n    * Creates a new SelectionPanel\r\n    * @param name of SelectionPanel\r\n    * @param groups is an array of SelectionGroups\r\n    */\r\n    constructor(\r\n        /** name of SelectionPanel */\r\n        public name: string, \r\n        /** an array of SelectionGroups */\r\n        public groups: SelectorGroup[] = []) {\r\n        super(name);\r\n        this._groups = groups;\r\n        this.thickness = 2;\r\n        this._panel = new StackPanel();\r\n        this._panel.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;\r\n        this._panel.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        this._panel.top = 5;\r\n        this._panel.left = 5;\r\n        this._panel.width = 0.95;\r\n        if(groups.length > 0) {\r\n            for(var i = 0; i < groups.length - 1; i++) {\r\n                this._panel.addControl(groups[i].groupPanel);\r\n                this._addSpacer();\r\n            }\r\n            this._panel.addControl(groups[groups.length - 1].groupPanel);\r\n        }\t\t\t\t\r\n        this.addControl(this._panel);\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"SelectionPanel\";\r\n    }\r\n    \r\n    /** Gets or sets the headerColor */\r\n    public get headerColor(): string {\r\n        return this._headerColor;\r\n    }\r\n\r\n    public set headerColor(color: string) {\r\n        if(this._headerColor === color) {\r\n            return;\r\n        }\r\n        this._headerColor = color;\r\n        this._setHeaderColor();\r\n\r\n    }\r\n\r\n    private _setHeaderColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            this._groups[i].groupPanel.children[0].color = this._headerColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button color */\r\n    public get buttonColor(): string {\r\n        return this._buttonColor;\r\n    }\r\n\r\n    public set buttonColor(color: string) {\r\n        if(this._buttonColor === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonColor = color;\r\n        this._setbuttonColor();\r\n\r\n    }\r\n\r\n    private _setbuttonColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorButtonColor(j, this._buttonColor);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the label color */\r\n    public get labelColor(): string {\r\n        return this._labelColor;\r\n    }\r\n\r\n    public set labelColor(color: string) {\r\n        if(this._labelColor === color) {\r\n            return;\r\n        }\r\n        this._labelColor = color;\r\n        this._setLabelColor();\r\n    }\r\n\r\n    private _setLabelColor() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorLabelColor(j, this._labelColor);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the button background */\r\n    public get buttonBackground(): string {\r\n        return this._buttonBackground;\r\n    }\r\n\r\n    public set buttonBackground(color: string) {\r\n        if(this._buttonBackground === color) {\r\n            return;\r\n        }\r\n\r\n        this._buttonBackground = color;\r\n        this._setButtonBackground();\r\n\r\n    }\r\n\r\n    private _setButtonBackground() {\r\n        for(var i = 0; i < this._groups.length; i++) {\r\n            for(var j = 0; j < this._groups[i].selectors.length; j++) {\r\n                (<CheckboxGroup|RadioGroup|SliderGroup>this._groups[i])._setSelectorButtonBackground(j, this._buttonBackground);\r\n            }         \r\n        }\r\n    }\r\n\r\n    /** Gets or sets the color of separator bar */\r\n    public get barColor(): string {\r\n        return this._barColor;\r\n    }\r\n\r\n    public set barColor(color: string) {\r\n       if(this._barColor === color) {\r\n           return;\r\n       }\r\n       \r\n       this._barColor = color;\r\n       this._setBarColor();\r\n    }\r\n\r\n    private _setBarColor() {\r\n        for(var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].background = this._barColor;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of separator bar */\r\n    public get barHeight(): string {\r\n        return this._barHeight;\r\n    }\r\n\r\n    public set barHeight(value: string) {\r\n        if(this._barHeight === value) {\r\n            return;\r\n        }\r\n        \r\n        this._barHeight = value;\r\n        this._setBarHeight();\r\n    }\r\n\r\n    private _setBarHeight() {\r\n        for(var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].children[0].height = this._barHeight;\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the height of spacers*/\r\n    public get spacerHeight(): string {\r\n        return this._spacerHeight;\r\n    }\r\n\r\n    public set spacerHeight(value: string) {\r\n        if(this._spacerHeight === value) {\r\n            return;\r\n        }\r\n        \r\n        this._spacerHeight = value;\r\n        this._setSpacerHeight();\r\n    }\r\n\r\n    private _setSpacerHeight() {\r\n        for(var i = 0; i < this._bars.length; i++) {\r\n            this._bars[i].height = this._spacerHeight;\r\n        }\r\n    }\r\n\r\n    /** Adds a bar between groups */\r\n    private _addSpacer(): void {\r\n        var separator = new Container();\r\n        separator.width = 1;\r\n        separator.height = this._spacerHeight;\r\n        separator.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n\r\n        var bar = new Rectangle();\r\n        bar.width = 1;\r\n        bar.height = this._barHeight;\r\n        bar.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n        bar.verticalAlignment = Control.VERTICAL_ALIGNMENT_CENTER;\r\n        bar.background = this._barColor;\r\n        bar.color = \"transparent\";\r\n        separator.addControl(bar);\r\n\r\n        this._panel.addControl(separator);\r\n        this._bars.push(separator);\r\n    }\r\n\r\n    /** Add a group to the selection panel\r\n     * @param group is the selector group to add\r\n     */\r\n    public addGroup(group: SelectorGroup): void {\r\n        if(this._groups.length > 0) {\r\n            this._addSpacer();\r\n        }\r\n        this._panel.addControl(group.groupPanel);\r\n        this._groups.push(group);\r\n        group.groupPanel.children[0].color = this._headerColor;\r\n        for(var j = 0; j < group.selectors.length; j++) {\r\n            (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorButtonColor(j, this._buttonColor);\r\n            (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorButtonBackground(j, this._buttonBackground);\r\n        }\r\n    }\r\n\r\n    /** Remove the group from the given position\r\n     * @param groupNb is the position of the group in the list\r\n     */\r\n    public removeGroup(groupNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        this._panel.removeControl(group.groupPanel);\r\n        this._groups.splice(groupNb, 1);\r\n        if(groupNb < this._bars.length) {\r\n            this._panel.removeControl(this._bars[groupNb]);\r\n            this._bars.splice(groupNb, 1);\r\n        }\r\n    }\r\n\r\n    /** Change a group header label\r\n     * @param label is the new group header label\r\n     * @param groupNb is the number of the group to relabel\r\n     * */\r\n    public setHeaderName(label: string, groupNb: number) {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<TextBlock>group.groupPanel.children[0]).text = label;\r\n    }\r\n\r\n\r\n    /** Change selector label to the one given \r\n     * @param label is the new selector label\r\n     * @param groupNb is the number of the groupcontaining the selector\r\n     * @param selectorNb is the number of the selector within a group to relabel\r\n     * */ \r\n    public relabel(label: string, groupNb: number, selectorNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if(selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        (<CheckboxGroup|RadioGroup|SliderGroup>group)._setSelectorLabel(selectorNb, label);\r\n    }\r\n\r\n    /** For a given group position remove the selector at the given position\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param selectorNb is the number of the selector within the group\r\n     */\r\n    public removeFromGroupSelector(groupNb: number, selectorNb: number): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        if(selectorNb < 0 || selectorNb >= group.selectors.length) {\r\n            return;\r\n        }\r\n        group.removeSelector(selectorNb);\r\n    }\r\n\r\n    /** For a given group position of correct type add a checkbox button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupCheckbox(groupNb: number, label: string, func = () => {} , checked: boolean = false): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<CheckboxGroup>group).addCheckbox(label, func, checked);\r\n    }\r\n\r\n    /** For a given group position of correct type add a radio button\r\n     * @param groupNb is the number of the group to remove the selector from\r\n     * @param label is the label for the selector\r\n     * @param func is the function called when the Selector is checked\r\n     * @param checked is true when Selector is checked\r\n     */\r\n    public addToGroupRadio(groupNb: number, label: string, func = () => {} , checked: boolean = false): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<RadioGroup>group).addRadio(label, func, checked);\r\n    }\r\n\r\n    /**\r\n     * For a given slider group add a slider\r\n     * @param groupNb is the number of the group to add the slider to\r\n     * @param label is the label for the Slider\r\n     * @param func is the function called when the Slider moves\r\n     * @param unit is a string describing the units used, eg degrees or metres\r\n     * @param min is the minimum value for the Slider\r\n     * @param max is the maximum value for the Slider\r\n     * @param value is the start value for the Slider between min and max\r\n     * @param onVal is the function used to format the value displayed, eg radians to degrees\r\n     */\r\n    public addToGroupSlider(groupNb: number, label: string, func = () => {}, unit: string = \"Units\", min: number = 0, max: number = 0, value: number = 0, onVal = (v:number)=>{return v | 0}): void {\r\n        if(groupNb < 0 || groupNb >= this._groups.length) {\r\n            return;\r\n        }\r\n        var group = this._groups[groupNb];\r\n        (<SliderGroup>group).addSlider(label, func, unit, min, max, value, onVal);\r\n    }\r\n    \r\n}","import { StackPanel } from \"./stackPanel\";\r\nimport { Observable, Nullable, Observer } from \"babylonjs\";\r\nimport { Button } from \"./button\";\r\nimport { Container } from \"./container\";\r\nimport { TextBlock } from \"./textBlock\";\r\nimport { InputText } from \"./inputText\";\r\n\r\n\r\n/**\r\n * Class used to store key control properties\r\n */\r\nexport class KeyPropertySet {\r\n    /** Width */\r\n    width?: string;\r\n    /** Height */\r\n    height?: string;\r\n    /** Left padding */\r\n    paddingLeft?: string;\r\n    /** Right padding */\r\n    paddingRight?: string;\r\n    /** Top padding */\r\n    paddingTop?: string;\r\n    /** Bottom padding */\r\n    paddingBottom?: string;\r\n    /** Foreground color */\r\n    color?: string;\r\n    /** Background color */\r\n    background?: string;\r\n}\r\n\r\ntype ConnectedInputText = {\r\n    input: InputText,\r\n    onFocusObserver: Nullable<Observer<InputText>>,\r\n    onBlurObserver: Nullable<Observer<InputText>>\r\n}\r\n\r\n/**\r\n * Class used to create virtual keyboard\r\n */\r\nexport class VirtualKeyboard extends StackPanel {\r\n    /** Observable raised when a key is pressed */\r\n    public onKeyPressObservable = new Observable<string>();\r\n\r\n    /** Gets or sets default key button width */\r\n    public defaultButtonWidth = \"40px\";\r\n    /** Gets or sets default key button height */\r\n    public defaultButtonHeight = \"40px\";\r\n\r\n    /** Gets or sets default key button left padding */\r\n    public defaultButtonPaddingLeft = \"2px\";\r\n    /** Gets or sets default key button right padding */\r\n    public defaultButtonPaddingRight = \"2px\";\r\n    /** Gets or sets default key button top padding */\r\n    public defaultButtonPaddingTop = \"2px\";\r\n    /** Gets or sets default key button bottom padding */\r\n    public defaultButtonPaddingBottom = \"2px\";\r\n\r\n    /** Gets or sets default key button foreground color */\r\n    public defaultButtonColor = \"#DDD\";\r\n    /** Gets or sets default key button background color */\r\n    public defaultButtonBackground = \"#070707\";\r\n\r\n    /** Gets or sets shift button foreground color */\r\n    public shiftButtonColor = \"#7799FF\";\r\n    /** Gets or sets shift button thickness*/\r\n    public selectedShiftThickness = 1;\r\n\r\n    /** Gets shift key state */\r\n    public shiftState = 0;\r\n\r\n    protected _getTypeName(): string {\r\n        return \"VirtualKeyboard\";\r\n    }\r\n\r\n    private _createKey(key: string, propertySet: Nullable<KeyPropertySet>) {\r\n        var button = Button.CreateSimpleButton(key, key);\r\n\r\n        button.width = propertySet && propertySet.width ? propertySet.width : this.defaultButtonWidth;\r\n        button.height = propertySet && propertySet.height ? propertySet.height : this.defaultButtonHeight;\r\n        button.color = propertySet && propertySet.color ? propertySet.color : this.defaultButtonColor;\r\n        button.background = propertySet && propertySet.background ? propertySet.background : this.defaultButtonBackground;\r\n        button.paddingLeft = propertySet && propertySet.paddingLeft ? propertySet.paddingLeft : this.defaultButtonPaddingLeft;\r\n        button.paddingRight = propertySet && propertySet.paddingRight ? propertySet.paddingRight : this.defaultButtonPaddingRight;\r\n        button.paddingTop = propertySet && propertySet.paddingTop ? propertySet.paddingTop : this.defaultButtonPaddingTop;\r\n        button.paddingBottom = propertySet && propertySet.paddingBottom ? propertySet.paddingBottom : this.defaultButtonPaddingBottom;\r\n\r\n        button.thickness = 0;\r\n        button.isFocusInvisible = true;\r\n\r\n        button.shadowColor = this.shadowColor;\r\n        button.shadowBlur = this.shadowBlur;\r\n        button.shadowOffsetX = this.shadowOffsetX;\r\n        button.shadowOffsetY = this.shadowOffsetY;\r\n\r\n        button.onPointerUpObservable.add(() => {\r\n            this.onKeyPressObservable.notifyObservers(key);\r\n        });\r\n\r\n        return button;\r\n    }\r\n\r\n    /**\r\n     * Adds a new row of keys\r\n     * @param keys defines the list of keys to add\r\n     * @param propertySets defines the associated property sets\r\n     */\r\n    public addKeysRow(keys: Array<string>, propertySets?: Array<KeyPropertySet>): void {\r\n        let panel = new StackPanel();\r\n        panel.isVertical = false;\r\n        panel.isFocusInvisible = true;\r\n\r\n        for (var i = 0; i < keys.length; i++) {\r\n            let properties = null;\r\n\r\n            if (propertySets && propertySets.length === keys.length) {\r\n                properties = propertySets[i];\r\n            }\r\n\r\n            panel.addControl(this._createKey(keys[i], properties));\r\n        }\r\n\r\n        this.addControl(panel);\r\n    }\r\n\r\n    /**\r\n     * Set the shift key to a specific state\r\n     * @param shiftState defines the new shift state\r\n     */\r\n    public applyShiftState(shiftState: number): void {\r\n        if (!this.children) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            let row = this.children[i];\r\n            if (!row || !(<Container>row).children) {\r\n                continue;\r\n            }\r\n\r\n            let rowContainer = <Container>row;\r\n            for (var j = 0; j < rowContainer.children.length; j++) {\r\n                let button = rowContainer.children[j] as Button;\r\n\r\n                if (!button || !button.children[0]) {\r\n                    continue;\r\n                }\r\n\r\n                let button_tblock = button.children[0] as TextBlock;\r\n\r\n                if (button_tblock.text === \"\\u21E7\") {\r\n                    button.color = (shiftState ? this.shiftButtonColor : this.defaultButtonColor);\r\n                    button.thickness = (shiftState > 1 ? this.selectedShiftThickness : 0);\r\n                }\r\n\r\n                button_tblock.text = (shiftState > 0 ? button_tblock.text.toUpperCase() : button_tblock.text.toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    private _currentlyConnectedInputText: Nullable<InputText> = null;\r\n    private _connectedInputTexts: ConnectedInputText[] = [];\r\n    private _onKeyPressObserver: Nullable<Observer<string>> = null;\r\n\r\n    /** Gets the input text control currently attached to the keyboard */\r\n    public get connectedInputText(): Nullable<InputText> {\r\n        return this._currentlyConnectedInputText;\r\n    }\r\n\r\n    /**\r\n     * Connects the keyboard with an input text control\r\n     * \r\n     * @param input defines the target control\r\n     */\r\n    public connect(input: InputText): void {\r\n        const inputTextAlreadyConnected = this._connectedInputTexts.some(a => a.input === input);\r\n        if (inputTextAlreadyConnected) {\r\n            return;\r\n        }\r\n\r\n        if (this._onKeyPressObserver === null) {\r\n            this._onKeyPressObserver = this.onKeyPressObservable.add((key) => {\r\n                if (!this._currentlyConnectedInputText) {\r\n                    return;\r\n                }\r\n\r\n                this._currentlyConnectedInputText._host.focusedControl = this._currentlyConnectedInputText;\r\n\r\n                switch (key) {\r\n                    case \"\\u21E7\":\r\n                        this.shiftState++;\r\n                        if (this.shiftState > 2) {\r\n                            this.shiftState = 0;\r\n                        }\r\n                        this.applyShiftState(this.shiftState);\r\n                        return;\r\n                    case \"\\u2190\":\r\n                        this._currentlyConnectedInputText.processKey(8);\r\n                        return;\r\n                    case \"\\u21B5\":\r\n                        this._currentlyConnectedInputText.processKey(13);\r\n                        return;\r\n                }\r\n                this._currentlyConnectedInputText.processKey(-1, (this.shiftState ? key.toUpperCase() : key));\r\n    \r\n                if (this.shiftState === 1) {\r\n                    this.shiftState = 0;\r\n                    this.applyShiftState(this.shiftState);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.isVisible = false;\r\n        this._currentlyConnectedInputText = input;\r\n        input._connectedVirtualKeyboard = this;\r\n        \r\n        // Events hooking\r\n        const onFocusObserver: Nullable<Observer<InputText>> = input.onFocusObservable.add(() => {\r\n            this._currentlyConnectedInputText = input;\r\n            input._connectedVirtualKeyboard = this;\r\n            this.isVisible = true;\r\n        });\r\n\r\n        const onBlurObserver: Nullable<Observer<InputText>> = input.onBlurObservable.add(() => {\r\n            input._connectedVirtualKeyboard = null;\r\n            this._currentlyConnectedInputText = null;\r\n            this.isVisible = false;\r\n        });\r\n\r\n        this._connectedInputTexts.push({\r\n            input,\r\n            onBlurObserver,\r\n            onFocusObserver\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Disconnects the keyboard from connected InputText controls\r\n     * \r\n     * @param input optionally defines a target control, otherwise all are disconnected\r\n     */\r\n    public disconnect(input?: InputText): void {\r\n        if (input) {\r\n            // .find not available on IE\r\n            let filtered = this._connectedInputTexts.filter(a => a.input === input);\r\n            if (filtered.length === 1) {\r\n                this._removeConnectedInputObservables(filtered[0]);\r\n                \r\n                this._connectedInputTexts = this._connectedInputTexts.filter(a => a.input !== input);\r\n                if (this._currentlyConnectedInputText === input) {\r\n                    this._currentlyConnectedInputText = null;\r\n                }\r\n            }\r\n        } else {\r\n            this._connectedInputTexts.forEach((connectedInputText: ConnectedInputText) => {\r\n                this._removeConnectedInputObservables(connectedInputText)\r\n            });\r\n            this._connectedInputTexts = []\r\n        }\r\n\r\n        if (this._connectedInputTexts.length === 0) {\r\n            this._currentlyConnectedInputText = null;\r\n            this.onKeyPressObservable.remove(this._onKeyPressObserver);\r\n            this._onKeyPressObserver = null;\r\n        }\r\n    }\r\n\r\n    private _removeConnectedInputObservables(connectedInputText: ConnectedInputText) : void {\r\n        connectedInputText.input._connectedVirtualKeyboard = null;\r\n        connectedInputText.input.onFocusObservable.remove(connectedInputText.onFocusObserver);\r\n        connectedInputText.input.onBlurObservable.remove(connectedInputText.onBlurObserver);\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.disconnect();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new keyboard using a default layout\r\n     *\r\n     * @param name defines control name\r\n     * @returns a new VirtualKeyboard\r\n     */\r\n    public static CreateDefaultLayout(name?: string): VirtualKeyboard {\r\n        let returnValue = new VirtualKeyboard(name);\r\n\r\n        returnValue.addKeysRow([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"\\u2190\"]);\r\n        returnValue.addKeysRow([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"]);\r\n        returnValue.addKeysRow([\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \";\", \"'\", \"\\u21B5\"]);\r\n        returnValue.addKeysRow([\"\\u21E7\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \",\", \".\", \"/\"]);\r\n        returnValue.addKeysRow([\" \"], [{ width: \"200px\" }]);\r\n\r\n        return returnValue;\r\n    }\r\n}\r\n","\r\nimport { Control } from \".\";\r\nimport { Measure } from \"..\";\r\n\r\n/** Class used to render a grid  */\r\nexport class DisplayGrid extends Control {\r\n    private _cellWidth = 20;\r\n    private _cellHeight = 20;\r\n\r\n    private _minorLineTickness = 1;\r\n    private _minorLineColor = \"DarkGray\";\r\n\r\n    private _majorLineTickness = 2;\r\n    private _majorLineColor = \"White\";\r\n\r\n    private _majorLineFrequency = 5;\r\n\r\n    private _background = \"Black\";\r\n\r\n    private _displayMajorLines = true;\r\n    private _displayMinorLines = true;\r\n\r\n    /** Gets or sets a boolean indicating if minor lines must be rendered (true by default)) */\r\n    public get displayMinorLines(): boolean {\r\n        return this._displayMinorLines;\r\n    }\r\n\r\n    public set displayMinorLines(value: boolean) {\r\n        if (this._displayMinorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMinorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets a boolean indicating if major lines must be rendered (true by default)) */\r\n    public get displayMajorLines(): boolean {\r\n        return this._displayMajorLines;\r\n    }\r\n\r\n    public set displayMajorLines(value: boolean) {\r\n        if (this._displayMajorLines === value) {\r\n            return;\r\n        }\r\n\r\n        this._displayMajorLines = value;\r\n        this._markAsDirty();\r\n    }  \r\n\r\n    /** Gets or sets background color (Black by default) */\r\n    public get background(): string {\r\n        return this._background;\r\n    }\r\n\r\n    public set background(value: string) {\r\n        if (this._background === value) {\r\n            return;\r\n        }\r\n\r\n        this._background = value;\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the width of each cell (20 by default) */\r\n    public get cellWidth(): number {\r\n        return this._cellWidth;\r\n    }\r\n\r\n    public set cellWidth(value: number) {\r\n        this._cellWidth = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the height of each cell (20 by default) */\r\n    public get cellHeight(): number {\r\n        return this._cellHeight;\r\n    }\r\n\r\n    public set cellHeight(value: number) {\r\n        this._cellHeight = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the tickness of minor lines (1 by default) */\r\n    public get minorLineTickness(): number {\r\n        return this._minorLineTickness;\r\n    }\r\n\r\n    public set minorLineTickness(value: number) {\r\n        this._minorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of minor lines (DarkGray by default) */\r\n    public get minorLineColor(): string {\r\n        return this._minorLineColor;\r\n    }\r\n\r\n    public set minorLineColor(value: string) {\r\n        this._minorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the tickness of major lines (2 by default) */\r\n    public get majorLineTickness(): number {\r\n        return this._majorLineTickness;\r\n    }\r\n\r\n    public set majorLineTickness(value: number) {\r\n        this._majorLineTickness = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /** Gets or sets the color of major lines (White by default) */\r\n    public get majorLineColor(): string {\r\n        return this._majorLineColor;\r\n    }\r\n\r\n    public set majorLineColor(value: string) {\r\n        this._majorLineColor = value;\r\n\r\n        this._markAsDirty();\r\n    }    \r\n\r\n    /** Gets or sets the frequency of major lines (default is 1 every 5 minor lines)*/\r\n    public get majorLineFrequency(): number {\r\n        return this._majorLineFrequency;\r\n    }\r\n\r\n    public set majorLineFrequency(value: number) {\r\n        this._majorLineFrequency = value;\r\n\r\n        this._markAsDirty();\r\n    }\r\n\r\n    /**\r\n     * Creates a new GridDisplayRectangle\r\n     * @param name defines the control name\r\n     */\r\n    constructor(public name?: string) {\r\n        super(name);\r\n    }\r\n\r\n    public _draw(parentMeasure: Measure, context: CanvasRenderingContext2D): void {\r\n        context.save();\r\n        \r\n        this._applyStates(context);\r\n\r\n        if (this._isEnabled && this._processMeasures(parentMeasure, context)) {\r\n\r\n            if (this._background) {\r\n                context.fillStyle = this._background;\r\n                context.fillRect(this._currentMeasure.left, this._currentMeasure.top, this._currentMeasure.width, this._currentMeasure.height);\r\n            }\r\n\r\n            let cellCountX = this._currentMeasure.width / this._cellWidth;\r\n            let cellCountY = this._currentMeasure.height / this._cellHeight;\r\n\r\n            // Minor lines    \r\n            const left = this._currentMeasure.left + this._currentMeasure.width / 2;\r\n            const top = this._currentMeasure.top + this._currentMeasure.height / 2;\r\n\r\n            if (this._displayMinorLines) {\r\n                context.strokeStyle = this._minorLineColor;\r\n                context.lineWidth = this._minorLineTickness;    \r\n\r\n                for (var x = -cellCountX / 2; x < cellCountX / 2; x++) {\r\n                    const cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    \r\n                    context.stroke();                \r\n                }\r\n\r\n                for (var y = -cellCountY / 2; y < cellCountY / 2; y++) {\r\n                    const cellY = top + y * this.cellHeight;\r\n\r\n                    context.beginPath();\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.stroke();\r\n                }\r\n            }\r\n\r\n            // Major lines\r\n            if (this._displayMajorLines) {\r\n                context.strokeStyle = this._majorLineColor;\r\n                context.lineWidth = this._majorLineTickness;        \r\n\r\n                for (var x = -cellCountX / 2 + this._majorLineFrequency; x < cellCountX / 2; x += this._majorLineFrequency) {\r\n                    let cellX = left + x * this.cellWidth;\r\n\r\n                    context.beginPath();    \r\n                    context.moveTo(cellX, this._currentMeasure.top);\r\n                    context.lineTo(cellX, this._currentMeasure.top + this._currentMeasure.height);\r\n                    context.stroke();\r\n                }\r\n\r\n                for (var y = -cellCountY / 2 + this._majorLineFrequency; y < cellCountY / 2; y += this._majorLineFrequency) {\r\n                    let cellY = top + y * this.cellHeight;\r\n                    context.moveTo(this._currentMeasure.left, cellY);\r\n                    context.lineTo(this._currentMeasure.left + this._currentMeasure.width, cellY);\r\n                    context.closePath();\r\n                    context.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        context.restore();\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"DisplayGrid\";\r\n    }\r\n}    ","import { Control } from \"./control\";\r\nimport { StackPanel } from \"./stackPanel\";\r\nimport { TextBlock } from \"./textBlock\";\r\n\r\n/**\r\n * Forcing an export so that this code will execute\r\n * @hidden\r\n */\r\nconst name = \"Statics\";\r\n\r\nexport { name };\r\n\r\n/**\r\n * Creates a stack panel that can be used to render headers\r\n * @param control defines the control to associate with the header\r\n * @param text defines the text of the header\r\n * @param size defines the size of the header\r\n * @param options defines options used to configure the header\r\n * @returns a new StackPanel\r\n */\r\nControl.AddHeader = function (control: Control, text: string, size: string | number, options: { isHorizontal: boolean, controlFirst: boolean }): StackPanel {\r\n    let panel = new StackPanel(\"panel\");\r\n    let isHorizontal = options ? options.isHorizontal : true;\r\n    let controlFirst = options ? options.controlFirst : true;\r\n\r\n    panel.isVertical = !isHorizontal;\r\n\r\n    let header = new TextBlock(\"header\");\r\n    header.text = text;\r\n    header.textHorizontalAlignment = Control.HORIZONTAL_ALIGNMENT_LEFT;\r\n    if (isHorizontal) {\r\n        header.width = size;\r\n    } else {\r\n        header.height = size;\r\n    }\r\n\r\n    if (controlFirst) {\r\n        panel.addControl(control);\r\n        panel.addControl(header);\r\n        header.paddingLeft = \"5px\";\r\n    } else {\r\n        panel.addControl(header);\r\n        panel.addControl(control);\r\n        header.paddingRight = \"5px\";\r\n    }\r\n\r\n    header.shadowBlur = control.shadowBlur;\r\n    header.shadowColor = control.shadowColor;\r\n    header.shadowOffsetX = control.shadowOffsetX;\r\n    header.shadowOffsetY = control.shadowOffsetY;\r\n\r\n    return panel;\r\n}","export * from \"./controls\";\r\nexport * from \"./materials\";\r\n\r\nexport * from \"./gui3DManager\";\r\nexport * from \"./vector3WithInfo\";","export * from \"./abstractButton3D\";\r\nexport * from \"./button3D\";\r\nexport * from \"./container3D\";\r\nexport * from \"./control3D\";\r\nexport * from \"./cylinderPanel\";\r\nexport * from \"./holographicButton\";\r\nexport * from \"./meshButton3D\";\r\nexport * from \"./planePanel\";\r\nexport * from \"./scatterPanel\";\r\nexport * from \"./spherePanel\";\r\nexport * from \"./stackPanel3D\";\r\nexport * from \"./volumeBasedPanel\";","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a cylinder\r\n */\r\nexport class CylinderPanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the cylinder where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n        let newPos = this._cylindricalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _cylindricalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, source.y, this._radius);\r\n\r\n        let yAngle = (source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, 0, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Button3D } from \"./button3D\";\r\nimport { Mesh, StandardMaterial, Nullable, Observer, Vector3, Scene, TransformNode, MeshBuilder, Color3 } from \"babylonjs\";\r\nimport { FluentMaterial } from \"../materials/fluentMaterial\";\r\nimport { StackPanel } from \"../../2D/controls/stackPanel\";\r\nimport { Image } from \"../../2D/controls/image\";\r\nimport { TextBlock } from \"../../2D/controls/textBlock\";\r\nimport { AdvancedDynamicTexture } from \"../../2D/advancedDynamicTexture\";\r\nimport { Control3D } from \"./control3D\";\r\n\r\n/**\r\n * Class used to create a holographic button in 3D\r\n */\r\nexport class HolographicButton extends Button3D {\r\n    private _backPlate: Mesh;\r\n    private _textPlate: Mesh;\r\n    private _frontPlate: Mesh;\r\n    private _text: string;\r\n    private _imageUrl: string;\r\n    private _shareMaterials = true;\r\n    private _frontMaterial: FluentMaterial;\r\n    private _backMaterial: FluentMaterial;\r\n    private _plateMaterial: StandardMaterial;\r\n    private _pickedPointObserver: Nullable<Observer<Nullable<Vector3>>>;\r\n\r\n    // Tooltip\r\n    private _tooltipFade: Nullable<BABYLON.FadeInOutBehavior>;\r\n    private _tooltipTextBlock: Nullable<TextBlock>;\r\n    private _tooltipTexture: Nullable<AdvancedDynamicTexture>;\r\n    private _tooltipMesh: Nullable<Mesh>;\r\n    private _tooltipHoverObserver:Nullable<Observer<Control3D>>\r\n    private _tooltipOutObserver:Nullable<Observer<Control3D>>\r\n\r\n    private _disposeTooltip(){\r\n        this._tooltipFade = null;\r\n        if(this._tooltipTextBlock){\r\n            this._tooltipTextBlock.dispose();\r\n        }\r\n        if(this._tooltipTexture){\r\n            this._tooltipTexture.dispose();\r\n        }\r\n        if(this._tooltipMesh){\r\n            this._tooltipMesh.dispose();\r\n        }\r\n        this.onPointerEnterObservable.remove(this._tooltipHoverObserver);\r\n        this.onPointerOutObservable.remove(this._tooltipOutObserver);\r\n    }\r\n\r\n    /**\r\n     * Text to be displayed on the tooltip shown when hovering on the button. When set to null tooltip is disabled. (Default: null)\r\n     */\r\n    public set tooltipText(text:Nullable<string>){\r\n        if(!text){\r\n            this._disposeTooltip();\r\n            return;\r\n        }\r\n        if(!this._tooltipFade){\r\n            // Create tooltip with mesh and text\r\n            this._tooltipMesh = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1}, this._backPlate._scene)\r\n            var tooltipBackground = BABYLON.MeshBuilder.CreatePlane(\"\", {size: 1, sideOrientation: BABYLON.Mesh.DOUBLESIDE}, this._backPlate._scene)\r\n            var mat = new StandardMaterial(\"\", this._backPlate._scene);\r\n            mat.diffuseColor = BABYLON.Color3.FromHexString(\"#212121\")\r\n            tooltipBackground.material = mat\r\n            tooltipBackground.isPickable = false;\r\n            this._tooltipMesh.addChild(tooltipBackground)\r\n            tooltipBackground.position.z = 0.05\r\n            this._tooltipMesh.scaling.y = 1/3\r\n            this._tooltipMesh.position.y = 0.7;\r\n            this._tooltipMesh.position.z = -0.15;\r\n            this._tooltipMesh.isPickable = false;\r\n            this._tooltipMesh.parent = this._backPlate;\r\n\r\n            // Create text texture for the tooltip\r\n            this._tooltipTexture = AdvancedDynamicTexture.CreateForMesh(this._tooltipMesh)\r\n            this._tooltipTextBlock = new TextBlock();\r\n            this._tooltipTextBlock.scaleY = 3\r\n            this._tooltipTextBlock.color = \"white\";\r\n            this._tooltipTextBlock.fontSize = 130;\r\n            this._tooltipTexture.addControl(this._tooltipTextBlock);\r\n\r\n            // Add hover action to tooltip\r\n            this._tooltipFade = new BABYLON.FadeInOutBehavior();\r\n            this._tooltipFade.delay = 500;\r\n            this._tooltipMesh.addBehavior(this._tooltipFade);\r\n            this._tooltipHoverObserver = this.onPointerEnterObservable.add(()=>{\r\n                if(this._tooltipFade){\r\n                    this._tooltipFade.fadeIn(true)\r\n                }\r\n            })\r\n            this._tooltipOutObserver = this.onPointerOutObservable.add(()=>{\r\n                if(this._tooltipFade){\r\n                    this._tooltipFade.fadeIn(false)\r\n                }\r\n            })\r\n        }\r\n        if(this._tooltipTextBlock){\r\n            this._tooltipTextBlock.text = text;\r\n        }\r\n    }\r\n\r\n    public get tooltipText(){\r\n        if(this._tooltipTextBlock){\r\n            return this._tooltipTextBlock.text;\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    /**\r\n     * Gets or sets text for the button\r\n     */\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (this._text === value) {\r\n            return;\r\n        }\r\n\r\n        this._text = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the image url for the button\r\n     */\r\n    public get imageUrl(): string {\r\n        return this._imageUrl;\r\n    }\r\n\r\n    public set imageUrl(value: string) {\r\n        if (this._imageUrl === value) {\r\n            return;\r\n        }\r\n\r\n        this._imageUrl = value;\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Gets the back material used by this button\r\n     */\r\n    public get backMaterial(): FluentMaterial {\r\n        return this._backMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the front material used by this button\r\n     */\r\n    public get frontMaterial(): FluentMaterial {\r\n        return this._frontMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the plate material used by this button\r\n     */\r\n    public get plateMaterial(): StandardMaterial {\r\n        return this._plateMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this button shares its material with other HolographicButtons\r\n     */\r\n    public get shareMaterials(): boolean {\r\n        return this._shareMaterials;\r\n    }\r\n\r\n    /**\r\n     * Creates a new button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(name?: string, shareMaterials = true) {\r\n        super(name);\r\n\r\n        this._shareMaterials = shareMaterials;\r\n\r\n        // Default animations\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(true);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this._frontPlate.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"HolographicButton\";\r\n    }\r\n\r\n    private _rebuildContent(): void {\r\n        this._disposeFacadeTexture();\r\n\r\n        let panel = new StackPanel();\r\n        panel.isVertical = true;\r\n\r\n        if (this._imageUrl) {\r\n            let image = new Image();\r\n            image.source = this._imageUrl;\r\n            image.paddingTop = \"40px\";\r\n            image.height = \"180px\";\r\n            image.width = \"100px\";\r\n            image.paddingBottom = \"40px\";\r\n            panel.addControl(image);\r\n        }\r\n\r\n        if (this._text) {\r\n            let text = new TextBlock();\r\n            text.text = this._text;\r\n            text.color = \"white\";\r\n            text.height = \"30px\";\r\n            text.fontSize = 24;\r\n            panel.addControl(text);\r\n        }\r\n\r\n        if (this._frontPlate) {\r\n            this.content = panel;\r\n        }\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._backPlate = MeshBuilder.CreateBox(this.name + \"BackMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate = MeshBuilder.CreateBox(this.name + \"FrontMesh\", {\r\n            width: 1.0,\r\n            height: 1.0,\r\n            depth: 0.08\r\n        }, scene);\r\n\r\n        this._frontPlate.parent = this._backPlate;\r\n        this._frontPlate.position.z = -0.08;\r\n        this._frontPlate.isPickable = false;\r\n        this._frontPlate.setEnabled(false);\r\n\r\n        this._textPlate = <Mesh>super._createNode(scene);\r\n        this._textPlate.parent = this._backPlate;\r\n        this._textPlate.position.z = -0.08;\r\n        this._textPlate.isPickable = false;\r\n\r\n        return this._backPlate;\r\n    }\r\n\r\n    protected _applyFacade(facadeTexture: AdvancedDynamicTexture) {\r\n        this._plateMaterial.emissiveTexture = facadeTexture;\r\n        this._plateMaterial.opacityTexture = facadeTexture;\r\n    }\r\n\r\n    private _createBackMaterial(mesh: Mesh) {\r\n        this._backMaterial = new FluentMaterial(this.name + \"Back Material\", mesh.getScene());\r\n        this._backMaterial.renderHoverLight = true;\r\n        this._pickedPointObserver = this._host.onPickedPointChangedObservable.add(pickedPoint => {\r\n            if (pickedPoint) {\r\n                this._backMaterial.hoverPosition = pickedPoint;\r\n                this._backMaterial.hoverColor.a = 1.0;\r\n            } else {\r\n                this._backMaterial.hoverColor.a = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private _createFrontMaterial(mesh: Mesh) {\r\n        this._frontMaterial = new FluentMaterial(this.name + \"Front Material\", mesh.getScene());\r\n        this._frontMaterial.innerGlowColorIntensity = 0; // No inner glow\r\n        this._frontMaterial.alpha = 0.5; // Additive\r\n        this._frontMaterial.renderBorders = true;\r\n    }\r\n\r\n    private _createPlateMaterial(mesh: Mesh) {\r\n        this._plateMaterial = new StandardMaterial(this.name + \"Plate Material\", mesh.getScene());\r\n        this._plateMaterial.specularColor = Color3.Black();\r\n    }\r\n\r\n    protected _affectMaterial(mesh: Mesh) {\r\n        // Back\r\n        if (this._shareMaterials) {\r\n            if (!this._host._sharedMaterials[\"backFluentMaterial\"]) {\r\n                this._createBackMaterial(mesh);\r\n                this._host._sharedMaterials[\"backFluentMaterial\"] = this._backMaterial;\r\n            } else {\r\n                this._backMaterial = this._host._sharedMaterials[\"backFluentMaterial\"] as FluentMaterial;\r\n            }\r\n\r\n            // Front\r\n            if (!this._host._sharedMaterials[\"frontFluentMaterial\"]) {\r\n                this._createFrontMaterial(mesh);\r\n                this._host._sharedMaterials[\"frontFluentMaterial\"] = this._frontMaterial;\r\n            } else {\r\n                this._frontMaterial = this._host._sharedMaterials[\"frontFluentMaterial\"] as FluentMaterial;\r\n            }\r\n        } else {\r\n            this._createBackMaterial(mesh);\r\n            this._createFrontMaterial(mesh);\r\n        }\r\n\r\n        this._createPlateMaterial(mesh);\r\n        this._backPlate.material = this._backMaterial;\r\n        this._frontPlate.material = this._frontMaterial;\r\n        this._textPlate.material = this._plateMaterial;\r\n\r\n        this._rebuildContent();\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        super.dispose(); // will dispose main mesh ie. back plate\r\n\r\n        this._disposeTooltip();\r\n\r\n        if (!this.shareMaterials) {\r\n            this._backMaterial.dispose();\r\n            this._frontMaterial.dispose();\r\n            this._plateMaterial.dispose();\r\n\r\n            if (this._pickedPointObserver) {\r\n                this._host.onPickedPointChangedObservable.remove(this._pickedPointObserver);\r\n                this._pickedPointObserver = null;\r\n            }\r\n        }\r\n    }\r\n}","import { Effect } from \"babylonjs\";\r\n\r\nconst fShader = require(\"./fluent.fragment.fx\");\r\nconst vShader = require(\"./fluent.vertex.fx\");\r\n\r\nexport function registerShader() {\r\n    // register shaders\r\n    Effect.ShadersStore[\"fluentVertexShader\"] = vShader;\r\n    Effect.ShadersStore[\"fluentPixelShader\"] = fShader;\r\n}\r\n\r\nexport { fShader, vShader };","module.exports = \"precision highp float;\\nvarying vec2 vUV;\\nuniform vec4 albedoColor;\\n#ifdef INNERGLOW\\nuniform vec4 innerGlowColor;\\n#endif\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float edgeSmoothingValue;\\nuniform float borderMinValue;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\nuniform vec3 hoverPosition;\\nuniform vec4 hoverColor;\\nuniform float hoverRadius;\\n#endif\\n#ifdef TEXTURE\\nuniform sampler2D albedoSampler;\\n#endif\\nvoid main(void) {\\nvec3 albedo=albedoColor.rgb;\\nfloat alpha=albedoColor.a;\\n#ifdef TEXTURE\\nalbedo=texture2D(albedoSampler,vUV).rgb;\\n#endif\\n#ifdef HOVERLIGHT\\nfloat pointToHover=(1.0-clamp(length(hoverPosition-worldPosition)/hoverRadius,0.,1.))*hoverColor.a;\\nalbedo=clamp(albedo+hoverColor.rgb*pointToHover,0.,1.);\\n#else\\nfloat pointToHover=1.0;\\n#endif\\n#ifdef BORDER \\nfloat borderPower=10.0;\\nfloat inverseBorderPower=1.0/borderPower;\\nvec3 borderColor=albedo*borderPower;\\nvec2 distanceToEdge;\\ndistanceToEdge.x=abs(vUV.x-0.5)*2.0;\\ndistanceToEdge.y=abs(vUV.y-0.5)*2.0;\\nfloat borderValue=max(smoothstep(scaleInfo.x-edgeSmoothingValue,scaleInfo.x+edgeSmoothingValue,distanceToEdge.x),\\nsmoothstep(scaleInfo.y-edgeSmoothingValue,scaleInfo.y+edgeSmoothingValue,distanceToEdge.y));\\nborderColor=borderColor*borderValue*max(borderMinValue*inverseBorderPower,pointToHover); \\nalbedo+=borderColor;\\nalpha=max(alpha,borderValue);\\n#endif\\n#ifdef INNERGLOW\\n\\nvec2 uvGlow=(vUV-vec2(0.5,0.5))*(innerGlowColor.a*2.0);\\nuvGlow=uvGlow*uvGlow;\\nuvGlow=uvGlow*uvGlow;\\nalbedo+=mix(vec3(0.0,0.0,0.0),innerGlowColor.rgb,uvGlow.x+uvGlow.y); \\n#endif\\ngl_FragColor=vec4(albedo,alpha);\\n}\"","module.exports = \"precision highp float;\\n\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\nuniform mat4 world;\\nuniform mat4 viewProjection;\\nvarying vec2 vUV;\\n#ifdef BORDER\\nvarying vec2 scaleInfo;\\nuniform float borderWidth;\\nuniform vec3 scaleFactor;\\n#endif\\n#ifdef HOVERLIGHT\\nvarying vec3 worldPosition;\\n#endif\\nvoid main(void) {\\nvUV=uv;\\n#ifdef BORDER\\nvec3 scale=scaleFactor;\\nfloat minScale=min(min(scale.x,scale.y),scale.z);\\nfloat maxScale=max(max(scale.x,scale.y),scale.z);\\nfloat minOverMiddleScale=minScale/(scale.x+scale.y+scale.z-minScale-maxScale);\\nfloat areaYZ=scale.y*scale.z;\\nfloat areaXZ=scale.x*scale.z;\\nfloat areaXY=scale.x*scale.y;\\nfloat scaledBorderWidth=borderWidth; \\nif (abs(normal.x) == 1.0) \\n{\\nscale.x=scale.y;\\nscale.y=scale.z;\\nif (areaYZ>areaXZ && areaYZ>areaXY)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse if (abs(normal.y) == 1.0) \\n{\\nscale.x=scale.z;\\nif (areaXZ>areaXY && areaXZ>areaYZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nelse \\n{\\nif (areaXY>areaYZ && areaXY>areaXZ)\\n{\\nscaledBorderWidth*=minOverMiddleScale;\\n}\\n}\\nfloat scaleRatio=min(scale.x,scale.y)/max(scale.x,scale.y);\\nif (scale.x>scale.y)\\n{\\nscaleInfo.x=1.0-(scaledBorderWidth*scaleRatio);\\nscaleInfo.y=1.0-scaledBorderWidth;\\n}\\nelse\\n{\\nscaleInfo.x=1.0-scaledBorderWidth;\\nscaleInfo.y=1.0-(scaledBorderWidth*scaleRatio);\\n} \\n#endif \\nvec4 worldPos=world*vec4(position,1.0);\\n#ifdef HOVERLIGHT\\nworldPosition=worldPos.xyz;\\n#endif\\ngl_Position=viewProjection*worldPos;\\n}\\n\"","import { Scene, TransformNode, AbstractMesh, Mesh } from \"babylonjs\";\r\nimport { Button3D } from \"./button3D\";\r\n\r\n/**\r\n * Class used to create an interactable object. It's a 3D button using a mesh coming from the current scene\r\n */\r\nexport class MeshButton3D extends Button3D {\r\n    /** @hidden */\r\n    protected _currentMesh: Mesh;\r\n\r\n    /**\r\n     * Creates a new 3D button based on a mesh\r\n     * @param mesh mesh to become a 3D button\r\n     * @param name defines the control name\r\n     */\r\n    constructor(mesh: Mesh, name?: string) {\r\n        super(name);\r\n        this._currentMesh = mesh;\r\n\r\n        /**\r\n         * Provides a default behavior on hover/out & up/down\r\n         * Override those function to create your own desired behavior specific to your mesh\r\n         */\r\n        this.pointerEnterAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.1);\r\n        }\r\n\r\n        this.pointerOutAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 1.1);\r\n        }\r\n\r\n        this.pointerDownAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(0.95);\r\n        }\r\n\r\n        this.pointerUpAnimation = () => {\r\n            if (!this.mesh) {\r\n                return;\r\n            }\r\n            this.mesh.scaling.scaleInPlace(1.0 / 0.95);\r\n        }\r\n    }\r\n\r\n    protected _getTypeName(): string {\r\n        return \"MeshButton3D\";\r\n    }\r\n\r\n    // Mesh association\r\n    protected _createNode(scene: Scene): TransformNode {\r\n        this._currentMesh.getChildMeshes().forEach((mesh) => {\r\n            mesh.metadata = this;\r\n        });\r\n        return this._currentMesh;\r\n    }\r\n\r\n    protected _affectMaterial(mesh: AbstractMesh) {\r\n    }\r\n}","import { Tmp, Vector3 } from \"babylonjs\";\r\nimport { Container3D } from \"./container3D\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a plane\r\n */\r\nexport class PlanePanel extends VolumeBasedPanel {\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        control.position = nodePosition.clone();\r\n        let target = Tmp.Vector3[0];\r\n\r\n        target.copyFrom(nodePosition);\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, -1));\r\n                mesh.lookAt(target);\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                target.addInPlace(new BABYLON.Vector3(0, 0, 1));\r\n                mesh.lookAt(target);\r\n                break;\r\n        }\r\n\r\n    }\r\n}\r\n","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel where items get randomized planar mapping\r\n */\r\nexport class ScatterPanel extends VolumeBasedPanel {\r\n    private _iteration = 100.0;\r\n\r\n    /**\r\n     * Gets or sets the number of iteration to use to scatter the controls (100 by default)\r\n     */\r\n    public get iteration(): float {\r\n        return this._iteration;\r\n    }\r\n\r\n    public set iteration(value: float) {\r\n        if (this._iteration === value) {\r\n            return;\r\n        }\r\n\r\n        this._iteration = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n        let newPos = this._scatterMapping(nodePosition);\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, -1));\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new Vector3(0, 0, 1));\r\n                break;\r\n        }\r\n\r\n        control.position = newPos;\r\n    }\r\n\r\n    private _scatterMapping(source: Vector3): Vector3 {\r\n        source.x = (1.0 - Math.random() * 2.0) * this._cellWidth;\r\n        source.y = (1.0 - Math.random() * 2.0) * this._cellHeight;\r\n\r\n        return source;\r\n    }\r\n\r\n    protected _finalProcessing() {\r\n        var meshes = [];\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            meshes.push(child.mesh);\r\n        }\r\n\r\n        for (var count = 0; count < this._iteration; count++) {\r\n            meshes.sort((a, b) => {\r\n                let distance1 = a.position.lengthSquared();\r\n                let distance2 = b.position.lengthSquared();\r\n\r\n                if (distance1 < distance2) {\r\n                    return 1;\r\n                } else if (distance1 > distance2) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            });\r\n\r\n            let radiusPaddingSquared = Math.pow(this.margin, 2.0);\r\n            let cellSize = Math.max(this._cellWidth, this._cellHeight);\r\n            let difference2D = Tmp.Vector2[0];\r\n            let difference = Tmp.Vector3[0];\r\n\r\n            for (let i = 0; i < meshes.length - 1; i++) {\r\n                for (let j = i + 1; j < meshes.length; j++) {\r\n                    if (i != j) {\r\n                        meshes[j].position.subtractToRef(meshes[i].position, difference);\r\n\r\n                        // Ignore Z axis\r\n                        difference2D.x = difference.x;\r\n                        difference2D.y = difference.y;\r\n                        let combinedRadius = cellSize;\r\n                        let distance = difference2D.lengthSquared() - radiusPaddingSquared;\r\n                        let minSeparation = Math.min(distance, radiusPaddingSquared);\r\n                        distance -= minSeparation;\r\n\r\n                        if (distance < (Math.pow(combinedRadius, 2.0))) {\r\n                            difference2D.normalize();\r\n                            difference.scaleInPlace((combinedRadius - Math.sqrt(distance)) * 0.5);\r\n                            meshes[j].position.addInPlace(difference);\r\n                            meshes[i].position.subtractInPlace(difference);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { VolumeBasedPanel } from \"./volumeBasedPanel\";\r\nimport { float, Tools, Vector3, Matrix, Tmp } from \"babylonjs\";\r\nimport { Control3D } from \"./control3D\";\r\nimport { Container3D } from \"./container3D\";\r\n\r\n/**\r\n * Class used to create a container panel deployed on the surface of a sphere\r\n */\r\nexport class SpherePanel extends VolumeBasedPanel {\r\n    private _radius = 5.0;\r\n\r\n    /**\r\n     * Gets or sets the radius of the sphere where to project controls (5 by default)\r\n     */\r\n    public get radius(): float {\r\n        return this._radius;\r\n    }\r\n\r\n    public set radius(value: float) {\r\n        if (this._radius === value) {\r\n            return;\r\n        }\r\n\r\n        this._radius = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    protected _mapGridNode(control: Control3D, nodePosition: Vector3) {\r\n        let mesh = control.mesh;\r\n\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        let newPos = this._sphericalMapping(nodePosition);\r\n        control.position = newPos;\r\n\r\n        switch (this.orientation) {\r\n            case Container3D.FACEORIGIN_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(-newPos.x, -newPos.y, -newPos.z));\r\n                break;\r\n            case Container3D.FACEORIGINREVERSED_ORIENTATION:\r\n                mesh.lookAt(new BABYLON.Vector3(2 * newPos.x, 2 * newPos.y, 2 * newPos.z));\r\n                break;\r\n            case Container3D.FACEFORWARD_ORIENTATION:\r\n                break;\r\n            case Container3D.FACEFORWARDREVERSED_ORIENTATION:\r\n                mesh.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _sphericalMapping(source: Vector3) {\r\n        let newPos = new Vector3(0, 0, this._radius);\r\n\r\n        let xAngle = (source.y / this._radius);\r\n        let yAngle = -(source.x / this._radius);\r\n\r\n        Matrix.RotationYawPitchRollToRef(yAngle, xAngle, 0, Tmp.Matrix[0]);\r\n\r\n        return Vector3.TransformNormal(newPos, Tmp.Matrix[0]);\r\n    }\r\n}\r\n","import { Container3D } from \"./container3D\";\r\nimport { Tools, Matrix, Tmp, Vector3 } from \"babylonjs\";\r\n\r\n/**\r\n * Class used to create a stack panel in 3D on XY plane\r\n */\r\nexport class StackPanel3D extends Container3D {\r\n    private _isVertical = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the stack panel is vertical or horizontal (horizontal by default)\r\n     */\r\n    public get isVertical(): boolean {\r\n        return this._isVertical;\r\n    }\r\n\r\n    public set isVertical(value: boolean) {\r\n        if (this._isVertical === value) {\r\n            return;\r\n        }\r\n\r\n        this._isVertical = value;\r\n\r\n        Tools.SetImmediate(() => {\r\n            this._arrangeChildren();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance between elements\r\n     */\r\n    public margin = 0.1;\r\n\r\n    /**\r\n     * Creates new StackPanel\r\n     * @param isVertical \r\n     */\r\n    public constructor(isVertical = false) {\r\n        super();\r\n\r\n        this._isVertical = isVertical;\r\n    }\r\n\r\n    protected _arrangeChildren() {\r\n        let width = 0;\r\n        let height = 0;\r\n        let controlCount = 0;\r\n        let extendSizes = [];\r\n\r\n        let currentInverseWorld = Matrix.Invert(this.node!.computeWorldMatrix(true));\r\n\r\n        // Measure\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n\r\n            controlCount++;\r\n            child.mesh.computeWorldMatrix(true);\r\n            child.mesh.getWorldMatrix().multiplyToRef(currentInverseWorld, Tmp.Matrix[0]);\r\n\r\n            let boundingBox = child.mesh.getBoundingInfo().boundingBox;\r\n            let extendSize = Vector3.TransformNormal(boundingBox.extendSize, Tmp.Matrix[0]);\r\n            extendSizes.push(extendSize);\r\n\r\n            if (this._isVertical) {\r\n                height += extendSize.y;\r\n            } else {\r\n                width += extendSize.x;\r\n            }\r\n        }\r\n\r\n        if (this._isVertical) {\r\n            height += (controlCount - 1) * this.margin / 2;\r\n        } else {\r\n            width += (controlCount - 1) * this.margin / 2;\r\n        }\r\n\r\n        // Arrange\r\n        let offset: number;\r\n        if (this._isVertical) {\r\n            offset = -height;\r\n        } else {\r\n            offset = -width;\r\n        }\r\n\r\n        let index = 0;\r\n        for (var child of this._children) {\r\n            if (!child.mesh) {\r\n                continue;\r\n            }\r\n            controlCount--;\r\n            let extendSize = extendSizes[index++];\r\n\r\n            if (this._isVertical) {\r\n                child.position.y = offset + extendSize.y;\r\n                child.position.x = 0;\r\n                offset += extendSize.y * 2;\r\n            } else {\r\n                child.position.x = offset + extendSize.x;\r\n                child.position.y = 0;\r\n                offset += extendSize.x * 2;\r\n            }\r\n\r\n            offset += (controlCount > 0 ? this.margin : 0)\r\n        }\r\n    }\r\n}\r\n","export * from \"./fluentMaterial\";","import { IDisposable, Scene, Nullable, Observer, UtilityLayerRenderer, PointerInfo, Observable, Vector3, Material, AbstractMesh, Engine, HemisphericLight, PointerEventTypes } from \"babylonjs\";\r\nimport { Container3D } from \"./controls/container3D\";\r\nimport { Control3D } from \"./controls/control3D\";\r\n\r\n/**\r\n * Class used to manage 3D user interface\r\n * @see http://doc.babylonjs.com/how_to/gui3d\r\n */\r\nexport class GUI3DManager implements IDisposable {\r\n    private _scene: Scene;\r\n    private _sceneDisposeObserver: Nullable<Observer<Scene>>;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n    private _rootContainer: Container3D;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>>;\r\n    private _pointerOutObserver: Nullable<Observer<number>>;\r\n    /** @hidden */\r\n    public _lastPickedControl: Control3D;\r\n    /** @hidden */\r\n    public _lastControlOver: { [pointerId: number]: Control3D } = {};\r\n    /** @hidden */\r\n    public _lastControlDown: { [pointerId: number]: Control3D } = {};\r\n\r\n    /**\r\n     * Observable raised when the point picked by the pointer events changed\r\n     */\r\n    public onPickedPointChangedObservable = new Observable<Nullable<Vector3>>();\r\n\r\n    // Shared resources\r\n    /** @hidden */\r\n    public _sharedMaterials: { [key: string]: Material } = {};\r\n\r\n    /** Gets the hosting scene */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /** Gets associated utility layer */\r\n    public get utilityLayer(): Nullable<UtilityLayerRenderer> {\r\n        return this._utilityLayer;\r\n    }\r\n\r\n    /**\r\n     * Creates a new GUI3DManager\r\n     * @param scene \r\n     */\r\n    public constructor(scene?: Scene) {\r\n        this._scene = scene || Engine.LastCreatedScene!;\r\n        this._sceneDisposeObserver = this._scene.onDisposeObservable.add(() => {\r\n            this._sceneDisposeObserver = null;\r\n            this._utilityLayer = null;\r\n            this.dispose();\r\n        })\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene);\r\n        this._utilityLayer.onlyCheckPointerDownEvents = false;\r\n        this._utilityLayer.mainSceneTrackerPredicate = (mesh: Nullable<AbstractMesh>) => {\r\n            return mesh && mesh.metadata && mesh.metadata._node;\r\n        }\r\n\r\n        // Root\r\n        this._rootContainer = new Container3D(\"RootContainer\");\r\n        this._rootContainer._host = this;\r\n        let utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        // Events\r\n        this._pointerOutObserver = this._utilityLayer.onPointerOutObservable.add((pointerId) => {\r\n            this._handlePointerOut(pointerId, true);\r\n        });\r\n\r\n        this._pointerObserver = utilityLayerScene.onPointerObservable.add((pi, state) => {\r\n            this._doPicking(pi);\r\n        });\r\n\r\n        // Scene\r\n        this._utilityLayer.utilityLayerScene.autoClear = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = false;\r\n        new HemisphericLight(\"hemi\", Vector3.Up(), this._utilityLayer.utilityLayerScene);\r\n    }\r\n\r\n    private _handlePointerOut(pointerId: number, isPointerUp: boolean) {\r\n        var previousControlOver = this._lastControlOver[pointerId];\r\n        if (previousControlOver) {\r\n            previousControlOver._onPointerOut(previousControlOver);\r\n            delete this._lastControlOver[pointerId];\r\n        }\r\n\r\n        if (isPointerUp) {\r\n            if (this._lastControlDown[pointerId]) {\r\n                this._lastControlDown[pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerId];\r\n            }\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.notifyObservers(null);\r\n    }\r\n\r\n    private _doPicking(pi: PointerInfo): boolean {\r\n        if (!this._utilityLayer || !this._utilityLayer.utilityLayerScene.activeCamera) {\r\n            return false;\r\n        }\r\n\r\n        let pointerEvent = <PointerEvent>(pi.event);\r\n\r\n        let pointerId = pointerEvent.pointerId || 0;\r\n        let buttonIndex = pointerEvent.button;\r\n\r\n        let pickingInfo = pi.pickInfo;\r\n        if (!pickingInfo || !pickingInfo.hit) {\r\n            this._handlePointerOut(pointerId, pi.type === PointerEventTypes.POINTERUP);\r\n            return false;\r\n        }\r\n\r\n        let control = <Control3D>(pickingInfo.pickedMesh!.metadata);\r\n        if (pickingInfo.pickedPoint) {\r\n            this.onPickedPointChangedObservable.notifyObservers(pickingInfo.pickedPoint);\r\n        }\r\n\r\n        if (!control._processObservables(pi.type, pickingInfo.pickedPoint!, pointerId, buttonIndex)) {\r\n\r\n            if (pi.type === PointerEventTypes.POINTERMOVE) {\r\n                if (this._lastControlOver[pointerId]) {\r\n                    this._lastControlOver[pointerId]._onPointerOut(this._lastControlOver[pointerId]);\r\n                }\r\n\r\n                delete this._lastControlOver[pointerId];\r\n            }\r\n        }\r\n\r\n        if (pi.type === PointerEventTypes.POINTERUP) {\r\n            if (this._lastControlDown[pointerEvent.pointerId]) {\r\n                this._lastControlDown[pointerEvent.pointerId].forcePointerUp();\r\n                delete this._lastControlDown[pointerEvent.pointerId];\r\n            }\r\n\r\n            if (pointerEvent.pointerType === \"touch\") {\r\n                this._handlePointerOut(pointerId, false);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the root container\r\n     */\r\n    public get rootContainer(): Container3D {\r\n        return this._rootContainer;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given control is in the root child list\r\n     * @param control defines the control to check\r\n     * @returns true if the control is in the root child list\r\n     */\r\n    public containsControl(control: Control3D): boolean {\r\n        return this._rootContainer.containsControl(control);\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the root child list\r\n     * @param control defines the control to add\r\n     * @returns the current manager\r\n     */\r\n    public addControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a control from the root child list\r\n     * @param control defines the control to remove\r\n     * @returns the current container\r\n     */\r\n    public removeControl(control: Control3D): GUI3DManager {\r\n        this._rootContainer.removeControl(control);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        this._rootContainer.dispose();\r\n\r\n        for (var materialName in this._sharedMaterials) {\r\n            if (!this._sharedMaterials.hasOwnProperty(materialName)) {\r\n                continue;\r\n            }\r\n\r\n            this._sharedMaterials[materialName].dispose();\r\n        }\r\n\r\n        this._sharedMaterials = {};\r\n\r\n        if (this._pointerOutObserver && this._utilityLayer) {\r\n            this._utilityLayer.onPointerOutObservable.remove(this._pointerOutObserver);\r\n            this._pointerOutObserver = null;\r\n        }\r\n\r\n        this.onPickedPointChangedObservable.clear();\r\n\r\n        let utilityLayerScene = this._utilityLayer ? this._utilityLayer.utilityLayerScene : null;\r\n\r\n        if (utilityLayerScene) {\r\n            if (this._pointerObserver) {\r\n                utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n                this._pointerObserver = null;\r\n            }\r\n        }\r\n        if (this._scene) {\r\n            if (this._sceneDisposeObserver) {\r\n                this._scene.onDisposeObservable.remove(this._sceneDisposeObserver);\r\n                this._sceneDisposeObserver = null;\r\n            }\r\n        }\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}