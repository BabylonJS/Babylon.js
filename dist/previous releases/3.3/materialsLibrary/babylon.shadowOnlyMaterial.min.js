var BABYLON,__extends=this&&this.__extends||(function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var i in n)n.hasOwnProperty(i)&&(e[i]=n[i])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}})();!(function(g){var m=(function(n){function e(){var e=n.call(this)||this;return e.CLIPPLANE=!1,e.CLIPPLANE2=!1,e.CLIPPLANE3=!1,e.CLIPPLANE4=!1,e.POINTSIZE=!1,e.FOG=!1,e.NORMAL=!1,e.NUM_BONE_INFLUENCERS=0,e.BonesPerMesh=0,e.INSTANCES=!1,e.rebuild(),e}return __extends(e,n),e})(g.MaterialDefines),e=(function(t){function r(e,n){var i=t.call(this,e,n)||this;return i.shadowColor=g.Color3.Black(),i}return __extends(r,t),r.prototype.needAlphaBlending=function(){return!0},r.prototype.needAlphaTesting=function(){return!1},r.prototype.getAlphaTestTexture=function(){return null},Object.defineProperty(r.prototype,"activeLight",{get:function(){return this._activeLight},set:function(e){this._activeLight=e},enumerable:!0,configurable:!0}),r.prototype.isReadyForSubMesh=function(e,n,i){if(this.isFrozen&&this._wasPreviouslyReady&&n.effect)return!0;n._materialDefines||(n._materialDefines=new m);var t=n._materialDefines,r=this.getScene();if(!this.checkReadyOnEveryCall&&n.effect&&this._renderId===r.getRenderId())return!0;var a=r.getEngine();if(this._activeLight)for(var o=0,l=e._lightSources;o<l.length;o++){var s=l[o];if(s.shadowEnabled){if(this._activeLight===s)break;var c=e._lightSources.indexOf(this._activeLight);-1!==c&&(e._lightSources.splice(c,1),e._lightSources.splice(0,0,this._activeLight));break}}if(g.MaterialHelper.PrepareDefinesForFrameBoundValues(r,a,t,!!i),g.MaterialHelper.PrepareDefinesForMisc(e,r,!1,this.pointsCloud,this.fogEnabled,this._shouldTurnAlphaTestOn(e),t),t._needNormals=g.MaterialHelper.PrepareDefinesForLights(r,e,t,!1,1),g.MaterialHelper.PrepareDefinesForAttributes(e,t,!1,!0),t.isDirty){t.markAsProcessed(),r.resetCachedMaterial();var f=new g.EffectFallbacks;t.FOG&&f.addFallback(1,"FOG"),g.MaterialHelper.HandleFallbacksForShadows(t,f,1),0<t.NUM_BONE_INFLUENCERS&&f.addCPUSkinningFallback(0,e);var d=[g.VertexBuffer.PositionKind];t.NORMAL&&d.push(g.VertexBuffer.NormalKind),g.MaterialHelper.PrepareAttributesForBones(d,e,t,f),g.MaterialHelper.PrepareAttributesForInstances(d,t);var u=t.toString(),h=["world","view","viewProjection","vEyePosition","vLightsType","vFogInfos","vFogColor","pointSize","alpha","shadowColor","mBones","vClipPlane","vClipPlane2","vClipPlane3","vClipPlane4"],p=new Array,v=new Array;g.MaterialHelper.PrepareUniformsAndSamplersList({uniformsNames:h,uniformBuffersNames:v,samplers:p,defines:t,maxSimultaneousLights:1}),n.setEffect(r.getEngine().createEffect("shadowOnly",{attributes:d,uniformsNames:h,uniformBuffersNames:v,samplers:p,defines:u,fallbacks:f,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:1}},a),t)}return!(!n.effect||!n.effect.isReady())&&(this._renderId=r.getRenderId(),this._wasPreviouslyReady=!0)},r.prototype.bindForSubMesh=function(e,n,i){var t=this.getScene(),r=i._materialDefines;if(r){var a=i.effect;a&&(this._activeEffect=a,this.bindOnlyWorldMatrix(e),this._activeEffect.setMatrix("viewProjection",t.getTransformMatrix()),g.MaterialHelper.BindBonesParameters(n,this._activeEffect),this._mustRebind(t,a)&&(g.MaterialHelper.BindClipPlane(this._activeEffect,t),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),this._activeEffect.setFloat("alpha",this.alpha),this._activeEffect.setColor3("shadowColor",this.shadowColor),g.MaterialHelper.BindEyePosition(a,t)),t.lightsEnabled&&g.MaterialHelper.BindLights(t,n,this._activeEffect,r,1),t.fogEnabled&&n.applyFog&&t.fogMode!==g.Scene.FOGMODE_NONE&&this._activeEffect.setMatrix("view",t.getViewMatrix()),g.MaterialHelper.BindFogParameters(t,n,this._activeEffect),this._afterBind(n,this._activeEffect))}},r.prototype.clone=function(e){var n=this;return g.SerializationHelper.Clone((function(){return new r(e,n.getScene())}),this)},r.prototype.serialize=function(){var e=g.SerializationHelper.Serialize(this);return e.customType="BABYLON.ShadowOnlyMaterial",e},r.prototype.getClassName=function(){return"ShadowOnlyMaterial"},r.Parse=function(e,n,i){return g.SerializationHelper.Parse((function(){return new r(e.name,n)}),e,n,i)},r})(g.PushMaterial);g.ShadowOnlyMaterial=e})(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.shadowOnlyVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n",BABYLON.Effect.ShadersStore.shadowOnlyPixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform float alpha;\nuniform vec3 shadowColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#include<lightFragment>[0..1]\n\nvec4 color=vec4(shadowColor,(1.0-clamp(shadow,0.,1.))*alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}";