var BABYLON;!(function(o){var r=(function(r){function n(n,e,t,l,i){var c=r.call(this,n,e,"cloudProceduralTexture",t,l,i)||this;return c._skyColor=new o.Color4(.15,.68,1,1),c._cloudColor=new o.Color4(1,1,1,1),c.updateShaderUniforms(),c}return __extends(n,r),n.prototype.updateShaderUniforms=function(){this.setColor4("skyColor",this._skyColor),this.setColor4("cloudColor",this._cloudColor)},Object.defineProperty(n.prototype,"skyColor",{get:function(){return this._skyColor},set:function(o){this._skyColor=o,this.updateShaderUniforms()},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"cloudColor",{get:function(){return this._cloudColor},set:function(o){this._cloudColor=o,this.updateShaderUniforms()},enumerable:!0,configurable:!0}),n})(o.ProceduralTexture);o.CloudProceduralTexture=r})(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.cloudProceduralTexturePixelShader="precision highp float;\nvarying vec2 vUV;\nuniform vec4 skyColor;\nuniform vec4 cloudColor;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nvoid main() {\nvec2 p=vUV*12.0;\nvec4 c=mix(skyColor,cloudColor,fbm(p));\ngl_FragColor=c;\n}\n";