.ConfiguratorContainer {
    $line-height: 25px;
    $line-padding-left: 3px;
    $line-padding-right: 5px;
    $line-padding-top-bottom: 7px;
    $line-padding: $line-padding-top-bottom $line-padding-right $line-padding-top-bottom $line-padding-left;
    $line-button-gap: 0rem;
    $line-content-spacing: "space-between";
    $border-radius: 0px;
    color: white;
    background: #333333;
    grid-row: 1;
    grid-column: 1;
    overflow-y: auto;
    height: 100%;
    width: 100%;
    box-sizing: border-box;

    // Wrapper to help with row flex for lines
    .FlexItem {
        height: 100%;
        align-content: center;
        text-align: center;
    }

    // Input: prevent default styling
    input {
        border: 0;
        border-radius: $border-radius;
        box-sizing: border-box;
        width: 100%;
        font: inherit; // Forms don't inherit the font-family by default
    }

    // Custom image button
    // Hack: since the svgs are dark, use inverted colors
    .ImageButton {
        border-radius: $border-radius;
        filter: invert(1);
        opacity: 0.9;

        &:hover {
            opacity: 1;
        }
        &:active {
            background: rgb(215, 215, 215);
        }
    }

    // LineContainer override
    .paneContainer {
        margin-top: 3px;
        display: grid;
        grid-template-rows: 100%;
        grid-template-columns: 100%;

        .paneList {
            border-left: 3px solid transparent;
        }

        // Make every direct child of the paneList a flexbox
        // to help align
        .paneList > * {
            height: $line-height;
            padding: $line-padding;
            display: flex;
            flex-direction: row;
            align-items: center;
            gap: $line-button-gap;
            justify-content: $line-content-spacing;
        }

        &:hover {
            .paneList {
                border-left: 3px solid rgba(51, 122, 183, 0.8);
            }

            .paneContainer-content {
                .header {
                    .title {
                        border-left: 3px solid rgb(51, 122, 183);
                    }
                }
            }
        }

        .paneContainer-highlight-border {
            grid-row: 1;
            grid-column: 1;
            opacity: 1;
            border: 3px solid red;
            transition: opacity 250ms;
            pointer-events: none;

            &.transparent {
                opacity: 0;
            }
        }

        .paneContainer-content {
            grid-row: 1;
            grid-column: 1;

            .header {
                display: grid;
                grid-template-columns: 1fr auto;
                background: #555555;
                height: 30px;
                padding-right: 5px;
                cursor: pointer;

                .title {
                    border-left: 3px solid transparent;
                    padding-left: 5px;
                    grid-column: 1;
                    display: flex;
                    align-items: center;
                }

                .collapse {
                    grid-column: 2;
                    display: flex;
                    align-items: center;
                    justify-items: center;
                    transform-origin: center;

                    &.closed {
                        transform: rotate(180deg);
                    }
                }
            }

            .paneList > div:not(:last-child) {
                border-bottom: 0.5px solid rgba(255, 255, 255, 0.1);
            }

            .fragment > div:not(:last-child) {
                border-bottom: 0.5px solid rgba(255, 255, 255, 0.1);
            }
        }
    }

    // TextInputLineComponent override, multiline. Is bespoke, so fine to do like this.
    .textInputArea {
        height: 4 * $line-height;

        textarea {
            padding: $line-padding;
            width: 100%;
            height: 100%;
            resize: none;
            border-radius: $border-radius;
            box-sizing: border-box;
            width: 100%;
            font: inherit;
            white-space: pre;
            overflow-x: auto;
        }

        textarea:disabled {
            opacity: 1;
            color: black;
            background: white;
            cursor: text;
            border: inherit;
        }
    }

    // TextInputLineComponent override, single line
    .textInputLine {
        height: 100%;
        .value {
            height: 100%;
            input {
                height: 100%;
            }
        }
    }

    // ButtonLineComponent override
    .buttonLine {
        button {
            background: #222222;
            outline: 1px solid rgb(51, 122, 183);
            outline-offset: -1px;
            border-radius: $border-radius;
            color: white;
            padding: 4px 5px;
            opacity: 0.9;
            width: 100%;
            box-sizing: border-box;
        }
        button:hover {
            opacity: 1;
        }
        button:active {
            background: #282828;
        }
        button:focus {
            border: 1px solid rgb(51, 122, 183);
            outline: 0px;
        }
    }

    // SliderLine override
    .sliderLine {
        display: flex;
        flex-direction: row;
        justify-content: $line-content-spacing;
        gap: $line-button-gap;
        height: $line-height;
        align-items: center;

        .label {
            flex: 1;
            align-self: center;
            text-align: left;
        }

        .slider {
            flex: 2;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;

            .range {
                -webkit-appearance: none;
                width: 100%;
                height: 20%;
                background: #d3d3d3;
                border-radius: 5px;
                outline: none;
                opacity: 0.7;
                transition: opacity 0.2s;
            }

            .range:hover {
                opacity: 1;
            }

            .range::-webkit-slider-thumb {
                -webkit-appearance: none;
                appearance: none;
                width: 14px;
                height: 14px;
                border-radius: 50%;
                background: rgb(51, 122, 183);
                cursor: pointer;
            }

            .range::-moz-range-thumb {
                width: 14px;
                height: 14px;
                border-radius: 50%;
                background: rgb(51, 122, 183);
                cursor: pointer;
            }
        }

        // Hide the float text input
        .floatLine {
            display: none;
        }

        // Hide the copy button
        .copy {
            display: none;
        }
    }

    // OptionsLine override
    .listLine {
        align-self: center;
        display: flex;
        flex-direction: row;
        justify-content: $line-content-spacing;
        gap: $line-button-gap;

        .label {
            flex: 1;
            align-self: center;
            text-align: left;
        }

        .options {
            align-content: center;
            flex: 1.5;

            select {
                width: 100%;
            }
        }

        .copy {
            display: none;
        }
    }

    // ColorPicker override
    .color-picker-container {
        width: 100%;

        input {
            border: 1px;
        }
    }

    // CheckBoxLine override
    .checkBoxLine {
        align-self: center;
        display: flex;
        flex-direction: row;
        justify-content: "space-between";
        gap: $line-button-gap;
        width: 100%;

        .label {
            flex: 1;
            align-self: center;
            text-align: left;
        }

        .checkBox {
            $toggle-width: 35px;
            flex: 0 0 $toggle-width; // Fixed width
            align-content: center;

            $toggle-height: $line-height * 0.6;
            $thumb-size: calc($toggle-height * 0.8);
            $thumb-left-unchecked: ($toggle-width * 0.05);
            $thumb-left-checked: calc($toggle-width - $thumb-size - $thumb-left-unchecked);

            .icon {
                display: none;
            }

            // The toggle container
            .lbl {
                position: relative;
                display: block;
                height: $toggle-height;
                width: $toggle-width;
                margin-right: 5px;
                background: #898989;
                border-radius: 100px;
                cursor: pointer;
                transition: all 0.3s ease;
            }
            .lbl.checked {
                background: rgb(51, 122, 183);
                transition: all 0.3s ease;
            }

            // The toggle thumb
            .lbl:after {
                position: absolute;
                left: $thumb-left-unchecked;
                transform: translateY(12.5%);
                display: block;
                width: $thumb-size;
                height: $thumb-size;
                border-radius: 50%;
                background: #fff;
                box-shadow: 0px 3px 3px rgba(0, 0, 0, 0.05);
                content: "";
                transition: all 0.15s ease;
            }
            .lbl.checked:after {
                left: $thumb-left-checked;
                background: #164975;
            }

            .lbl:active:after {
                transform: scale(1.15, 0.85);
            }

            .hidden {
                display: none;
            }
        }

        .copy {
            display: none;
        }
    }

    // Color3Line override
    // .color3Line {
    //     padding-left: $line-padding-sides;
    //     display: grid;

    //     .firstLine {
    //         height: 30px;
    //         display: grid;
    //         grid-template-columns: 1fr auto 20px;

    //         .label {
    //             grid-column: 1;
    //             display: flex;
    //             align-items: center;
    //         }

    //         .textInputLine {
    //             display: none;
    //         }

    //         .color3 {
    //             grid-column: 2;
    //             width: 50px;

    //             display: flex;
    //             align-items: center;

    //             input {
    //                 margin-right: 5px;
    //             }
    //         }

    //         .expand {
    //             grid-column: 3;
    //             display: grid;
    //             align-items: center;
    //             justify-items: center;
    //             cursor: pointer;
    //         }

    //         .copy {
    //             grid-column: 4;
    //             display: grid;
    //             align-items: center;
    //             justify-items: center;
    //             cursor: pointer;
    //             img {
    //                 height: 100%;
    //             }
    //         }
    //     }

    //     .secondLine {
    //         display: grid;
    //         padding-right: 5px;
    //         border-left: 1px solid rgb(51, 122, 183);

    //         .numeric {
    //             display: grid;
    //             grid-template-columns: 1fr auto;
    //         }

    //         .numeric-label {
    //             text-align: right;
    //             grid-column: 1;
    //             display: flex;
    //             align-items: center;
    //             justify-self: right;
    //             margin-right: 10px;
    //         }

    //         .numeric-value {
    //             width: 120px;
    //             grid-column: 2;
    //             display: flex;
    //             align-items: center;
    //             border: 1px solid rgb(51, 122, 183);
    //         }
    //     }
    // }
}
