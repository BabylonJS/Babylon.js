import { AbstractViewer } from "../viewer/viewer";
import { IModelConfiguration } from "../configuration/configuration";
import { ViewerModel } from "../model/viewerModel";
import { ILoaderPlugin } from './plugins/loaderPlugin';
/**
 * An instance of the class is in charge of loading the model correctly.
 * This class will continously be expended with tasks required from the specific loaders Babylon has.
 *
 * A Model loader is unique per (Abstract)Viewer. It is being generated by the viewer
 */
export declare class ModelLoader {
    private _viewer;
    private _loadId;
    private _disposed;
    private _loaders;
    private _plugins;
    /**
     * Create a new Model loader
     * @param _viewer the viewer using this model loader
     */
    constructor(_viewer: AbstractViewer);
    addPlugin(plugin: ILoaderPlugin | string): void;
    /**
     * Load a model using predefined configuration
     * @param modelConfiguration the modelConfiguration to use to load the model
     */
    load(modelConfiguration: IModelConfiguration): ViewerModel;
    cancelLoad(model: ViewerModel): void;
    /**
     * dispose the model loader.
     * If loaders are registered and are in the middle of loading, they will be disposed and the request(s) will be cancelled.
     */
    dispose(): void;
    private _checkAndRun(functionName, ...payload);
}
