var BABYLON;!function(e){var r=4,n=function(e){function r(){e.call(this),this.BUMP=!1,this.REFLECTION=!1,this.CLIPPLANE=!1,this.ALPHATEST=!1,this.POINTSIZE=!1,this.FOG=!1,this.LIGHT0=!1,this.LIGHT1=!1,this.LIGHT2=!1,this.LIGHT3=!1,this.SPOTLIGHT0=!1,this.SPOTLIGHT1=!1,this.SPOTLIGHT2=!1,this.SPOTLIGHT3=!1,this.HEMILIGHT0=!1,this.HEMILIGHT1=!1,this.HEMILIGHT2=!1,this.HEMILIGHT3=!1,this.DIRLIGHT0=!1,this.DIRLIGHT1=!1,this.DIRLIGHT2=!1,this.DIRLIGHT3=!1,this.POINTLIGHT0=!1,this.POINTLIGHT1=!1,this.POINTLIGHT2=!1,this.POINTLIGHT3=!1,this.SHADOW0=!1,this.SHADOW1=!1,this.SHADOW2=!1,this.SHADOW3=!1,this.SHADOWS=!1,this.SHADOWVSM0=!1,this.SHADOWVSM1=!1,this.SHADOWVSM2=!1,this.SHADOWVSM3=!1,this.SHADOWPCF0=!1,this.SHADOWPCF1=!1,this.SHADOWPCF2=!1,this.SHADOWPCF3=!1,this.NORMAL=!1,this.UV1=!1,this.UV2=!1,this.VERTEXCOLOR=!1,this.VERTEXALPHA=!1,this.BONES=!1,this.BONES4=!1,this.BonesPerMesh=0,this.INSTANCES=!1,this.SPECULARTERM=!1,this._keys=Object.keys(this)}return __extends(r,e),r}(e.MaterialDefines),i=function(i){function t(r,t,o){void 0===o&&(o=new e.Vector2(512,512)),i.call(this,r,t),this.renderTargetSize=o,this.diffuseColor=new e.Color3(1,1,1),this.specularColor=new e.Color3(0,0,0),this.specularPower=64,this.disableLighting=!1,this.windForce=6,this.windDirection=new e.Vector2(0,1),this.waveHeight=.4,this.bumpHeight=.4,this.waterColor=new e.Color3(.1,.1,.6),this.colorBlendFactor=.2,this.waveLength=.1,this.waveSpeed=1,this._mesh=null,this._reflectionTransform=e.Matrix.Zero(),this._lastTime=0,this._scaledDiffuse=new e.Color3,this._scaledSpecular=new e.Color3,this._defines=new n,this._cachedDefines=new n,this._createRenderTargets(t,o)}return __extends(t,i),Object.defineProperty(t.prototype,"refractionTexture",{get:function(){return this._refractionRTT},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"reflectionTexture",{get:function(){return this._reflectionRTT},enumerable:!0,configurable:!0}),t.prototype.addToRenderList=function(e){this._refractionRTT.renderList.push(e),this._reflectionRTT.renderList.push(e)},t.prototype.enableRenderTargets=function(e){var r=e?1:0;this._refractionRTT.refreshRate=r,this._reflectionRTT.refreshRate=r},t.prototype.needAlphaBlending=function(){return this.alpha<1},t.prototype.needAlphaTesting=function(){return!1},t.prototype.getAlphaTestTexture=function(){return null},t.prototype._checkCache=function(e,r,n){return r?this._defines.INSTANCES!==n?!1:r._materialDefines&&r._materialDefines.isEqual(this._defines)?!0:!1:!0},t.prototype.isReady=function(i,t){if(this.checkReadyOnlyOnce&&this._wasPreviouslyReady)return!0;var o=this.getScene();if(!this.checkReadyOnEveryCall&&this._renderId===o.getRenderId()&&this._checkCache(o,i,t))return!0;var s=o.getEngine(),a=!1,f=!1;if(this._defines.reset(),o.texturesEnabled){if(this.bumpTexture&&e.StandardMaterial.BumpTextureEnabled){if(!this.bumpTexture.isReady())return!1;f=!0,this._defines.BUMP=!0}e.StandardMaterial.ReflectionTextureEnabled&&(this._defines.REFLECTION=!0)}o.clipPlane&&(this._defines.CLIPPLANE=!0),s.getAlphaTesting()&&(this._defines.ALPHATEST=!0),(this.pointsCloud||o.forcePointsCloud)&&(this._defines.POINTSIZE=!0),o.fogEnabled&&i&&i.applyFog&&o.fogMode!==e.Scene.FOGMODE_NONE&&this.fogEnabled&&(this._defines.FOG=!0);var d=0;if(o.lightsEnabled&&!this.disableLighting)for(var l=0;l<o.lights.length;l++){var h=o.lights[l];if(h.isEnabled()){if(h._excludedMeshesIds.length>0){for(var c=0;c<h._excludedMeshesIds.length;c++){var u=o.getMeshByID(h._excludedMeshesIds[c]);u&&h.excludedMeshes.push(u)}h._excludedMeshesIds=[]}if(h._includedOnlyMeshesIds.length>0){for(var v=0;v<h._includedOnlyMeshesIds.length;v++){var p=o.getMeshByID(h._includedOnlyMeshesIds[v]);p&&h.includedOnlyMeshes.push(p)}h._includedOnlyMeshesIds=[]}if(h.canAffectMesh(i)){a=!0,this._defines["LIGHT"+d]=!0;var g;if(g=h instanceof e.SpotLight?"SPOTLIGHT"+d:h instanceof e.HemisphericLight?"HEMILIGHT"+d:h instanceof e.PointLight?"POINTLIGHT"+d:"DIRLIGHT"+d,this._defines[g]=!0,h.specular.equalsFloats(0,0,0)||(this._defines.SPECULARTERM=!0),o.shadowsEnabled){var m=h.getShadowGenerator();i&&i.receiveShadows&&m&&(this._defines["SHADOW"+d]=!0,this._defines.SHADOWS=!0,(m.useVarianceShadowMap||m.useBlurVarianceShadowMap)&&(this._defines["SHADOWVSM"+d]=!0),m.usePoissonSampling&&(this._defines["SHADOWPCF"+d]=!0))}if(d++,d===r)break}}}if(i&&(a&&i.isVerticesDataPresent(e.VertexBuffer.NormalKind)&&(this._defines.NORMAL=!0),f&&(i.isVerticesDataPresent(e.VertexBuffer.UVKind)&&(this._defines.UV1=!0),i.isVerticesDataPresent(e.VertexBuffer.UV2Kind)&&(this._defines.UV2=!0)),i.useVertexColors&&i.isVerticesDataPresent(e.VertexBuffer.ColorKind)&&(this._defines.VERTEXCOLOR=!0,i.hasVertexAlpha&&(this._defines.VERTEXALPHA=!0)),i.useBones&&i.computeBonesUsingShaders&&(this._defines.BONES=!0,this._defines.BonesPerMesh=i.skeleton.bones.length+1,this._defines.BONES4=!0),t&&(this._defines.INSTANCES=!0)),this._mesh=i,!this._defines.isEqual(this._cachedDefines)){this._defines.cloneTo(this._cachedDefines),o.resetCachedMaterial();var T=new e.EffectFallbacks;for(this._defines.FOG&&T.addFallback(1,"FOG"),d=0;r>d;d++)this._defines["LIGHT"+d]&&(d>0&&T.addFallback(d,"LIGHT"+d),this._defines["SHADOW"+d]&&T.addFallback(0,"SHADOW"+d),this._defines["SHADOWPCF"+d]&&T.addFallback(0,"SHADOWPCF"+d),this._defines["SHADOWVSM"+d]&&T.addFallback(0,"SHADOWVSM"+d));this._defines.BONES4&&T.addFallback(0,"BONES4");var L=[e.VertexBuffer.PositionKind];this._defines.NORMAL&&L.push(e.VertexBuffer.NormalKind),this._defines.UV1&&L.push(e.VertexBuffer.UVKind),this._defines.UV2&&L.push(e.VertexBuffer.UV2Kind),this._defines.VERTEXCOLOR&&L.push(e.VertexBuffer.ColorKind),this._defines.BONES&&(L.push(e.VertexBuffer.MatricesIndicesKind),L.push(e.VertexBuffer.MatricesWeightsKind)),this._defines.INSTANCES&&(L.push("world0"),L.push("world1"),L.push("world2"),L.push("world3"));var w="water",S=this._defines.toString();this._effect=o.getEngine().createEffect(w,L,["world","view","viewProjection","vEyePosition","vLightsType","vDiffuseColor","vSpecularColor","vLightData0","vLightDiffuse0","vLightSpecular0","vLightDirection0","vLightGround0","lightMatrix0","vLightData1","vLightDiffuse1","vLightSpecular1","vLightDirection1","vLightGround1","lightMatrix1","vLightData2","vLightDiffuse2","vLightSpecular2","vLightDirection2","vLightGround2","lightMatrix2","vLightData3","vLightDiffuse3","vLightSpecular3","vLightDirection3","vLightGround3","lightMatrix3","vFogInfos","vFogColor","pointSize","vNormalInfos","mBones","vClipPlane","normalMatrix","shadowsInfo0","shadowsInfo1","shadowsInfo2","shadowsInfo3","worldReflectionViewProjection","windDirection","waveLength","time","windForce","cameraPosition","bumpHeight","waveHeight","waterColor","colorBlendFactor","waveSpeed"],["normalSampler","shadowSampler0","shadowSampler1","shadowSampler2","shadowSampler3","refractionSampler","reflectionSampler"],S,T,this.onCompiled,this.onError)}return this._effect.isReady()?(this._renderId=o.getRenderId(),this._wasPreviouslyReady=!0,i&&(i._materialDefines||(i._materialDefines=new n),this._defines.cloneTo(i._materialDefines)),!0):!1},t.prototype.bindOnlyWorldMatrix=function(e){this._effect.setMatrix("world",e)},t.prototype.bind=function(n,t){var o=this.getScene();if(this.bindOnlyWorldMatrix(n),this._effect.setMatrix("viewProjection",o.getTransformMatrix()),t&&t.useBones&&t.computeBonesUsingShaders&&this._effect.setMatrices("mBones",t.skeleton.getTransformMatrices()),o.getCachedMaterial()!==this){if(this.bumpTexture&&e.StandardMaterial.BumpTextureEnabled&&(this._effect.setTexture("normalSampler",this.bumpTexture),this._effect.setFloat2("vNormalInfos",this.bumpTexture.coordinatesIndex,this.bumpTexture.level),this._effect.setMatrix("normalMatrix",this.bumpTexture.getTextureMatrix())),o.clipPlane){var s=o.clipPlane;this._effect.setFloat4("vClipPlane",s.normal.x,s.normal.y,s.normal.z,s.d)}this.pointsCloud&&this._effect.setFloat("pointSize",this.pointSize),this._effect.setVector3("vEyePosition",o._mirroredCameraPosition?o._mirroredCameraPosition:o.activeCamera.position)}if(this._effect.setColor4("vDiffuseColor",this._scaledDiffuse,this.alpha*t.visibility),this._defines.SPECULARTERM&&this._effect.setColor4("vSpecularColor",this.specularColor,this.specularPower),o.lightsEnabled&&!this.disableLighting)for(var a=0,f=0;f<o.lights.length;f++){var d=o.lights[f];if(d.isEnabled()&&d.canAffectMesh(t)){if(d instanceof e.PointLight?d.transferToEffect(this._effect,"vLightData"+a):d instanceof e.DirectionalLight?d.transferToEffect(this._effect,"vLightData"+a):d instanceof e.SpotLight?d.transferToEffect(this._effect,"vLightData"+a,"vLightDirection"+a):d instanceof e.HemisphericLight&&d.transferToEffect(this._effect,"vLightData"+a,"vLightGround"+a),d.diffuse.scaleToRef(d.intensity,this._scaledDiffuse),this._effect.setColor4("vLightDiffuse"+a,this._scaledDiffuse,d.range),this._defines.SPECULARTERM&&(d.specular.scaleToRef(d.intensity,this._scaledSpecular),this._effect.setColor3("vLightSpecular"+a,this._scaledSpecular)),o.shadowsEnabled){var l=d.getShadowGenerator();t.receiveShadows&&l&&(this._effect.setMatrix("lightMatrix"+a,l.getTransformMatrix()),this._effect.setTexture("shadowSampler"+a,l.getShadowMapForRendering()),this._effect.setFloat3("shadowsInfo"+a,l.getDarkness(),l.getShadowMap().getSize().width,l.bias))}if(a++,a===r)break}}o.fogEnabled&&t.applyFog&&o.fogMode!==e.Scene.FOGMODE_NONE&&this._effect.setMatrix("view",o.getViewMatrix()),o.fogEnabled&&t.applyFog&&o.fogMode!==e.Scene.FOGMODE_NONE&&(this._effect.setFloat4("vFogInfos",o.fogMode,o.fogStart,o.fogEnd,o.fogDensity),this._effect.setColor3("vFogColor",o.fogColor)),e.StandardMaterial.ReflectionTextureEnabled&&(this._effect.setTexture("refractionSampler",this._refractionRTT),this._effect.setTexture("reflectionSampler",this._reflectionRTT));var h=this._mesh.getWorldMatrix().multiply(this._reflectionTransform).multiply(o.getProjectionMatrix());this._lastTime+=o.getEngine().getDeltaTime(),this._effect.setMatrix("worldReflectionViewProjection",h),this._effect.setVector2("windDirection",this.windDirection),this._effect.setFloat("waveLength",this.waveLength),this._effect.setFloat("time",this._lastTime/1e5),this._effect.setFloat("windForce",this.windForce),this._effect.setFloat("waveHeight",this.waveHeight),this._effect.setFloat("bumpHeight",this.bumpHeight),this._effect.setColor4("waterColor",this.waterColor,1),this._effect.setFloat("colorBlendFactor",this.colorBlendFactor),this._effect.setFloat("waveSpeed",this.waveSpeed),i.prototype.bind.call(this,n,t)},t.prototype._createRenderTargets=function(r,n){var i=this;this._refractionRTT=new e.RenderTargetTexture(name+"_refraction",{width:n.x,height:n.y},r,!1,!0),this._reflectionRTT=new e.RenderTargetTexture(name+"_reflection",{width:n.x,height:n.y},r,!1,!0),r.customRenderTargets.push(this._refractionRTT),r.customRenderTargets.push(this._reflectionRTT);var t,o,s=null,a=e.Matrix.Zero();this._refractionRTT.onBeforeRender=function(){i._mesh&&(t=i._mesh.isVisible,i._mesh.isVisible=!1),s=r.clipPlane;var n=i._mesh?i._mesh.position.y:0;r.clipPlane=e.Plane.FromPositionAndNormal(new e.Vector3(0,n+.05,0),new e.Vector3(0,1,0))},this._refractionRTT.onAfterRender=function(){i._mesh&&(i._mesh.isVisible=t),r.clipPlane=s},this._reflectionRTT.onBeforeRender=function(){i._mesh&&(t=i._mesh.isVisible,i._mesh.isVisible=!1),s=r.clipPlane;var n=i._mesh?i._mesh.position.y:0;r.clipPlane=e.Plane.FromPositionAndNormal(new e.Vector3(0,n-.05,0),new e.Vector3(0,-1,0)),e.Matrix.ReflectionToRef(r.clipPlane,a),o=r.getViewMatrix(),a.multiplyToRef(o,i._reflectionTransform),r.setTransformMatrix(i._reflectionTransform,r.getProjectionMatrix()),r.getEngine().cullBackFaces=!1,r._mirroredCameraPosition=e.Vector3.TransformCoordinates(r.activeCamera.position,a)},this._reflectionRTT.onAfterRender=function(){i._mesh&&(i._mesh.isVisible=t),r.clipPlane=s,r.setTransformMatrix(o,r.getProjectionMatrix()),r.getEngine().cullBackFaces=!0,r._mirroredCameraPosition=null}},t.prototype.getAnimatables=function(){var e=[];return this.bumpTexture&&this.bumpTexture.animations&&this.bumpTexture.animations.length>0&&e.push(this.bumpTexture),this._reflectionRTT&&this._reflectionRTT.animations&&this._reflectionRTT.animations.length>0&&e.push(this._reflectionRTT),this._refractionRTT&&this._refractionRTT.animations&&this._refractionRTT.animations.length>0&&e.push(this._refractionRTT),e},t.prototype.dispose=function(e){this.bumpTexture&&this.bumpTexture.dispose(),this._reflectionRTT&&this._reflectionRTT.dispose(),this._refractionRTT&&this._refractionRTT.dispose(),i.prototype.dispose.call(this,e)},t.prototype.clone=function(e){var r=new t(e,this.getScene());return this.copyTo(r),this.bumpTexture&&this.bumpTexture.clone&&(r.bumpTexture=this.bumpTexture.clone()),r.diffuseColor=this.diffuseColor.clone(),r},t.prototype.serialize=function(){var e=i.prototype.serialize.call(this);return e.customType="BABYLON.WaterMaterial",e.diffuseColor=this.diffuseColor.asArray(),e.specularColor=this.specularColor.asArray(),e.specularPower=this.specularPower,e.disableLighting=this.disableLighting,e.windForce=this.windForce,e.windDirection=this.windDirection.asArray(),e.waveHeight=this.waveHeight,e.bumpHeight=this.bumpHeight,e.waterColor=this.waterColor.asArray(),e.colorBlendFactor=this.colorBlendFactor,e.waveLength=this.waveLength,e.renderTargetSize=this.renderTargetSize.asArray(),this.bumpTexture&&(e.bumpTexture=this.bumpTexture.serialize()),e},t.Parse=function(r,n,i){var o=r.renderTargetSize?e.Vector2.FromArray(r.renderTargetSize):null,s=new t(r.name,n,o);return s.diffuseColor=e.Color3.FromArray(r.diffuseColor),s.specularColor=e.Color3.FromArray(r.specularColor),s.specularPower=r.specularPower,s.disableLighting=r.disableLighting,s.windForce=r.windForce,s.windDirection=e.Vector2.FromArray(r.windDirection),s.waveHeight=r.waveHeight,s.bumpHeight=r.bumpHeight,s.waterColor=e.Color3.FromArray(r.waterColor),s.colorBlendFactor=r.colorBlendFactor,s.waveLength=r.waveLength,s.renderTargetSize=e.Vector2.FromArray(r.renderTargetSize),s.alpha=r.alpha,s.id=r.id,e.Tags.AddTagsTo(s,r.tags),s.backFaceCulling=r.backFaceCulling,s.wireframe=r.wireframe,r.bumpTexture&&(s.bumpTexture=e.Texture.Parse(r.bumpTexture,n,i)),r.checkReadyOnlyOnce&&(s.checkReadyOnlyOnce=r.checkReadyOnlyOnce),s},t.CreateDefaultMesh=function(r,n){var i=e.Mesh.CreateGround(r,512,512,32,n,!1);return i},t}(e.Material);e.WaterMaterial=i}(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.waterVertexShader="precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef UV1\r\nattribute vec2 uv;\r\n#endif\r\n#ifdef UV2\r\nattribute vec2 uv2;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniforms\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef BUMP\r\nvarying vec2 vNormalUV;\r\nuniform mat4 normalMatrix;\r\nuniform vec2 vNormalInfos;\r\n#endif\r\n\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\n// Water uniforms\r\nuniform mat4 worldReflectionViewProjection;\r\nuniform vec2 windDirection;\r\nuniform float waveLength;\r\nuniform float time;\r\nuniform float windForce;\r\nuniform float waveHeight;\r\nuniform float waveSpeed;\r\n\r\n// Water varyings\r\nvarying vec3 vPosition;\r\nvarying vec3 vRefractionMapTexCoord;\r\nvarying vec3 vReflectionMapTexCoord;\r\n\r\nvoid main(void) {\r\n	mat4 finalWorld;\r\n\r\n#ifdef INSTANCES\r\n	finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n	finalWorld = world;\r\n#endif\r\n\r\n#ifdef BONES\r\n	mat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n	mat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n	mat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\r\n#ifdef BONES4\r\n	mat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n	finalWorld = finalWorld * (m0 + m1 + m2 + m3);\r\n#else\r\n	finalWorld = finalWorld * (m0 + m1 + m2);\r\n#endif \r\n\r\n#endif\r\n\r\n	vec4 worldPos = finalWorld * vec4(position, 1.0);\r\n	vPositionW = vec3(worldPos);\r\n\r\n#ifdef NORMAL\r\n	vNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\r\n#endif\r\n\r\n	// Texture coordinates\r\n#ifndef UV1\r\n	vec2 uv = vec2(0., 0.);\r\n#endif\r\n#ifndef UV2\r\n	vec2 uv2 = vec2(0., 0.);\r\n#endif\r\n\r\n#ifdef BUMP\r\n	if (vNormalInfos.x == 0.)\r\n	{\r\n		vNormalUV = vec2(normalMatrix * vec4((uv * 1.0) / waveLength + time * windForce * windDirection, 1.0, 0.0));\r\n	}\r\n	else\r\n	{\r\n		vNormalUV = vec2(normalMatrix * vec4((uv2 * 1.0) / waveLength + time * windForce * windDirection, 1.0, 0.0));\r\n	}\r\n#endif\r\n\r\n	// Clip plane\r\n#ifdef CLIPPLANE\r\n	fClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n	// Fog\r\n#ifdef FOG\r\n	fFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n	// Shadows\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\n	vPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\n	vPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\n	vPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\n	vPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n	// Vertex color\r\n#ifdef VERTEXCOLOR\r\n	vColor = color;\r\n#endif\r\n\r\n	// Point size\r\n#ifdef POINTSIZE\r\n	gl_PointSize = pointSize;\r\n#endif\r\n\r\n	vec3 p = position;\r\n	float newY = (sin(((p.x / 0.05) + time * waveSpeed)) * waveHeight * windDirection.x * 5.0)\r\n			   + (cos(((p.z / 0.05) +  time * waveSpeed)) * waveHeight * windDirection.y * 5.0);\r\n	p.y += abs(newY);\r\n	\r\n	gl_Position = viewProjection * finalWorld * vec4(p, 1.0);\r\n\r\n#ifdef REFLECTION\r\n	worldPos = viewProjection * finalWorld * vec4(p, 1.0);\r\n	\r\n	// Water\r\n	vPosition = position;\r\n	\r\n	vRefractionMapTexCoord.x = 0.5 * (worldPos.w + worldPos.x);\r\n	vRefractionMapTexCoord.y = 0.5 * (worldPos.w + worldPos.y);\r\n	vRefractionMapTexCoord.z = worldPos.w;\r\n	\r\n	worldPos = worldReflectionViewProjection * vec4(position, 1.0);\r\n	vReflectionMapTexCoord.x = 0.5 * (worldPos.w + worldPos.x);\r\n	vReflectionMapTexCoord.y = 0.5 * (worldPos.w + worldPos.y);\r\n	vReflectionMapTexCoord.z = worldPos.w;\r\n#endif\r\n}\r\n",BABYLON.Effect.ShadersStore.waterPixelShader="precision highp float;\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec4 vDiffuseColor;\r\n\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vNormalW;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#else\r\nuniform samplerCube shadowSampler0;\r\n#endif\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#else\r\nuniform samplerCube shadowSampler1;\r\n#endif\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#else\r\nuniform samplerCube shadowSampler2;\r\n#endif\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#else\r\nuniform samplerCube shadowSampler3;\r\n#endif\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef BUMP\r\nvarying vec2 vNormalUV;\r\nuniform sampler2D normalSampler;\r\nuniform vec2 vNormalInfos;\r\n#endif\r\n\r\nuniform sampler2D refractionSampler;\r\nuniform sampler2D reflectionSampler;\r\n\r\n// Water uniforms\r\nconst float LOG2 = 1.442695;\r\n\r\nuniform vec3 cameraPosition;\r\n\r\nuniform vec4 waterColor;\r\nuniform float colorBlendFactor;\r\n\r\nuniform float bumpHeight;\r\n\r\n// Water varyings\r\nvarying vec3 vRefractionMapTexCoord;\r\nvarying vec3 vReflectionMapTexCoord;\r\nvarying vec3 vPosition;\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n	const vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n	return dot(color, bit_shift);\r\n}\r\n\r\n#if defined(POINTLIGHT0) || defined(POINTLIGHT1) || defined(POINTLIGHT2) || defined(POINTLIGHT3)\r\nfloat computeShadowCube(vec3 lightPosition, samplerCube shadowSampler, float darkness, float bias)\r\n{\r\n	vec3 directionToLight = vPositionW - lightPosition;\r\n	float depth = length(directionToLight);\r\n	depth = clamp(depth, 0., 1.0);\r\n\r\n	directionToLight = normalize(directionToLight);\r\n	directionToLight.y = - directionToLight.y;\r\n\r\n	float shadow = unpack(textureCube(shadowSampler, directionToLight)) + bias;\r\n\r\n	if (depth > shadow)\r\n	{\r\n		return darkness;\r\n	}\r\n	return 1.0;\r\n}\r\n\r\nfloat computeShadowWithPCFCube(vec3 lightPosition, samplerCube shadowSampler, float bias, float darkness, float mapSize)\r\n{\r\n	vec3 directionToLight = vPositionW - lightPosition;\r\n	float depth = length(directionToLight);\r\n\r\n	depth = clamp(depth, 0., 1.0);\r\n	float diskScale = 2.0 / mapSize;\r\n\r\n	directionToLight = normalize(directionToLight);\r\n	directionToLight.y = -directionToLight.y;\r\n\r\n	float visibility = 1.;\r\n\r\n	vec3 poissonDisk[4];\r\n	poissonDisk[0] = vec3(-0.094201624, 0.04, -0.039906216);\r\n	poissonDisk[1] = vec3(0.094558609, -0.04, -0.076890725);\r\n	poissonDisk[2] = vec3(-0.094184101, 0.01, -0.092938870);\r\n	poissonDisk[3] = vec3(0.034495938, -0.01, 0.029387760);\r\n\r\n	// Poisson Sampling\r\n	float biasedDepth = depth - bias;\r\n\r\n	if (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[0])) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[1])) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[2])) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[3])) < biasedDepth) visibility -= 0.25;\r\n\r\n	return  min(1.0, visibility + darkness);\r\n}\r\n#endif\r\n\r\n#if defined(SPOTLIGHT0) || defined(SPOTLIGHT1) || defined(SPOTLIGHT2) || defined(SPOTLIGHT3) ||  defined(DIRLIGHT0) || defined(DIRLIGHT1) || defined(DIRLIGHT2) || defined(DIRLIGHT3)\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n	vec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n	depth = 0.5 * depth + vec3(0.5);\r\n	vec2 uv = depth.xy;\r\n\r\n	if (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n	{\r\n		return 1.0;\r\n	}\r\n\r\n	float shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n	if (depth.z > shadow)\r\n	{\r\n		return darkness;\r\n	}\r\n	return 1.;\r\n}\r\n\r\nfloat computeShadowWithPCF(vec4 vPositionFromLight, sampler2D shadowSampler, float mapSize, float bias, float darkness)\r\n{\r\n	vec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n	depth = 0.5 * depth + vec3(0.5);\r\n	vec2 uv = depth.xy;\r\n\r\n	if (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n	{\r\n		return 1.0;\r\n	}\r\n\r\n	float visibility = 1.;\r\n\r\n	vec2 poissonDisk[4];\r\n	poissonDisk[0] = vec2(-0.94201624, -0.39906216);\r\n	poissonDisk[1] = vec2(0.94558609, -0.76890725);\r\n	poissonDisk[2] = vec2(-0.094184101, -0.92938870);\r\n	poissonDisk[3] = vec2(0.34495938, 0.29387760);\r\n\r\n	// Poisson Sampling\r\n	float biasedDepth = depth.z - bias;\r\n\r\n	if (unpack(texture2D(shadowSampler, uv + poissonDisk[0] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(texture2D(shadowSampler, uv + poissonDisk[1] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(texture2D(shadowSampler, uv + poissonDisk[2] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(texture2D(shadowSampler, uv + poissonDisk[3] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\r\n	return  min(1.0, visibility + darkness);\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat unpackHalf(vec2 color)\r\n{\r\n	return color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n	return clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n	float p = smoothstep(compare - bias, compare, moments.x);\r\n	float variance = max(moments.y - moments.x * moments.x, 0.02);\r\n	float d = compare - moments.x;\r\n	float p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n	return clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias, float darkness)\r\n{\r\n	vec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n	depth = 0.5 * depth + vec3(0.5);\r\n	vec2 uv = depth.xy;\r\n\r\n	if (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n	{\r\n		return 1.0;\r\n	}\r\n\r\n	vec4 texel = texture2D(shadowSampler, uv);\r\n\r\n	vec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n	return min(1.0, 1.0 - ChebychevInequality(moments, depth.z, bias) + darkness);\r\n}\r\n#endif\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n	float fogCoeff = 1.0;\r\n	float fogStart = vFogInfos.y;\r\n	float fogEnd = vFogInfos.z;\r\n	float fogDensity = vFogInfos.w;\r\n\r\n	if (FOGMODE_LINEAR == vFogInfos.x)\r\n	{\r\n		fogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n	}\r\n	else if (FOGMODE_EXP == vFogInfos.x)\r\n	{\r\n		fogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n	}\r\n	else if (FOGMODE_EXP2 == vFogInfos.x)\r\n	{\r\n		fogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n	}\r\n\r\n	return clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nstruct lightingInfo\r\n{\r\n	vec3 diffuse;\r\n#ifdef SPECULARTERM\r\n	vec3 specular;\r\n#endif\r\n};\r\n\r\nlightingInfo computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, float range, float glossiness, vec3 bumpColor) {\r\n	lightingInfo result;\r\n\r\n	vec3 lightVectorW;\r\n	float attenuation = 1.0;\r\n	if (lightData.w == 0.)\r\n	{\r\n		vec3 direction = lightData.xyz - vPositionW;\r\n\r\n		attenuation = max(0., 1.0 - length(direction) / range);\r\n		lightVectorW = normalize(direction);\r\n	}\r\n	else\r\n	{\r\n		lightVectorW = normalize(-lightData.xyz);\r\n	}\r\n\r\n	// diffuse\r\n	float ndl = max(0., dot(vNormal, lightVectorW));\r\n	result.diffuse = ndl * diffuseColor * attenuation;\r\n\r\n	// Specular\r\n#ifdef SPECULARTERM\r\n	vec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n	vec3 perturbation = bumpHeight * (bumpColor.rgb - 0.5);\r\n	vec3 halfvec = normalize(angleW + lightVectorW + vec3(perturbation.x, perturbation.y, perturbation.z));\r\n	\r\n	float temp = max(0., dot(vNormal, halfvec));\r\n	temp = pow(temp, max(1., glossiness));\r\n	\r\n	result.specular = temp * specularColor * attenuation;\r\n#endif\r\n\r\n	return result;\r\n}\r\n\r\nlightingInfo computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec3 specularColor, vec3 diffuseColor, float range, float glossiness, vec3 bumpColor) {\r\n	lightingInfo result;\r\n\r\n	vec3 direction = lightData.xyz - vPositionW;\r\n	vec3 lightVectorW = normalize(direction);\r\n	float attenuation = max(0., 1.0 - length(direction) / range);\r\n\r\n	// diffuse\r\n	float cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n	float spotAtten = 0.0;\r\n\r\n	if (cosAngle >= lightDirection.w)\r\n	{\r\n		cosAngle = max(0., pow(cosAngle, lightData.w));\r\n		spotAtten = clamp((cosAngle - lightDirection.w) / (1. - cosAngle), 0.0, 1.0);\r\n\r\n		// Diffuse\r\n		float ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n		result.diffuse = ndl * spotAtten * diffuseColor * attenuation;\r\n\r\n		// Specular\r\n#ifdef SPECULARTERM		\r\n		vec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n		vec3 perturbation = bumpHeight * (bumpColor.rgb - 0.5);\r\n		vec3 halfvec = normalize(angleW + vec3(perturbation.x, perturbation.y, perturbation.z));\r\n		\r\n		float temp = max(0., dot(vNormal, halfvec));\r\n		temp = pow(temp, max(1., glossiness));\r\n		\r\n		result.specular = specularColor * temp * spotAtten * attenuation;\r\n#endif\r\n		return result;\r\n	}\r\n\r\n	result.diffuse = vec3(0.);\r\n#ifdef SPECULARTERM\r\n	result.specular = vec3(0.);\r\n#endif\r\n\r\n	return result;\r\n}\r\n\r\nlightingInfo computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, vec3 groundColor, float glossiness, vec3 bumpColor) {\r\n	lightingInfo result;\r\n\r\n	// Diffuse\r\n	float ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n	result.diffuse = mix(groundColor, diffuseColor, ndl);\r\n	\r\n	// Specular\r\n#ifdef SPECULARTERM\r\n	vec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n	vec3 perturbation = bumpHeight * (bumpColor.rgb - 0.5);\r\n	vec3 halfvec = normalize(angleW + vec3(perturbation.x, perturbation.y, perturbation.z));\r\n	\r\n	float temp = max(0.0, dot(vNormal, halfvec));\r\n	temp = pow(temp, max(1.0, glossiness));\r\n	\r\n	result.specular = temp * specularColor;\r\n#endif\r\n\r\n	return result;\r\n}\r\n\r\nvoid main(void) {\r\n	// Clip plane\r\n#ifdef CLIPPLANE\r\n	if (fClipDistance > 0.0)\r\n		discard;\r\n#endif\r\n\r\n	vec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n	// Base color\r\n	vec4 baseColor = vec4(1., 1., 1., 1.);\r\n	vec3 diffuseColor = vDiffuseColor.rgb;\r\n	\r\n#ifdef SPECULARTERM\r\n	float glossiness = vSpecularColor.a;\r\n	vec3 specularColor = vSpecularColor.rgb;\r\n#else\r\n	float glossiness = 0.;\r\n#endif\r\n\r\n	// Alpha\r\n	float alpha = vDiffuseColor.a;\r\n\r\n#ifdef BUMP\r\n	baseColor = texture2D(normalSampler, vNormalUV);\r\n	vec3 bumpColor = baseColor.rgb;\r\n\r\n#ifdef ALPHATEST\r\n	if (baseColor.a < 0.4)\r\n		discard;\r\n#endif\r\n\r\n	baseColor.rgb *= vNormalInfos.y;\r\n#else\r\n	vec3 bumpColor = vec3(1.0);\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n	baseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n	// Bump\r\n#ifdef NORMAL\r\n	vec3 normalW = normalize(vNormalW);\r\n	vec2 perturbation = bumpHeight * (baseColor.rg - 0.5);\r\n#else\r\n	vec3 normalW = vec3(1.0, 1.0, 1.0);\r\n	vec2 perturbation = bumpHeight * (vec2(1.0, 1.0) - 0.5);\r\n#endif\r\n\r\n#ifdef REFLECTION\r\n	// Water\r\n	vec3 eyeVector = normalize(vEyePosition - vPosition);\r\n	\r\n	vec2 projectedRefractionTexCoords = clamp(vRefractionMapTexCoord.xy / vRefractionMapTexCoord.z + perturbation, 0.0, 1.0);\r\n	vec4 refractiveColor = texture2D(refractionSampler, projectedRefractionTexCoords);\r\n	\r\n	vec2 projectedReflectionTexCoords = clamp(vReflectionMapTexCoord.xy / vReflectionMapTexCoord.z + perturbation, 0.0, 1.0);\r\n	vec4 reflectiveColor = texture2D(reflectionSampler, projectedReflectionTexCoords);\r\n	\r\n	vec3 upVector = vec3(0.0, 1.0, 0.0);\r\n	\r\n	float fresnelTerm = max(dot(eyeVector, upVector), 0.0);\r\n	\r\n	vec4 combinedColor = refractiveColor * fresnelTerm + reflectiveColor * (1.0 - fresnelTerm);\r\n	\r\n	baseColor = colorBlendFactor * waterColor + (1.0 - colorBlendFactor) * combinedColor;\r\n#endif\r\n\r\n	// Lighting\r\n	vec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n	vec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n	float shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n	vec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n	lightingInfo info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness, bumpColor);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n	lightingInfo info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightGround0, glossiness, bumpColor);\r\n#endif\r\n#if defined(POINTLIGHT0) || defined(DIRLIGHT0)\r\n	lightingInfo info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness, bumpColor);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n	shadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n#ifdef SHADOWPCF0\r\n	#if defined(POINTLIGHT0)\r\n	shadow = computeShadowWithPCFCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.z, shadowsInfo0.x, shadowsInfo0.y);\r\n	#else\r\n	shadow = computeShadowWithPCF(vPositionFromLight0, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z, shadowsInfo0.x);\r\n	#endif\r\n#else\r\n	#if defined(POINTLIGHT0)\r\n	shadow = computeShadowCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n	#else\r\n	shadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n	#endif\r\n#endif\r\n#endif\r\n#else\r\n	shadow = 1.;\r\n#endif\r\n	diffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n	specularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n	vec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n	info = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness, bumpColor);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n	info = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightGround1.a, glossiness, bumpColor);\r\n#endif\r\n#if defined(POINTLIGHT1) || defined(DIRLIGHT1)\r\n	info = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness, bumpColor);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n	shadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n#ifdef SHADOWPCF1\r\n#if defined(POINTLIGHT1)\r\n	shadow = computeShadowWithPCFCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.z, shadowsInfo1.x, shadowsInfo1.y);\r\n#else\r\n	shadow = computeShadowWithPCF(vPositionFromLight1, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z, shadowsInfo1.x);\r\n#endif\r\n#else\r\n	#if defined(POINTLIGHT1)\r\n	shadow = computeShadowCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n	#else\r\n	shadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n	#endif\r\n#endif\r\n#endif\r\n#else\r\n	shadow = 1.;\r\n#endif\r\n	diffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n	specularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n	vec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n	info = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness, bumpColor);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n	info = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightGround2, glossiness, bumpColor);\r\n#endif\r\n#if defined(POINTLIGHT2) || defined(DIRLIGHT2)\r\n	info = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness, bumpColor);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n	shadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n#ifdef SHADOWPCF2\r\n#if defined(POINTLIGHT2)\r\n	shadow = computeShadowWithPCFCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.z, shadowsInfo2.x, shadowsInfo2.y);\r\n#else\r\n	shadow = computeShadowWithPCF(vPositionFromLight2, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z, shadowsInfo2.x);\r\n#endif\r\n#else\r\n	#if defined(POINTLIGHT2)\r\n	shadow = computeShadowCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n	#else\r\n	shadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n	#endif\r\n#endif	\r\n#endif	\r\n#else\r\n	shadow = 1.;\r\n#endif\r\n	diffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n	specularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n	vec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n	info = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness, bumpColor);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n	info = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightGround3, glossiness, bumpColor);\r\n#endif\r\n#if defined(POINTLIGHT3) || defined(DIRLIGHT3)\r\n	info = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness, bumpColor);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n		shadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n#ifdef SHADOWPCF3\r\n#if defined(POINTLIGHT3)\r\n	shadow = computeShadowWithPCFCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.z, shadowsInfo3.x, shadowsInfo3.y);\r\n#else\r\n	shadow = computeShadowWithPCF(vPositionFromLight3, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z, shadowsInfo3.x);\r\n#endif\r\n#else\r\n	#if defined(POINTLIGHT3)\r\n	shadow = computeShadowCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n	#else\r\n	shadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n	#endif\r\n#endif	\r\n#endif	\r\n#else\r\n	shadow = 1.;\r\n#endif\r\n	diffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n	specularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n	alpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef SPECULARTERM\r\n	vec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n	vec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n	vec3 finalDiffuse = clamp(diffuseBase * diffuseColor, 0.0, 1.0) * baseColor.rgb;\r\n\r\n	// Composition\r\n	vec4 color = vec4(finalDiffuse + finalSpecular, alpha);\r\n\r\n#ifdef FOG\r\n	float fog = CalcFogFactor();\r\n	color.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n	\r\n	gl_FragColor = color;\r\n}";