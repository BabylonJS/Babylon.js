var BABYLON;!function(e){var n=4,r=function(e){function n(){e.call(this),this.DIFFUSEX=!1,this.DIFFUSEY=!1,this.DIFFUSEZ=!1,this.BUMPX=!1,this.BUMPY=!1,this.BUMPZ=!1,this.CLIPPLANE=!1,this.ALPHATEST=!1,this.POINTSIZE=!1,this.FOG=!1,this.LIGHT0=!1,this.LIGHT1=!1,this.LIGHT2=!1,this.LIGHT3=!1,this.SPOTLIGHT0=!1,this.SPOTLIGHT1=!1,this.SPOTLIGHT2=!1,this.SPOTLIGHT3=!1,this.HEMILIGHT0=!1,this.HEMILIGHT1=!1,this.HEMILIGHT2=!1,this.HEMILIGHT3=!1,this.DIRLIGHT0=!1,this.DIRLIGHT1=!1,this.DIRLIGHT2=!1,this.DIRLIGHT3=!1,this.POINTLIGHT0=!1,this.POINTLIGHT1=!1,this.POINTLIGHT2=!1,this.POINTLIGHT3=!1,this.SHADOW0=!1,this.SHADOW1=!1,this.SHADOW2=!1,this.SHADOW3=!1,this.SHADOWS=!1,this.SHADOWVSM0=!1,this.SHADOWVSM1=!1,this.SHADOWVSM2=!1,this.SHADOWVSM3=!1,this.SHADOWPCF0=!1,this.SHADOWPCF1=!1,this.SHADOWPCF2=!1,this.SHADOWPCF3=!1,this.SPECULARTERM=!1,this.NORMAL=!1,this.VERTEXCOLOR=!1,this.VERTEXALPHA=!1,this.BONES=!1,this.BONES4=!1,this.BonesPerMesh=0,this.INSTANCES=!1,this._keys=Object.keys(this)}return __extends(n,e),n}(e.MaterialDefines),i=function(i){function t(n,t){i.call(this,n,t),this.tileSize=1,this.diffuseColor=new e.Color3(1,1,1),this.specularColor=new e.Color3(.2,.2,.2),this.specularPower=64,this.disableLighting=!1,this._worldViewProjectionMatrix=e.Matrix.Zero(),this._scaledDiffuse=new e.Color3,this._scaledSpecular=new e.Color3,this._defines=new r,this._cachedDefines=new r,this._cachedDefines.BonesPerMesh=-1}return __extends(t,i),t.prototype.needAlphaBlending=function(){return this.alpha<1},t.prototype.needAlphaTesting=function(){return!1},t.prototype.getAlphaTestTexture=function(){return null},t.prototype._checkCache=function(e,n,r){return n?this._defines.INSTANCES!==r?!1:n._materialDefines&&n._materialDefines.isEqual(this._defines)?!0:!1:!0},t.prototype.isReady=function(i,t){if(this.checkReadyOnlyOnce&&this._wasPreviouslyReady)return!0;var o=this.getScene();if(!this.checkReadyOnEveryCall&&this._renderId===o.getRenderId()&&this._checkCache(o,i,t))return!0;var s=o.getEngine(),a=!1;if(this._defines.reset(),o.texturesEnabled){if(e.StandardMaterial.DiffuseTextureEnabled)for(var f=[this.diffuseTextureX,this.diffuseTextureY,this.diffuseTextureZ],d=["DIFFUSEX","DIFFUSEY","DIFFUSEZ"],l=0;l<f.length;l++)if(f[l]){if(!f[l].isReady())return!1;this._defines[d[l]]=!0}if(e.StandardMaterial.BumpTextureEnabled)for(var f=[this.normalTextureX,this.normalTextureY,this.normalTextureZ],d=["BUMPX","BUMPY","BUMPZ"],l=0;l<f.length;l++)if(f[l]){if(!f[l].isReady())return!1;this._defines[d[l]]=!0}}o.clipPlane&&(this._defines.CLIPPLANE=!0),s.getAlphaTesting()&&(this._defines.ALPHATEST=!0),(this.pointsCloud||o.forcePointsCloud)&&(this._defines.POINTSIZE=!0),o.fogEnabled&&i&&i.applyFog&&o.fogMode!==e.Scene.FOGMODE_NONE&&this.fogEnabled&&(this._defines.FOG=!0);var h=0;if(o.lightsEnabled&&!this.disableLighting)for(var c=0;c<o.lights.length;c++){var u=o.lights[c];if(u.isEnabled()){if(u._excludedMeshesIds.length>0){for(var v=0;v<u._excludedMeshesIds.length;v++){var g=o.getMeshByID(u._excludedMeshesIds[v]);g&&u.excludedMeshes.push(g)}u._excludedMeshesIds=[]}if(u._includedOnlyMeshesIds.length>0){for(var m=0;m<u._includedOnlyMeshesIds.length;m++){var p=o.getMeshByID(u._includedOnlyMeshesIds[m]);p&&u.includedOnlyMeshes.push(p)}u._includedOnlyMeshesIds=[]}if(u.canAffectMesh(i)){a=!0,this._defines["LIGHT"+h]=!0;var S;if(S=u instanceof e.SpotLight?"SPOTLIGHT"+h:u instanceof e.HemisphericLight?"HEMILIGHT"+h:u instanceof e.PointLight?"POINTLIGHT"+h:"DIRLIGHT"+h,this._defines[S]=!0,u.specular.equalsFloats(0,0,0)||(this._defines.SPECULARTERM=!0),o.shadowsEnabled){var L=u.getShadowGenerator();i&&i.receiveShadows&&L&&(this._defines["SHADOW"+h]=!0,this._defines.SHADOWS=!0,(L.useVarianceShadowMap||L.useBlurVarianceShadowMap)&&(this._defines["SHADOWVSM"+h]=!0),L.usePoissonSampling&&(this._defines["SHADOWPCF"+h]=!0))}if(h++,h===n)break}}}if(i&&(a&&i.isVerticesDataPresent(e.VertexBuffer.NormalKind)&&(this._defines.NORMAL=!0),i.useVertexColors&&i.isVerticesDataPresent(e.VertexBuffer.ColorKind)&&(this._defines.VERTEXCOLOR=!0,i.hasVertexAlpha&&(this._defines.VERTEXALPHA=!0)),i.useBones&&i.computeBonesUsingShaders&&(this._defines.BONES=!0,this._defines.BonesPerMesh=i.skeleton.bones.length+1,this._defines.BONES4=!0),t&&(this._defines.INSTANCES=!0)),!this._defines.isEqual(this._cachedDefines)){this._defines.cloneTo(this._cachedDefines),o.resetCachedMaterial();var T=new e.EffectFallbacks;for(this._defines.FOG&&T.addFallback(1,"FOG"),h=0;n>h;h++)this._defines["LIGHT"+h]&&(h>0&&T.addFallback(h,"LIGHT"+h),this._defines["SHADOW"+h]&&T.addFallback(0,"SHADOW"+h),this._defines["SHADOWPCF"+h]&&T.addFallback(0,"SHADOWPCF"+h),this._defines["SHADOWVSM"+h]&&T.addFallback(0,"SHADOWVSM"+h));this._defines.BONES4&&T.addFallback(0,"BONES4");var D=[e.VertexBuffer.PositionKind];this._defines.NORMAL&&D.push(e.VertexBuffer.NormalKind),this._defines.VERTEXCOLOR&&D.push(e.VertexBuffer.ColorKind),this._defines.BONES&&(D.push(e.VertexBuffer.MatricesIndicesKind),D.push(e.VertexBuffer.MatricesWeightsKind)),this._defines.INSTANCES&&(D.push("world0"),D.push("world1"),D.push("world2"),D.push("world3"));var I="triplanar",w=this._defines.toString();this._effect=o.getEngine().createEffect(I,D,["world","view","viewProjection","vEyePosition","vLightsType","vDiffuseColor","vSpecularColor","vLightData0","vLightDiffuse0","vLightSpecular0","vLightDirection0","vLightGround0","lightMatrix0","vLightData1","vLightDiffuse1","vLightSpecular1","vLightDirection1","vLightGround1","lightMatrix1","vLightData2","vLightDiffuse2","vLightSpecular2","vLightDirection2","vLightGround2","lightMatrix2","vLightData3","vLightDiffuse3","vLightSpecular3","vLightDirection3","vLightGround3","lightMatrix3","vFogInfos","vFogColor","pointSize","mBones","vClipPlane","shadowsInfo0","shadowsInfo1","shadowsInfo2","shadowsInfo3","tileSize"],["diffuseSamplerX","diffuseSamplerY","diffuseSamplerZ","normalSamplerX","normalSamplerY","normalSamplerZ","shadowSampler0","shadowSampler1","shadowSampler2","shadowSampler3"],w,T,this.onCompiled,this.onError)}return this._effect.isReady()?(this._renderId=o.getRenderId(),this._wasPreviouslyReady=!0,i&&(i._materialDefines||(i._materialDefines=new r),this._defines.cloneTo(i._materialDefines)),!0):!1},t.prototype.bindOnlyWorldMatrix=function(e){this._effect.setMatrix("world",e)},t.prototype.bind=function(r,t){var o=this.getScene();if(this.bindOnlyWorldMatrix(r),this._effect.setMatrix("viewProjection",o.getTransformMatrix()),t&&t.useBones&&t.computeBonesUsingShaders&&this._effect.setMatrices("mBones",t.skeleton.getTransformMatrices(t)),this._effect.setFloat("tileSize",this.tileSize),o.getCachedMaterial()!==this){if(this.diffuseTextureX&&this._effect.setTexture("diffuseSamplerX",this.diffuseTextureX),this.diffuseTextureY&&this._effect.setTexture("diffuseSamplerY",this.diffuseTextureY),this.diffuseTextureZ&&this._effect.setTexture("diffuseSamplerZ",this.diffuseTextureZ),this.normalTextureX&&this._effect.setTexture("normalSamplerX",this.normalTextureX),this.normalTextureY&&this._effect.setTexture("normalSamplerY",this.normalTextureY),this.normalTextureZ&&this._effect.setTexture("normalSamplerZ",this.normalTextureZ),o.clipPlane){var s=o.clipPlane;this._effect.setFloat4("vClipPlane",s.normal.x,s.normal.y,s.normal.z,s.d)}this.pointsCloud&&this._effect.setFloat("pointSize",this.pointSize),this._effect.setVector3("vEyePosition",o._mirroredCameraPosition?o._mirroredCameraPosition:o.activeCamera.position)}if(this._effect.setColor4("vDiffuseColor",this._scaledDiffuse,this.alpha*t.visibility),this._defines.SPECULARTERM&&this._effect.setColor4("vSpecularColor",this.specularColor,this.specularPower),o.lightsEnabled&&!this.disableLighting)for(var a=0,f=0;f<o.lights.length;f++){var d=o.lights[f];if(d.isEnabled()&&d.canAffectMesh(t)){if(d instanceof e.PointLight?d.transferToEffect(this._effect,"vLightData"+a):d instanceof e.DirectionalLight?d.transferToEffect(this._effect,"vLightData"+a):d instanceof e.SpotLight?d.transferToEffect(this._effect,"vLightData"+a,"vLightDirection"+a):d instanceof e.HemisphericLight&&d.transferToEffect(this._effect,"vLightData"+a,"vLightGround"+a),d.diffuse.scaleToRef(d.intensity,this._scaledDiffuse),this._effect.setColor4("vLightDiffuse"+a,this._scaledDiffuse,d.range),this._defines.SPECULARTERM&&(d.specular.scaleToRef(d.intensity,this._scaledSpecular),this._effect.setColor3("vLightSpecular"+a,this._scaledSpecular)),o.shadowsEnabled){var l=d.getShadowGenerator();t.receiveShadows&&l&&(this._effect.setMatrix("lightMatrix"+a,l.getTransformMatrix()),this._effect.setTexture("shadowSampler"+a,l.getShadowMapForRendering()),this._effect.setFloat3("shadowsInfo"+a,l.getDarkness(),l.getShadowMap().getSize().width,l.bias))}if(a++,a===n)break}}o.fogEnabled&&t.applyFog&&o.fogMode!==e.Scene.FOGMODE_NONE&&this._effect.setMatrix("view",o.getViewMatrix()),o.fogEnabled&&t.applyFog&&o.fogMode!==e.Scene.FOGMODE_NONE&&(this._effect.setFloat4("vFogInfos",o.fogMode,o.fogStart,o.fogEnd,o.fogDensity),this._effect.setColor3("vFogColor",o.fogColor)),i.prototype.bind.call(this,r,t)},t.prototype.getAnimatables=function(){var e=[];return this.mixTexture&&this.mixTexture.animations&&this.mixTexture.animations.length>0&&e.push(this.mixTexture),e},t.prototype.dispose=function(e){this.mixTexture&&this.mixTexture.dispose(),i.prototype.dispose.call(this,e)},t.prototype.clone=function(e){var n=new t(e,this.getScene());return this.copyTo(n),this.mixTexture&&this.mixTexture.clone&&(n.mixTexture=this.mixTexture.clone()),n.diffuseColor=this.diffuseColor.clone(),n},t.prototype.serialize=function(){var e=i.prototype.serialize.call(this);return e.customType="BABYLON.TerrainMaterial",e.diffuseColor=this.diffuseColor.asArray(),e.specularColor=this.specularColor.asArray(),e.specularPower=this.specularPower,e.disableLighting=this.disableLighting,this.diffuseTextureX&&(e.diffuseTextureX=this.diffuseTextureX.serialize()),this.diffuseTextureY&&(e.diffuseTextureY=this.diffuseTextureY.serialize()),this.diffuseTextureZ&&(e.diffuseTextureZ=this.diffuseTextureZ.serialize()),e},t.Parse=function(n,r,i){var o=new t(n.name,r);return o.diffuseColor=e.Color3.FromArray(n.diffuseColor),o.specularColor=e.Color3.FromArray(n.specularColor),o.specularPower=n.specularPower,o.disableLighting=n.disableLighting,o.alpha=n.alpha,o.id=n.id,e.Tags.AddTagsTo(o,n.tags),o.backFaceCulling=n.backFaceCulling,o.wireframe=n.wireframe,n.diffuseTextureX&&(o.diffuseTextureX=e.Texture.Parse(n.diffuseTextureX,r,i)),n.diffuseTextureY&&(o.diffuseTextureY=e.Texture.Parse(n.diffuseTextureY,r,i)),n.diffuseTextureZ&&(o.diffuseTextureZ=e.Texture.Parse(n.diffuseTextureZ,r,i)),o},t}(e.Material);e.TriPlanarMaterial=i}(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.triplanarVertexShader="precision highp float;\r\n\r\n// Attributes\r\nattribute vec3 position;\r\n#ifdef NORMAL\r\nattribute vec3 normal;\r\n#endif\r\n#ifdef VERTEXCOLOR\r\nattribute vec4 color;\r\n#endif\r\n#ifdef BONES\r\nattribute vec4 matricesIndices;\r\nattribute vec4 matricesWeights;\r\n#endif\r\n\r\n// Uniforms\r\n\r\n#ifdef INSTANCES\r\nattribute vec4 world0;\r\nattribute vec4 world1;\r\nattribute vec4 world2;\r\nattribute vec4 world3;\r\n#else\r\nuniform mat4 world;\r\n#endif\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewProjection;\r\n\r\n#ifdef DIFFUSEX\r\nvarying vec2 vTextureUVX;\r\n#endif\r\n\r\n#ifdef DIFFUSEY\r\nvarying vec2 vTextureUVY;\r\n#endif\r\n\r\n#ifdef DIFFUSEZ\r\nvarying vec2 vTextureUVZ;\r\n#endif\r\n\r\nuniform float tileSize;\r\n\r\n#ifdef BONES\r\nuniform mat4 mBones[BonesPerMesh];\r\n#endif\r\n\r\n#ifdef POINTSIZE\r\nuniform float pointSize;\r\n#endif\r\n\r\n// Output\r\nvarying vec3 vPositionW;\r\n#ifdef NORMAL\r\nvarying mat3 tangentSpace;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n#ifdef CLIPPLANE\r\nuniform vec4 vClipPlane;\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n#ifdef FOG\r\nvarying float fFogDistance;\r\n#endif\r\n\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nuniform mat4 lightMatrix0;\r\nvarying vec4 vPositionFromLight0;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nuniform mat4 lightMatrix1;\r\nvarying vec4 vPositionFromLight1;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nuniform mat4 lightMatrix2;\r\nvarying vec4 vPositionFromLight2;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nuniform mat4 lightMatrix3;\r\nvarying vec4 vPositionFromLight3;\r\n#endif\r\n#endif\r\n\r\nvoid main(void) {\r\n	mat4 finalWorld;\r\n\r\n#ifdef INSTANCES\r\n	finalWorld = mat4(world0, world1, world2, world3);\r\n#else\r\n	finalWorld = world;\r\n#endif\r\n\r\n#ifdef BONES\r\n	mat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\r\n	mat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\r\n	mat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\r\n\r\n#ifdef BONES4\r\n	mat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\r\n	finalWorld = finalWorld * (m0 + m1 + m2 + m3);\r\n#else\r\n	finalWorld = finalWorld * (m0 + m1 + m2);\r\n#endif \r\n\r\n#endif\r\n	gl_Position = viewProjection * finalWorld * vec4(position, 1.0);\r\n\r\n	vec4 worldPos = finalWorld * vec4(position, 1.0);\r\n	vPositionW = vec3(worldPos);\r\n\r\n#ifdef DIFFUSEX\r\n	vTextureUVX = worldPos.zy / tileSize;\r\n#endif\r\n\r\n#ifdef DIFFUSEY\r\n	vTextureUVY = worldPos.xz / tileSize;\r\n#endif\r\n\r\n#ifdef DIFFUSEZ\r\n	vTextureUVZ = worldPos.xy / tileSize;\r\n#endif\r\n\r\n#ifdef NORMAL\r\n	// Compute tangent space (used for normal mapping + tri planar color mapping)\r\n	vec3 xtan = vec3(0,0,1);//tangent space for the X aligned plane\r\n   	vec3 xbin = vec3(0,1,0);\r\n   \r\n   	vec3 ytan = vec3(1,0,0);//tangent space for the Y aligned plane\r\n   	vec3 ybin = vec3(0,0,1);\r\n   \r\n   	vec3 ztan = vec3(1,0,0);//tangent space for the Z aligned plane\r\n   	vec3 zbin = vec3(0,1,0);\r\n	   \r\n	vec3 normalizedNormal = normalize(normal);\r\n   	normalizedNormal *= normalizedNormal;\r\n\r\n	vec3 worldBinormal = normalize(xbin * normalizedNormal.x + ybin * normalizedNormal.y + zbin * normalizedNormal.z);\r\n   	vec3 worldTangent = normalize(xtan * normalizedNormal.x + ytan * normalizedNormal.y + ztan * normalizedNormal.z);\r\n	   \r\n	worldTangent = (world * vec4(worldTangent, 1.0)).xyz;\r\n    worldBinormal = (world * vec4(worldBinormal, 1.0)).xyz;\r\n	vec3 worldNormal = normalize(cross(worldTangent, worldBinormal));\r\n\r\n	tangentSpace[0] = worldTangent;\r\n    tangentSpace[1] = worldBinormal;\r\n    tangentSpace[2] = worldNormal;\r\n#endif\r\n\r\n	// Clip plane\r\n#ifdef CLIPPLANE\r\n	fClipDistance = dot(worldPos, vClipPlane);\r\n#endif\r\n\r\n	// Fog\r\n#ifdef FOG\r\n	fFogDistance = (view * worldPos).z;\r\n#endif\r\n\r\n	// Shadows\r\n#ifdef SHADOWS\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\n	vPositionFromLight0 = lightMatrix0 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\n	vPositionFromLight1 = lightMatrix1 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\n	vPositionFromLight2 = lightMatrix2 * worldPos;\r\n#endif\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\n	vPositionFromLight3 = lightMatrix3 * worldPos;\r\n#endif\r\n#endif\r\n\r\n	// Vertex color\r\n#ifdef VERTEXCOLOR\r\n	vColor = color;\r\n#endif\r\n\r\n	// Point size\r\n#ifdef POINTSIZE\r\n	gl_PointSize = pointSize;\r\n#endif\r\n}\r\n",BABYLON.Effect.ShadersStore.triplanarPixelShader="precision highp float;\r\n\r\n// Constants\r\nuniform vec3 vEyePosition;\r\nuniform vec4 vDiffuseColor;\r\n\r\n#ifdef SPECULARTERM\r\nuniform vec4 vSpecularColor;\r\n#endif\r\n\r\n// Input\r\nvarying vec3 vPositionW;\r\n\r\n#ifdef VERTEXCOLOR\r\nvarying vec4 vColor;\r\n#endif\r\n\r\n// Lights\r\n#ifdef LIGHT0\r\nuniform vec4 vLightData0;\r\nuniform vec4 vLightDiffuse0;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular0;\r\n#endif\r\n#ifdef SHADOW0\r\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\r\nvarying vec4 vPositionFromLight0;\r\nuniform sampler2D shadowSampler0;\r\n#else\r\nuniform samplerCube shadowSampler0;\r\n#endif\r\nuniform vec3 shadowsInfo0;\r\n#endif\r\n#ifdef SPOTLIGHT0\r\nuniform vec4 vLightDirection0;\r\n#endif\r\n#ifdef HEMILIGHT0\r\nuniform vec3 vLightGround0;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\nuniform vec4 vLightData1;\r\nuniform vec4 vLightDiffuse1;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular1;\r\n#endif\r\n#ifdef SHADOW1\r\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\r\nvarying vec4 vPositionFromLight1;\r\nuniform sampler2D shadowSampler1;\r\n#else\r\nuniform samplerCube shadowSampler1;\r\n#endif\r\nuniform vec3 shadowsInfo1;\r\n#endif\r\n#ifdef SPOTLIGHT1\r\nuniform vec4 vLightDirection1;\r\n#endif\r\n#ifdef HEMILIGHT1\r\nuniform vec3 vLightGround1;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\nuniform vec4 vLightData2;\r\nuniform vec4 vLightDiffuse2;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular2;\r\n#endif\r\n#ifdef SHADOW2\r\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\r\nvarying vec4 vPositionFromLight2;\r\nuniform sampler2D shadowSampler2;\r\n#else\r\nuniform samplerCube shadowSampler2;\r\n#endif\r\nuniform vec3 shadowsInfo2;\r\n#endif\r\n#ifdef SPOTLIGHT2\r\nuniform vec4 vLightDirection2;\r\n#endif\r\n#ifdef HEMILIGHT2\r\nuniform vec3 vLightGround2;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\nuniform vec4 vLightData3;\r\nuniform vec4 vLightDiffuse3;\r\n#ifdef SPECULARTERM\r\nuniform vec3 vLightSpecular3;\r\n#endif\r\n#ifdef SHADOW3\r\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\r\nvarying vec4 vPositionFromLight3;\r\nuniform sampler2D shadowSampler3;\r\n#else\r\nuniform samplerCube shadowSampler3;\r\n#endif\r\nuniform vec3 shadowsInfo3;\r\n#endif\r\n#ifdef SPOTLIGHT3\r\nuniform vec4 vLightDirection3;\r\n#endif\r\n#ifdef HEMILIGHT3\r\nuniform vec3 vLightGround3;\r\n#endif\r\n#endif\r\n\r\n// Samplers\r\n#ifdef DIFFUSEX\r\nvarying vec2 vTextureUVX;\r\nuniform sampler2D diffuseSamplerX;\r\n#ifdef BUMPX\r\nuniform sampler2D normalSamplerX;\r\n#endif\r\n#endif\r\n\r\n#ifdef DIFFUSEY\r\nvarying vec2 vTextureUVY;\r\nuniform sampler2D diffuseSamplerY;\r\n#ifdef BUMPY\r\nuniform sampler2D normalSamplerY;\r\n#endif\r\n#endif\r\n\r\n#ifdef DIFFUSEZ\r\nvarying vec2 vTextureUVZ;\r\nuniform sampler2D diffuseSamplerZ;\r\n#ifdef BUMPZ\r\nuniform sampler2D normalSamplerZ;\r\n#endif\r\n#endif\r\n\r\n#ifdef NORMAL\r\nvarying mat3 tangentSpace;\r\n#endif\r\n\r\n// Shadows\r\n#ifdef SHADOWS\r\n\r\nfloat unpack(vec4 color)\r\n{\r\n	const vec4 bit_shift = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n	return dot(color, bit_shift);\r\n}\r\n\r\n#if defined(POINTLIGHT0) || defined(POINTLIGHT1) || defined(POINTLIGHT2) || defined(POINTLIGHT3)\r\nfloat computeShadowCube(vec3 lightPosition, samplerCube shadowSampler, float darkness, float bias)\r\n{\r\n	vec3 directionToLight = vPositionW - lightPosition;\r\n	float depth = length(directionToLight);\r\n	depth = clamp(depth, 0., 1.0);\r\n\r\n	directionToLight = normalize(directionToLight);\r\n	directionToLight.y = - directionToLight.y;\r\n\r\n	float shadow = unpack(textureCube(shadowSampler, directionToLight)) + bias;\r\n\r\n	if (depth > shadow)\r\n	{\r\n		return darkness;\r\n	}\r\n	return 1.0;\r\n}\r\n\r\nfloat computeShadowWithPCFCube(vec3 lightPosition, samplerCube shadowSampler, float mapSize, float bias, float darkness)\r\n{\r\n	vec3 directionToLight = vPositionW - lightPosition;\r\n	float depth = length(directionToLight);\r\n\r\n	depth = clamp(depth, 0., 1.0);\r\n	float diskScale = 2.0 / mapSize;\r\n\r\n	directionToLight = normalize(directionToLight);\r\n	directionToLight.y = -directionToLight.y;\r\n\r\n	float visibility = 1.;\r\n\r\n	vec3 poissonDisk[4];\r\n	poissonDisk[0] = vec3(-1.0, 1.0, -1.0);\r\n	poissonDisk[1] = vec3(1.0, -1.0, -1.0);\r\n	poissonDisk[2] = vec3(-1.0, -1.0, -1.0);\r\n	poissonDisk[3] = vec3(1.0, -1.0, 1.0);\r\n\r\n	// Poisson Sampling\r\n	float biasedDepth = depth - bias;\r\n\r\n	if (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[0] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[1] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[2] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(textureCube(shadowSampler, directionToLight + poissonDisk[3] * diskScale)) < biasedDepth) visibility -= 0.25;\r\n\r\n	return  min(1.0, visibility + darkness);\r\n}\r\n#endif\r\n\r\n#if defined(SPOTLIGHT0) || defined(SPOTLIGHT1) || defined(SPOTLIGHT2) || defined(SPOTLIGHT3) ||  defined(DIRLIGHT0) || defined(DIRLIGHT1) || defined(DIRLIGHT2) || defined(DIRLIGHT3)\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler, float darkness, float bias)\r\n{\r\n	vec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n	depth = 0.5 * depth + vec3(0.5);\r\n	vec2 uv = depth.xy;\r\n\r\n	if (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n	{\r\n		return 1.0;\r\n	}\r\n\r\n	float shadow = unpack(texture2D(shadowSampler, uv)) + bias;\r\n\r\n	if (depth.z > shadow)\r\n	{\r\n		return darkness;\r\n	}\r\n	return 1.;\r\n}\r\n\r\nfloat computeShadowWithPCF(vec4 vPositionFromLight, sampler2D shadowSampler, float mapSize, float bias, float darkness)\r\n{\r\n	vec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n	depth = 0.5 * depth + vec3(0.5);\r\n	vec2 uv = depth.xy;\r\n\r\n	if (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n	{\r\n		return 1.0;\r\n	}\r\n\r\n	float visibility = 1.;\r\n\r\n	vec2 poissonDisk[4];\r\n	poissonDisk[0] = vec2(-0.94201624, -0.39906216);\r\n	poissonDisk[1] = vec2(0.94558609, -0.76890725);\r\n	poissonDisk[2] = vec2(-0.094184101, -0.92938870);\r\n	poissonDisk[3] = vec2(0.34495938, 0.29387760);\r\n\r\n	// Poisson Sampling\r\n	float biasedDepth = depth.z - bias;\r\n\r\n	if (unpack(texture2D(shadowSampler, uv + poissonDisk[0] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(texture2D(shadowSampler, uv + poissonDisk[1] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(texture2D(shadowSampler, uv + poissonDisk[2] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n	if (unpack(texture2D(shadowSampler, uv + poissonDisk[3] / mapSize)) < biasedDepth) visibility -= 0.25;\r\n\r\n	return  min(1.0, visibility + darkness);\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat unpackHalf(vec2 color)\r\n{\r\n	return color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n	return clamp((v - low) / (high - low), 0.0, 1.0);\r\n}\r\n\r\nfloat ChebychevInequality(vec2 moments, float compare, float bias)\r\n{\r\n	float p = smoothstep(compare - bias, compare, moments.x);\r\n	float variance = max(moments.y - moments.x * moments.x, 0.02);\r\n	float d = compare - moments.x;\r\n	float p_max = linstep(0.2, 1.0, variance / (variance + d * d));\r\n\r\n	return clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler, float bias, float darkness)\r\n{\r\n	vec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n	depth = 0.5 * depth + vec3(0.5);\r\n	vec2 uv = depth.xy;\r\n\r\n	if (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0 || depth.z >= 1.0)\r\n	{\r\n		return 1.0;\r\n	}\r\n\r\n	vec4 texel = texture2D(shadowSampler, uv);\r\n\r\n	vec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n	return min(1.0, 1.0 - ChebychevInequality(moments, depth.z, bias) + darkness);\r\n}\r\n#endif\r\n#endif\r\n\r\n\r\n#ifdef CLIPPLANE\r\nvarying float fClipDistance;\r\n#endif\r\n\r\n// Fog\r\n#ifdef FOG\r\n\r\n#define FOGMODE_NONE    0.\r\n#define FOGMODE_EXP     1.\r\n#define FOGMODE_EXP2    2.\r\n#define FOGMODE_LINEAR  3.\r\n#define E 2.71828\r\n\r\nuniform vec4 vFogInfos;\r\nuniform vec3 vFogColor;\r\nvarying float fFogDistance;\r\n\r\nfloat CalcFogFactor()\r\n{\r\n	float fogCoeff = 1.0;\r\n	float fogStart = vFogInfos.y;\r\n	float fogEnd = vFogInfos.z;\r\n	float fogDensity = vFogInfos.w;\r\n\r\n	if (FOGMODE_LINEAR == vFogInfos.x)\r\n	{\r\n		fogCoeff = (fogEnd - fFogDistance) / (fogEnd - fogStart);\r\n	}\r\n	else if (FOGMODE_EXP == vFogInfos.x)\r\n	{\r\n		fogCoeff = 1.0 / pow(E, fFogDistance * fogDensity);\r\n	}\r\n	else if (FOGMODE_EXP2 == vFogInfos.x)\r\n	{\r\n		fogCoeff = 1.0 / pow(E, fFogDistance * fFogDistance * fogDensity * fogDensity);\r\n	}\r\n\r\n	return clamp(fogCoeff, 0.0, 1.0);\r\n}\r\n#endif\r\n\r\n// Light Computing\r\nstruct lightingInfo\r\n{\r\n	vec3 diffuse;\r\n#ifdef SPECULARTERM\r\n	vec3 specular;\r\n#endif\r\n};\r\n\r\nlightingInfo computeLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, float range, float glossiness) {\r\n	lightingInfo result;\r\n\r\n	vec3 lightVectorW;\r\n	float attenuation = 1.0;\r\n	if (lightData.w == 0.)\r\n	{\r\n		vec3 direction = lightData.xyz - vPositionW;\r\n\r\n		attenuation = max(0., 1.0 - length(direction) / range);\r\n		lightVectorW = normalize(direction);\r\n	}\r\n	else\r\n	{\r\n		lightVectorW = normalize(-lightData.xyz);\r\n	}\r\n\r\n	// diffuse\r\n	float ndl = max(0., dot(vNormal, lightVectorW));\r\n	result.diffuse = ndl * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n	// Specular\r\n	vec3 angleW = normalize(viewDirectionW + lightVectorW);\r\n	float specComp = max(0., dot(vNormal, angleW));\r\n	specComp = pow(specComp, max(1., glossiness));\r\n\r\n	result.specular = specComp * specularColor * attenuation;\r\n#endif\r\n	return result;\r\n}\r\n\r\nlightingInfo computeSpotLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec4 lightDirection, vec3 diffuseColor, vec3 specularColor, float range, float glossiness) {\r\n	lightingInfo result;\r\n\r\n	vec3 direction = lightData.xyz - vPositionW;\r\n	vec3 lightVectorW = normalize(direction);\r\n	float attenuation = max(0., 1.0 - length(direction) / range);\r\n\r\n	// diffuse\r\n	float cosAngle = max(0., dot(-lightDirection.xyz, lightVectorW));\r\n	float spotAtten = 0.0;\r\n\r\n	if (cosAngle >= lightDirection.w)\r\n	{\r\n		cosAngle = max(0., pow(cosAngle, lightData.w));\r\n		spotAtten = clamp((cosAngle - lightDirection.w) / (1. - cosAngle), 0.0, 1.0);\r\n\r\n		// Diffuse\r\n		float ndl = max(0., dot(vNormal, -lightDirection.xyz));\r\n		result.diffuse = ndl * spotAtten * diffuseColor * attenuation;\r\n\r\n#ifdef SPECULARTERM\r\n		// Specular\r\n		vec3 angleW = normalize(viewDirectionW - lightDirection.xyz);\r\n		float specComp = max(0., dot(vNormal, angleW));\r\n		specComp = pow(specComp, max(1., glossiness));\r\n\r\n		result.specular = specComp * specularColor * spotAtten * attenuation;\r\n#endif\r\n\r\n		return result;\r\n	}\r\n\r\n	result.diffuse = vec3(0.);\r\n#ifdef SPECULARTERM\r\n	result.specular = vec3(0.);\r\n#endif\r\n\r\n	return result;\r\n}\r\n\r\nlightingInfo computeHemisphericLighting(vec3 viewDirectionW, vec3 vNormal, vec4 lightData, vec3 diffuseColor, vec3 specularColor, vec3 groundColor, float glossiness) {\r\n	lightingInfo result;\r\n\r\n	// Diffuse\r\n	float ndl = dot(vNormal, lightData.xyz) * 0.5 + 0.5;\r\n	result.diffuse = mix(groundColor, diffuseColor, ndl);\r\n\r\n#ifdef SPECULARTERM\r\n	// Specular\r\n	vec3 angleW = normalize(viewDirectionW + lightData.xyz);\r\n	float specComp = max(0., dot(vNormal, angleW));\r\n	specComp = pow(specComp, max(1., glossiness));\r\n\r\n	result.specular = specComp * specularColor;\r\n#endif\r\n\r\n	return result;\r\n}\r\n\r\nvoid main(void) {\r\n	// Clip plane\r\n#ifdef CLIPPLANE\r\n	if (fClipDistance > 0.0)\r\n		discard;\r\n#endif\r\n\r\n	vec3 viewDirectionW = normalize(vEyePosition - vPositionW);\r\n\r\n	// Base color\r\n	vec4 baseColor = vec4(0., 0., 0., 1.);\r\n	vec3 diffuseColor = vDiffuseColor.rgb;\r\n	\r\n#ifdef SPECULARTERM\r\n	float glossiness = vSpecularColor.a;\r\n	vec3 specularColor = vSpecularColor.rgb;\r\n#else\r\n	float glossiness = 0.;\r\n#endif\r\n\r\n	// Alpha\r\n	float alpha = vDiffuseColor.a;\r\n	\r\n	// Bump\r\n#ifdef NORMAL\r\n	vec3 normalW = tangentSpace[2];\r\n#else\r\n	vec3 normalW = vec3(1.0, 1.0, 1.0);\r\n#endif\r\n\r\n	vec4 baseNormal = vec4(0.0, 0.0, 0.0, 1.0);\r\n	normalW *= normalW;\r\n\r\n#ifdef DIFFUSEX\r\n	baseColor += texture2D(diffuseSamplerX, vTextureUVX) * normalW.x;\r\n#ifdef BUMPX\r\n	baseNormal += texture2D(normalSamplerX, vTextureUVX) * normalW.x;\r\n#endif\r\n#endif\r\n\r\n#ifdef DIFFUSEY\r\n	baseColor += texture2D(diffuseSamplerY, vTextureUVY) * normalW.y;\r\n#ifdef BUMPY\r\n	baseNormal += texture2D(normalSamplerY, vTextureUVY) * normalW.y;\r\n#endif\r\n#endif\r\n\r\n#ifdef DIFFUSEZ\r\n	baseColor += texture2D(diffuseSamplerZ, vTextureUVZ) * normalW.z;\r\n#ifdef BUMPZ\r\n	baseNormal += texture2D(normalSamplerZ, vTextureUVZ) * normalW.z;\r\n#endif\r\n#endif\r\n\r\n#ifdef NORMAL\r\n	normalW = normalize((2.0 * baseNormal.xyz - 1.0) * tangentSpace);\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n	if (baseColor.a < 0.4)\r\n		discard;\r\n#endif\r\n\r\n#ifdef VERTEXCOLOR\r\n	baseColor.rgb *= vColor.rgb;\r\n#endif\r\n\r\n	// Lighting\r\n	vec3 diffuseBase = vec3(0., 0., 0.);\r\n#ifdef SPECULARTERM\r\n	vec3 specularBase = vec3(0., 0., 0.);\r\n#endif\r\n	float shadow = 1.;\r\n\r\n#ifdef LIGHT0\r\n#ifndef SPECULARTERM\r\n	vec3 vLightSpecular0 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT0\r\n	lightingInfo info = computeSpotLighting(viewDirectionW, normalW, vLightData0, vLightDirection0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT0\r\n	lightingInfo info = computeHemisphericLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightGround0, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT0) || defined(DIRLIGHT0)\r\n	lightingInfo info = computeLighting(viewDirectionW, normalW, vLightData0, vLightDiffuse0.rgb, vLightSpecular0, vLightDiffuse0.a, glossiness);\r\n#endif\r\n#ifdef SHADOW0\r\n#ifdef SHADOWVSM0\r\n	shadow = computeShadowWithVSM(vPositionFromLight0, shadowSampler0, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n#ifdef SHADOWPCF0\r\n#if defined(POINTLIGHT0)\r\n	shadow = computeShadowWithPCFCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z, shadowsInfo0.x);\r\n#else\r\n	shadow = computeShadowWithPCF(vPositionFromLight0, shadowSampler0, shadowsInfo0.y, shadowsInfo0.z, shadowsInfo0.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT0)\r\n	shadow = computeShadowCube(vLightData0.xyz, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#else\r\n	shadow = computeShadow(vPositionFromLight0, shadowSampler0, shadowsInfo0.x, shadowsInfo0.z);\r\n#endif\r\n#endif\r\n#endif\r\n#else\r\n	shadow = 1.;\r\n#endif\r\n	diffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n	specularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT1\r\n#ifndef SPECULARTERM\r\n	vec3 vLightSpecular1 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT1\r\n	info = computeSpotLighting(viewDirectionW, normalW, vLightData1, vLightDirection1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT1\r\n	info = computeHemisphericLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightGround1, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT1) || defined(DIRLIGHT1)\r\n	info = computeLighting(viewDirectionW, normalW, vLightData1, vLightDiffuse1.rgb, vLightSpecular1, vLightDiffuse1.a, glossiness);\r\n#endif\r\n#ifdef SHADOW1\r\n#ifdef SHADOWVSM1\r\n	shadow = computeShadowWithVSM(vPositionFromLight1, shadowSampler1, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n#ifdef SHADOWPCF1\r\n#if defined(POINTLIGHT1)\r\n	shadow = computeShadowWithPCFCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z, shadowsInfo1.x);\r\n#else\r\n	shadow = computeShadowWithPCF(vPositionFromLight1, shadowSampler1, shadowsInfo1.y, shadowsInfo1.z, shadowsInfo1.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT1)\r\n	shadow = computeShadowCube(vLightData1.xyz, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#else\r\n	shadow = computeShadow(vPositionFromLight1, shadowSampler1, shadowsInfo1.x, shadowsInfo1.z);\r\n#endif\r\n#endif\r\n#endif\r\n#else\r\n	shadow = 1.;\r\n#endif\r\n	diffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n	specularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT2\r\n#ifndef SPECULARTERM\r\n	vec3 vLightSpecular2 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT2\r\n	info = computeSpotLighting(viewDirectionW, normalW, vLightData2, vLightDirection2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT2\r\n	info = computeHemisphericLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightGround2, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT2) || defined(DIRLIGHT2)\r\n	info = computeLighting(viewDirectionW, normalW, vLightData2, vLightDiffuse2.rgb, vLightSpecular2, vLightDiffuse2.a, glossiness);\r\n#endif\r\n#ifdef SHADOW2\r\n#ifdef SHADOWVSM2\r\n	shadow = computeShadowWithVSM(vPositionFromLight2, shadowSampler2, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n#ifdef SHADOWPCF2\r\n#if defined(POINTLIGHT2)\r\n	shadow = computeShadowWithPCFCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z, shadowsInfo2.x);\r\n#else\r\n	shadow = computeShadowWithPCF(vPositionFromLight2, shadowSampler2, shadowsInfo2.y, shadowsInfo2.z, shadowsInfo2.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT2)\r\n	shadow = computeShadowCube(vLightData2.xyz, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#else\r\n	shadow = computeShadow(vPositionFromLight2, shadowSampler2, shadowsInfo2.x, shadowsInfo2.z);\r\n#endif\r\n#endif	\r\n#endif	\r\n#else\r\n	shadow = 1.;\r\n#endif\r\n	diffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n	specularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef LIGHT3\r\n#ifndef SPECULARTERM\r\n	vec3 vLightSpecular3 = vec3(0.0);\r\n#endif\r\n#ifdef SPOTLIGHT3\r\n	info = computeSpotLighting(viewDirectionW, normalW, vLightData3, vLightDirection3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness);\r\n#endif\r\n#ifdef HEMILIGHT3\r\n	info = computeHemisphericLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightGround3, glossiness);\r\n#endif\r\n#if defined(POINTLIGHT3) || defined(DIRLIGHT3)\r\n	info = computeLighting(viewDirectionW, normalW, vLightData3, vLightDiffuse3.rgb, vLightSpecular3, vLightDiffuse3.a, glossiness);\r\n#endif\r\n#ifdef SHADOW3\r\n#ifdef SHADOWVSM3\r\n	shadow = computeShadowWithVSM(vPositionFromLight3, shadowSampler3, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n#ifdef SHADOWPCF3\r\n#if defined(POINTLIGHT3)\r\n	shadow = computeShadowWithPCFCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z, shadowsInfo3.x);\r\n#else\r\n	shadow = computeShadowWithPCF(vPositionFromLight3, shadowSampler3, shadowsInfo3.y, shadowsInfo3.z, shadowsInfo3.x);\r\n#endif\r\n#else\r\n#if defined(POINTLIGHT3)\r\n	shadow = computeShadowCube(vLightData3.xyz, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#else\r\n	shadow = computeShadow(vPositionFromLight3, shadowSampler3, shadowsInfo3.x, shadowsInfo3.z);\r\n#endif\r\n#endif	\r\n#endif	\r\n#else\r\n	shadow = 1.;\r\n#endif\r\n	diffuseBase += info.diffuse * shadow;\r\n#ifdef SPECULARTERM\r\n	specularBase += info.specular * shadow;\r\n#endif\r\n#endif\r\n\r\n#ifdef VERTEXALPHA\r\n	alpha *= vColor.a;\r\n#endif\r\n\r\n#ifdef SPECULARTERM\r\n	vec3 finalSpecular = specularBase * specularColor;\r\n#else\r\n	vec3 finalSpecular = vec3(0.0);\r\n#endif\r\n\r\n	vec3 finalDiffuse = clamp(diffuseBase * diffuseColor, 0.0, 1.0) * baseColor.rgb;\r\n\r\n	// Composition\r\n	vec4 color = vec4(finalDiffuse + finalSpecular, alpha);\r\n\r\n#ifdef FOG\r\n	float fog = CalcFogFactor();\r\n	color.rgb = fog * color.rgb + (1.0 - fog) * vFogColor;\r\n#endif\r\n\r\n	gl_FragColor = color;\r\n}\r\n";