var BABYLON;!function(e){var i=4,t=function(e){function i(){e.call(this),this.DIFFUSE=!1,this.HEIGHTMAP=!1,this.CLIPPLANE=!1,this.ALPHATEST=!1,this.POINTSIZE=!1,this.FOG=!1,this.LIGHT0=!1,this.LIGHT1=!1,this.LIGHT2=!1,this.LIGHT3=!1,this.SPOTLIGHT0=!1,this.SPOTLIGHT1=!1,this.SPOTLIGHT2=!1,this.SPOTLIGHT3=!1,this.HEMILIGHT0=!1,this.HEMILIGHT1=!1,this.HEMILIGHT2=!1,this.HEMILIGHT3=!1,this.DIRLIGHT0=!1,this.DIRLIGHT1=!1,this.DIRLIGHT2=!1,this.DIRLIGHT3=!1,this.POINTLIGHT0=!1,this.POINTLIGHT1=!1,this.POINTLIGHT2=!1,this.POINTLIGHT3=!1,this.SHADOW0=!1,this.SHADOW1=!1,this.SHADOW2=!1,this.SHADOW3=!1,this.SHADOWS=!1,this.SHADOWVSM0=!1,this.SHADOWVSM1=!1,this.SHADOWVSM2=!1,this.SHADOWVSM3=!1,this.SHADOWPCF0=!1,this.SHADOWPCF1=!1,this.SHADOWPCF2=!1,this.SHADOWPCF3=!1,this.NORMAL=!1,this.UV1=!1,this.UV2=!1,this.VERTEXCOLOR=!1,this.VERTEXALPHA=!1,this.BONES=!1,this.BONES4=!1,this.BonesPerMesh=0,this.INSTANCES=!1,this._keys=Object.keys(this)}return __extends(i,e),i}(e.MaterialDefines),n=function(n){function s(i,s){n.call(this,i,s),this.furLength=.5,this.furAngle=0,this.diffuseColor=new e.Color3(.44,.21,.02),this.disableLighting=!1,this._worldViewProjectionMatrix=e.Matrix.Zero(),this._scaledDiffuse=new e.Color3,this._defines=new t,this._cachedDefines=new t,this._cachedDefines.BonesPerMesh=-1}return __extends(s,n),s.prototype.needAlphaBlending=function(){return this.alpha<1},s.prototype.needAlphaTesting=function(){return!1},s.prototype.getAlphaTestTexture=function(){return null},s.prototype._checkCache=function(e,i,t){return i?this._defines.INSTANCES!==t?!1:i._materialDefines&&i._materialDefines.isEqual(this._defines)?!0:!1:!0},s.prototype.isReady=function(n,s){if(this.checkReadyOnlyOnce&&this._wasPreviouslyReady)return!0;var f=this.getScene();if(!this.checkReadyOnEveryCall&&this._renderId===f.getRenderId()&&this._checkCache(f,n,s))return!0;var r=f.getEngine(),o=!1,a=!1;if(this._defines.reset(),f.texturesEnabled){if(this.diffuseTexture&&e.StandardMaterial.DiffuseTextureEnabled){if(!this.diffuseTexture.isReady())return!1;a=!0,this._defines.DIFFUSE=!0}if(this.heightTexture){if(!this.heightTexture.isReady())return!1;a=!0,this._defines.HEIGHTMAP=!0}}f.clipPlane&&(this._defines.CLIPPLANE=!0),r.getAlphaTesting()&&(this._defines.ALPHATEST=!0),(this.pointsCloud||f.forcePointsCloud)&&(this._defines.POINTSIZE=!0),f.fogEnabled&&n&&n.applyFog&&f.fogMode!==e.Scene.FOGMODE_NONE&&this.fogEnabled&&(this._defines.FOG=!0);var h=0;if(f.lightsEnabled&&!this.disableLighting)for(var d=0;d<f.lights.length;d++){var l=f.lights[d];if(l.isEnabled()){if(l._excludedMeshesIds.length>0){for(var u=0;u<l._excludedMeshesIds.length;u++){var c=f.getMeshByID(l._excludedMeshesIds[u]);c&&l.excludedMeshes.push(c)}l._excludedMeshesIds=[]}if(l._includedOnlyMeshesIds.length>0){for(var g=0;g<l._includedOnlyMeshesIds.length;g++){var v=f.getMeshByID(l._includedOnlyMeshesIds[g]);v&&l.includedOnlyMeshes.push(v)}l._includedOnlyMeshesIds=[]}if(l.canAffectMesh(n)){o=!0,this._defines["LIGHT"+h]=!0;var T;if(T=l instanceof e.SpotLight?"SPOTLIGHT"+h:l instanceof e.HemisphericLight?"HEMILIGHT"+h:l instanceof e.PointLight?"POINTLIGHT"+h:"DIRLIGHT"+h,this._defines[T]=!0,f.shadowsEnabled){var L=l.getShadowGenerator();n&&n.receiveShadows&&L&&(this._defines["SHADOW"+h]=!0,this._defines.SHADOWS=!0,(L.useVarianceShadowMap||L.useBlurVarianceShadowMap)&&(this._defines["SHADOWVSM"+h]=!0),L.usePoissonSampling&&(this._defines["SHADOWPCF"+h]=!0))}if(h++,h===i)break}}}if(n&&(o&&n.isVerticesDataPresent(e.VertexBuffer.NormalKind)&&(this._defines.NORMAL=!0),a&&(n.isVerticesDataPresent(e.VertexBuffer.UVKind)&&(this._defines.UV1=!0),n.isVerticesDataPresent(e.VertexBuffer.UV2Kind)&&(this._defines.UV2=!0)),n.useVertexColors&&n.isVerticesDataPresent(e.VertexBuffer.ColorKind)&&(this._defines.VERTEXCOLOR=!0,n.hasVertexAlpha&&(this._defines.VERTEXALPHA=!0)),n.useBones&&n.computeBonesUsingShaders&&(this._defines.BONES=!0,this._defines.BonesPerMesh=n.skeleton.bones.length+1,this._defines.BONES4=!0),s&&(this._defines.INSTANCES=!0)),!this._defines.isEqual(this._cachedDefines)){this._defines.cloneTo(this._cachedDefines),f.resetCachedMaterial();var S=new e.EffectFallbacks;for(this._defines.FOG&&S.addFallback(1,"FOG"),h=0;i>h;h++)this._defines["LIGHT"+h]&&(h>0&&S.addFallback(h,"LIGHT"+h),this._defines["SHADOW"+h]&&S.addFallback(0,"SHADOW"+h),this._defines["SHADOWPCF"+h]&&S.addFallback(0,"SHADOWPCF"+h),this._defines["SHADOWVSM"+h]&&S.addFallback(0,"SHADOWVSM"+h));this._defines.BONES4&&S.addFallback(0,"BONES4");var I=[e.VertexBuffer.PositionKind];this._defines.NORMAL&&I.push(e.VertexBuffer.NormalKind),this._defines.UV1&&I.push(e.VertexBuffer.UVKind),this._defines.UV2&&I.push(e.VertexBuffer.UV2Kind),this._defines.VERTEXCOLOR&&I.push(e.VertexBuffer.ColorKind),this._defines.BONES&&(I.push(e.VertexBuffer.MatricesIndicesKind),I.push(e.VertexBuffer.MatricesWeightsKind)),this._defines.INSTANCES&&(I.push("world0"),I.push("world1"),I.push("world2"),I.push("world3"));var m="simple",x=this._defines.toString();this._effect=f.getEngine().createEffect(m,I,["world","view","viewProjection","vEyePosition","vLightsType","vDiffuseColor","vLightData0","vLightDiffuse0","vLightSpecular0","vLightDirection0","vLightGround0","lightMatrix0","vLightData1","vLightDiffuse1","vLightSpecular1","vLightDirection1","vLightGround1","lightMatrix1","vLightData2","vLightDiffuse2","vLightSpecular2","vLightDirection2","vLightGround2","lightMatrix2","vLightData3","vLightDiffuse3","vLightSpecular3","vLightDirection3","vLightGround3","lightMatrix3","vFogInfos","vFogColor","pointSize","vDiffuseInfos","mBones","vClipPlane","diffuseMatrix","shadowsInfo0","shadowsInfo1","shadowsInfo2","shadowsInfo3","furLength","furAngle"],["diffuseSampler","shadowSampler0","shadowSampler1","shadowSampler2","shadowSampler3","heightTexture"],x,S,this.onCompiled,this.onError)}return this._effect.isReady()?(this._renderId=f.getRenderId(),this._wasPreviouslyReady=!0,n&&(n._materialDefines||(n._materialDefines=new t),this._defines.cloneTo(n._materialDefines)),!0):!1},s.prototype.bindOnlyWorldMatrix=function(e){this._effect.setMatrix("world",e)},s.prototype.bind=function(t,s){var f=this.getScene();if(this.bindOnlyWorldMatrix(t),this._effect.setMatrix("viewProjection",f.getTransformMatrix()),s&&s.useBones&&s.computeBonesUsingShaders&&this._effect.setMatrices("mBones",s.skeleton.getTransformMatrices()),f.getCachedMaterial()!==this){if(this.diffuseTexture&&e.StandardMaterial.DiffuseTextureEnabled&&(this._effect.setTexture("diffuseSampler",this.diffuseTexture),this._effect.setFloat2("vDiffuseInfos",this.diffuseTexture.coordinatesIndex,this.diffuseTexture.level),this._effect.setMatrix("diffuseMatrix",this.diffuseTexture.getTextureMatrix())),this.heightTexture&&this._effect.setTexture("heightTexture",this.heightTexture),f.clipPlane){var r=f.clipPlane;this._effect.setFloat4("vClipPlane",r.normal.x,r.normal.y,r.normal.z,r.d)}this.pointsCloud&&this._effect.setFloat("pointSize",this.pointSize),this._effect.setVector3("vEyePosition",f._mirroredCameraPosition?f._mirroredCameraPosition:f.activeCamera.position)}if(this._effect.setColor4("vDiffuseColor",this._scaledDiffuse,this.alpha*s.visibility),f.lightsEnabled&&!this.disableLighting)for(var o=0,a=0;a<f.lights.length;a++){var h=f.lights[a];if(h.isEnabled()&&h.canAffectMesh(s)){if(h instanceof e.PointLight?h.transferToEffect(this._effect,"vLightData"+o):h instanceof e.DirectionalLight?h.transferToEffect(this._effect,"vLightData"+o):h instanceof e.SpotLight?h.transferToEffect(this._effect,"vLightData"+o,"vLightDirection"+o):h instanceof e.HemisphericLight&&h.transferToEffect(this._effect,"vLightData"+o,"vLightGround"+o),h.diffuse.scaleToRef(h.intensity,this._scaledDiffuse),this._effect.setColor4("vLightDiffuse"+o,this._scaledDiffuse,h.range),f.shadowsEnabled){var d=h.getShadowGenerator();s.receiveShadows&&d&&(this._effect.setMatrix("lightMatrix"+o,d.getTransformMatrix()),this._effect.setTexture("shadowSampler"+o,d.getShadowMapForRendering()),this._effect.setFloat3("shadowsInfo"+o,d.getDarkness(),d.getShadowMap().getSize().width,d.bias))}if(o++,o===i)break}}f.fogEnabled&&s.applyFog&&f.fogMode!==e.Scene.FOGMODE_NONE&&this._effect.setMatrix("view",f.getViewMatrix()),f.fogEnabled&&s.applyFog&&f.fogMode!==e.Scene.FOGMODE_NONE&&(this._effect.setFloat4("vFogInfos",f.fogMode,f.fogStart,f.fogEnd,f.fogDensity),this._effect.setColor3("vFogColor",f.fogColor)),this._effect.setFloat("furLength",this.furLength),this._effect.setFloat("furAngle",this.furAngle),n.prototype.bind.call(this,t,s)},s.prototype.getAnimatables=function(){var e=[];return this.diffuseTexture&&this.diffuseTexture.animations&&this.diffuseTexture.animations.length>0&&e.push(this.diffuseTexture),this.heightTexture&&this.heightTexture.animations&&this.heightTexture.animations.length>0&&e.push(this.heightTexture),e},s.prototype.dispose=function(e){this.diffuseTexture&&this.diffuseTexture.dispose(),n.prototype.dispose.call(this,e)},s.prototype.clone=function(e){var i=new s(e,this.getScene());return this.copyTo(i),this.diffuseTexture&&this.diffuseTexture.clone&&(i.diffuseTexture=this.diffuseTexture.clone()),this.heightTexture&&this.heightTexture.clone&&(i.heightTexture=this.heightTexture.clone()),this.diffuseColor&&this.diffuseColor.clone&&(i.diffuseColor=this.diffuseColor.clone()),i},s.prototype.serialize=function(){var e=n.prototype.serialize.call(this);return e.customType="BABYLON.FurMaterial",e.diffuseColor=this.diffuseColor.asArray(),e.disableLighting=this.disableLighting,e.furLength=this.furLength,e.furAngle=this.furAngle,this.diffuseTexture&&(e.diffuseTexture=this.diffuseTexture.serialize()),this.heightTexture&&(e.heightTexture=this.heightTexture.serialize()),e},s.Parse=function(i,t,n){var f=new s(i.name,t);return f.diffuseColor=e.Color3.FromArray(i.diffuseColor),f.furLength=i.furLength,f.furAngle=i.furAngle,f.disableLighting=i.disableLighting,f.alpha=i.alpha,f.id=i.id,e.Tags.AddTagsTo(f,i.tags),f.backFaceCulling=i.backFaceCulling,f.wireframe=i.wireframe,i.diffuseTexture&&(f.diffuseTexture=e.Texture.Parse(i.diffuseTexture,t,n)),i.heightTexture&&(f.heightTexture=e.Texture.Parse(i.heightTexture,t,n)),i.checkReadyOnlyOnce&&(f.checkReadyOnlyOnce=i.checkReadyOnlyOnce),f},s}(e.Material);e.FurMaterial=n}(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.furVertexShader='precision highp float;\n\n// Attributes\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n#ifdef BONES\nattribute vec4 matricesIndices;\nattribute vec4 matricesWeights;\n#endif\n\n\n// Uniforms\nuniform furLength;\nuniform furAngle;\n#ifdef HEIGHTMAP\nuniform sampler2D heightTexture\n#endif\n\n#ifdef INSTANCES\nattribute vec4 world0;\nattribute vec4 world1;\nattribute vec4 world2;\nattribute vec4 world3;\n#else\nuniform mat4 world;\n#endif\n\nuniform mat4 view;\nuniform mat4 viewProjection;\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n\n#ifdef BONES\nuniform mat4 mBones[BonesPerMesh];\n#endif\n\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\n// Output\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\nvarying float vfur_length;\n\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#ifdef CLIPPLANE\nuniform vec4 vClipPlane;\nvarying float fClipDistance;\n#endif\n\n#ifdef FOG\nvarying float fFogDistance;\n#endif\n\n#ifdef SHADOWS\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\nuniform mat4 lightMatrix0;\nvarying vec4 vPositionFromLight0;\n#endif\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\nuniform mat4 lightMatrix1;\nvarying vec4 vPositionFromLight1;\n#endif\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\nuniform mat4 lightMatrix2;\nvarying vec4 vPositionFromLight2;\n#endif\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\nuniform mat4 lightMatrix3;\nvarying vec4 vPositionFromLight3;\n#endif\n#endif\n\nfloat Rand(vec3 rv) {\n	float x = dot(rv, vec3(12.9898,78.233, 24.65487));\n	return fract(sin(x) * 43758.5453);\n}\n\nvoid main(void) {\n	mat4 finalWorld;\n\n#ifdef INSTANCES\n	finalWorld = mat4(world0, world1, world2, world3);\n#else\n	finalWorld = world;\n#endif\n\n#ifdef BONES\n	mat4 m0 = mBones[int(matricesIndices.x)] * matricesWeights.x;\n	mat4 m1 = mBones[int(matricesIndices.y)] * matricesWeights.y;\n	mat4 m2 = mBones[int(matricesIndices.z)] * matricesWeights.z;\n\n#ifdef BONES4\n	mat4 m3 = mBones[int(matricesIndices.w)] * matricesWeights.w;\n	finalWorld = finalWorld * (m0 + m1 + m2 + m3);\n#else\n	finalWorld = finalWorld * (m0 + m1 + m2);\n#endif \n\n#endif\n//FUR\n#ifdef HEIGHTMAP	\n	vfur_length = furLength * texture2D(heightTexture, uv).rgb.x;\\r\\n"+\n#else\n	float r = Rand(position);	\n	vfur_length = (furLength * r);\n#endif\n	float r = Rand(position);\n	vfur_length = 5 * r;\n	vec3 tangent1 = vec3(normal.y, -normal.x, 0);\n	vec3 tangent2 = vec3(-normal.z, 0, normal.x);\n	r = Rand(tangent1*r);\n	float J = (2.0 + 4.0* r);\n	r = Rand(tangent2*r);\n	float K = (2.0 + 2.0* r);\n	tangent1 = tangent1*J + tangent2*K;\n	tangent1 = normalize(tangent1);\n    vec3 newPosition = position + normal * vfur_length*cos(furAngle) + tangent1*vfur_length*sin(furAngle);\n	\n//END FUR\n	gl_Position = viewProjection * finalWorld * vec4(newPosition, 1.0);\n\n	vec4 worldPos = finalWorld * vec4(newPosition, 1.0);\n	vPositionW = vec3(worldPos);\n\n#ifdef NORMAL\n	vNormalW = normalize(vec3(finalWorld * vec4(normal, 0.0)));\n#endif\n\n	// Texture coordinates\n#ifndef UV1\n	vec2 uv = vec2(0., 0.);\n#endif\n#ifndef UV2\n	vec2 uv2 = vec2(0., 0.);\n#endif\n\n#ifdef DIFFUSE\n	if (vDiffuseInfos.x == 0.)\n	{\n		vDiffuseUV = vec2(diffuseMatrix * vec4(uv, 1.0, 0.0));\n	}\n	else\n	{\n		vDiffuseUV = vec2(diffuseMatrix * vec4(uv2, 1.0, 0.0));\n	}\n#endif\n\n	// Clip plane\n#ifdef CLIPPLANE\n	fClipDistance = dot(worldPos, vClipPlane);\n#endif\n\n	// Fog\n#ifdef FOG\n	fFogDistance = (view * worldPos).z;\n#endif\n\n	// Shadows\n#ifdef SHADOWS\n#if defined(SPOTLIGHT0) || defined(DIRLIGHT0)\n	vPositionFromLight0 = lightMatrix0 * worldPos;\n#endif\n#if defined(SPOTLIGHT1) || defined(DIRLIGHT1)\n	vPositionFromLight1 = lightMatrix1 * worldPos;\n#endif\n#if defined(SPOTLIGHT2) || defined(DIRLIGHT2)\n	vPositionFromLight2 = lightMatrix2 * worldPos;\n#endif\n#if defined(SPOTLIGHT3) || defined(DIRLIGHT3)\n	vPositionFromLight3 = lightMatrix3 * worldPos;\n#endif\n#endif\n\n	// Vertex color\n#ifdef VERTEXCOLOR\n	vColor = color;\n#endif\n\n	// Point size\n#ifdef POINTSIZE\n	gl_PointSize = pointSize;\n#endif\n}\n';