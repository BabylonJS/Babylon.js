var BABYLON;!function(r){var n=function(n){function e(e,t,i,o,l){n.call(this,e,t,"marbleProceduralTexture",i,o,l),this._numberOfTilesHeight=3,this._numberOfTilesWidth=3,this._amplitude=9,this._jointColor=new r.Color3(.72,.72,.72),this.updateShaderUniforms()}return __extends(e,n),e.prototype.updateShaderUniforms=function(){this.setFloat("numberOfTilesHeight",this._numberOfTilesHeight),this.setFloat("numberOfTilesWidth",this._numberOfTilesWidth),this.setFloat("amplitude",this._amplitude),this.setColor3("jointColor",this._jointColor)},Object.defineProperty(e.prototype,"numberOfTilesHeight",{get:function(){return this._numberOfTilesHeight},set:function(r){this._numberOfTilesHeight=r,this.updateShaderUniforms()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"amplitude",{get:function(){return this._amplitude},set:function(r){this._amplitude=r,this.updateShaderUniforms()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"numberOfTilesWidth",{get:function(){return this._numberOfTilesWidth},set:function(r){this._numberOfTilesWidth=r,this.updateShaderUniforms()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"jointColor",{get:function(){return this._jointColor},set:function(r){this._jointColor=r,this.updateShaderUniforms()},enumerable:!0,configurable:!0}),e}(r.ProceduralTexture);r.MarbleProceduralTexture=n}(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.marbleProceduralTexturePixelShader="precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float numberOfTilesHeight;\r\nuniform float numberOfTilesWidth;\r\nuniform float amplitude;\r\nuniform vec3 marbleColor;\r\nuniform vec3 jointColor;\r\n\r\nconst vec3 tileSize = vec3(1.1, 1.0, 1.1);\r\nconst vec3 tilePct = vec3(0.98, 1.0, 0.98);\r\n\r\nfloat rand(vec2 n) {\r\n	return fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n	const vec2 d = vec2(0.0, 1.0);\r\n	vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n	return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat turbulence(vec2 P)\r\n{\r\n	float val = 0.0;\r\n	float freq = 1.0;\r\n	for (int i = 0; i < 4; i++)\r\n	{\r\n		val += abs(noise(P*freq) / freq);\r\n		freq *= 2.07;\r\n	}\r\n	return val;\r\n}\r\n\r\nfloat round(float number){\r\n	return sign(number)*floor(abs(number) + 0.5);\r\n}\r\n\r\nvec3 marble_color(float x)\r\n{\r\n	vec3 col;\r\n	x = 0.5*(x + 1.);\r\n	x = sqrt(x);             \r\n	x = sqrt(x);\r\n	x = sqrt(x);\r\n	col = vec3(.2 + .75*x);  \r\n	col.b *= 0.95;           \r\n	return col;\r\n}\r\n\r\nvoid main()\r\n{\r\n	float brickW = 1.0 / numberOfTilesWidth;\r\n	float brickH = 1.0 / numberOfTilesHeight;\r\n	float jointWPercentage = 0.01;\r\n	float jointHPercentage = 0.01;\r\n	vec3 color = marbleColor;\r\n	float yi = vUV.y / brickH;\r\n	float nyi = round(yi);\r\n	float xi = vUV.x / brickW;\r\n\r\n	if (mod(floor(yi), 2.0) == 0.0){\r\n		xi = xi - 0.5;\r\n	}\r\n\r\n	float nxi = round(xi);\r\n	vec2 brickvUV = vec2((xi - floor(xi)) / brickH, (yi - floor(yi)) / brickW);\r\n\r\n	if (yi < nyi + jointHPercentage && yi > nyi - jointHPercentage){\r\n		color = mix(jointColor, vec3(0.37, 0.25, 0.25), (yi - nyi) / jointHPercentage + 0.2);\r\n	}\r\n	else if (xi < nxi + jointWPercentage && xi > nxi - jointWPercentage){\r\n		color = mix(jointColor, vec3(0.44, 0.44, 0.44), (xi - nxi) / jointWPercentage + 0.2);\r\n	}\r\n	else {\r\n		float t = 6.28 * brickvUV.x / (tileSize.x + noise(vec2(vUV)*6.0));\r\n		t += amplitude * turbulence(brickvUV.xy);\r\n		t = sin(t);\r\n		color = marble_color(t);\r\n	}\r\n\r\n	gl_FragColor = vec4(color, 0.0);\r\n}";