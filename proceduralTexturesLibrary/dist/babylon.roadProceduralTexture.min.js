var BABYLON;!function(r){var o=function(o){function n(n,e,t,a,d){o.call(this,n,e,"roadProceduralTexture",t,a,d),this._roadColor=new r.Color3(.53,.53,.53),this.updateShaderUniforms()}return __extends(n,o),n.prototype.updateShaderUniforms=function(){this.setColor3("roadColor",this._roadColor)},Object.defineProperty(n.prototype,"roadColor",{get:function(){return this._roadColor},set:function(r){this._roadColor=r,this.updateShaderUniforms()},enumerable:!0,configurable:!0}),n}(r.ProceduralTexture);r.RoadProceduralTexture=o}(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.roadProceduralTexturePixelShader="precision highp float;\r\n\r\nvarying vec2 vUV;                    \r\nuniform vec3 roadColor;\r\n\r\nfloat rand(vec2 n) {\r\n	return fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n	const vec2 d = vec2(0.0, 1.0);\r\n	vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n	return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n	float total = 0.0, amplitude = 1.0;\r\n	for (int i = 0; i < 4; i++) {\r\n		total += noise(n) * amplitude;\r\n		n += n;\r\n		amplitude *= 0.5;\r\n	}\r\n	return total;\r\n}\r\n\r\nvoid main(void) {\r\n	float ratioy = mod(gl_FragCoord.y * 100.0 , fbm(vUV * 2.0));\r\n	vec3 color = roadColor * ratioy;\r\n	gl_FragColor = vec4(color, 1.0);\r\n}";