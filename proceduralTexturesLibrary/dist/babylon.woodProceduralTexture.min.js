var BABYLON;!function(r){var o=function(o){function n(n,e,t,a,i){o.call(this,n,e,"woodProceduralTexture",t,a,i),this._ampScale=100,this._woodColor=new r.Color3(.32,.17,.09),this.updateShaderUniforms()}return __extends(n,o),n.prototype.updateShaderUniforms=function(){this.setFloat("ampScale",this._ampScale),this.setColor3("woodColor",this._woodColor)},Object.defineProperty(n.prototype,"ampScale",{get:function(){return this._ampScale},set:function(r){this._ampScale=r,this.updateShaderUniforms()},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"woodColor",{get:function(){return this._woodColor},set:function(r){this._woodColor=r,this.updateShaderUniforms()},enumerable:!0,configurable:!0}),n}(r.ProceduralTexture);r.WoodProceduralTexture=o}(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.woodProceduralTexturePixelShader="precision highp float;\r\n\r\nvarying vec2 vPosition;\r\nvarying vec2 vUV;\r\n\r\nuniform float ampScale;\r\nuniform vec3 woodColor;\r\n\r\nfloat rand(vec2 n) {\r\n	return fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\r\n}\r\n\r\nfloat noise(vec2 n) {\r\n	const vec2 d = vec2(0.0, 1.0);\r\n	vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n	return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n}\r\n\r\nfloat fbm(vec2 n) {\r\n	float total = 0.0, amplitude = 1.0;\r\n	for (int i = 0; i < 4; i++) {\r\n		total += noise(n) * amplitude;\r\n		n += n;\r\n		amplitude *= 0.5;\r\n	}\r\n	return total;\r\n}\r\n\r\nvoid main(void) {\r\n	float ratioy = mod(vUV.x * ampScale, 2.0 + fbm(vUV * 0.8));\r\n	vec3 wood = woodColor * ratioy;\r\n	gl_FragColor = vec4(wood, 1.0);\r\n}";